{"version":3,"sources":["ng-jsvat.js"],"names":["angular","module","factory","VatChecker","_REGEXP","austria","belgium","bulgaria","switzerland","cyprus","czech_republic","germany","denmark","estonia","greece","spain_national","spain_other","spain_personal_1","spain_personal_2","eu_type","finland","france_1","france_2","france_3","france_4","uk_standard","uk_branches","uk_government","uk_health_authority","croatia","hungary","ireland_1","ireland_2","ireland_3","italy","latvia","lithunia","luxembourg","malta","netherlands","norway_not_EU","poland","portugal","romania","russia","serbia","slovenia","slovakia_republic","sweden","exports","checkvatNum","number","defCCode","vatNum","toString","toUpperCase","replace","isValid","k","hasOwnProperty","isMatch","test","parsedNum","exec","cCode","length","_checks","AT","total","multipliers","temp","i","Number","charAt","Math","floor","slice","BE","BG","month","substr","CHE","CY","String","fromCharCode","CZ","czexp","lookup","DE","product","sum","checkdigit","DK","EE","EL","ES","esexp","tempnumber","substring","EU","FI","FR","GB","no","cd","abs","HR","HU","IE","IT","LT","LU","LV","MT","NL","NO","PL","PT","RO","VATlen","RS","RU","total1","multipliers1","total2","multipliers2","SE","digit","R","S","SI","SK"],"mappings":"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","file":"ng-jsvat.min.js","sourcesContent":["angular.module('jsvat', [])\n\r    .factory('VatCheckerFactory', function () {\n\rvar VatChecker = (function () {\n    'use strict';\n\n    var _REGEXP = {\n        austria: /^(AT)U(\\d{8})$/,\n        belgium: /^(BE)(0?\\d{9})$/,\n        bulgaria: /^(BG)(\\d{9,10})$/,\n        switzerland: /^(CHE)(\\d{9})(MWST)?$/,\n        cyprus: /^(CY)([0-59]\\d{7}[A-Z])$/,\n        czech_republic: /^(CZ)(\\d{8,10})(\\d{3})?$/,\n        germany: /^(DE)([1-9]\\d{8})$/,\n        denmark: /^(DK)(\\d{8})$/,\n        estonia: /^(EE)(10\\d{7})$/,\n        greece: /^(EL)(\\d{9})$/,\n        spain_national: /^(ES)([A-Z]\\d{8})$/,\n        spain_other: /^(ES)([A-HN-SW]\\d{7}[A-J])$/,\n        spain_personal_1: /^(ES)([0-9YZ]\\d{7}[A-Z])$/,\n        spain_personal_2: /^(ES)([KLMX]\\d{7}[A-Z])$/,\n        eu_type: /^(EU)(\\d{9})$/,\n        finland: /^(FI)(\\d{8})$/,\n        france_1: /^(FR)(\\d{11})$/,\n        france_2: /^(FR)([A-HJ-NP-Z]\\d{10})$/,\n        france_3: /^(FR)(\\d[A-HJ-NP-Z]\\d{9})$/,\n        france_4: /^(FR)([A-HJ-NP-Z]{2}\\d{9})$/,\n        uk_standard: /^(GB)?(\\d{9})$/,\n        uk_branches: /^(GB)?(\\d{12})$/,\n        uk_government: /^(GB)?(GD\\d{3})$/,\n        uk_health_authority: /^(GB)?(HA\\d{3})$/,\n        croatia: /^(HR)(\\d{11})$/,\n        hungary: /^(HU)(\\d{8})$/,\n        ireland_1: /^(IE)(\\d{7}[A-W])$/,\n        ireland_2: /^(IE)([7-9][A-Z\\*\\+)]\\d{5}[A-W])$/,\n        ireland_3: /^(IE)(\\d{7}[A-W][AH])$/,\n        italy: /^(IT)(\\d{11})$/,\n        latvia: /^(LV)(\\d{11})$/,\n        lithunia: /^(LT)(\\d{9}|\\d{12})$/,\n        luxembourg: /^(LU)(\\d{8})$/,\n        malta: /^(MT)([1-9]\\d{7})$/,\n        netherlands: /^(NL)(\\d{9})B\\d{2}$/,\n        norway_not_EU: /^(NO)(\\d{9})$/,\n        poland: /^(PL)(\\d{10})$/,\n        portugal: /^(PT)(\\d{9})$/,\n        romania: /^(RO)([1-9]\\d{1,9})$/,\n        russia: /^(RU)(\\d{10}|\\d{12})$/,\n        serbia: /^(RS)(\\d{9})$/,\n        slovenia: /^(SI)([1-9]\\d{7})$/,\n        slovakia_republic: /^(SK)([1-9]\\d[2346-9]\\d{7})$/,\n        sweden: /^(SE)(\\d{10}01)$/\n    };\n\n    var exports = {\n        checkvatNum: function (number) {\n            if (!number) return false;\n            var defCCode = \"GB\";\n\n            var vatNum = number.toString().toUpperCase().replace(/(\\s|-|\\.)+/g, '');\n            var isValid = false;\n\n            for (var k in _REGEXP) {\n                if (_REGEXP.hasOwnProperty(k)) {\n\n                    var isMatch = _REGEXP[k].test(vatNum);\n\n                    if (isMatch) {\n                        //TODO (S.Panfilov) todo and exec should do the same, but they didn't\n                        var parsedNum = _REGEXP[k].exec(vatNum);\n\n                        var cCode = parsedNum[1];\n                        var cNumber = parsedNum[2];\n                        if (!cCode || cCode.length === 0) cCode = defCCode;\n\n                        var checkDigitFunc = _checks[cCode];\n                        //isValid = checkDigitFunc(cNumber);\n                        //TODO (S.Panfilov) debug\n                        isValid = true;\n\n                        break;\n                    }\n                }\n            }\n\n            return isValid;\n        }\n    };\n\n    //function check(vatNum) {\n    //\n    //    var total = 0;\n    //    var multipliers = [1, 2, 1, 2, 1, 2, 1];\n    //    var temp = 0;\n    //\n    //    for (var i = 0; i < 7; i++) {\n    //        temp = Number(vatNum.charAt(i)) * multipliers[i];\n    //        if (temp > 9)\n    //            total += Math.floor(temp / 10) + temp % 10;\n    //        else\n    //            total += temp;\n    //    }\n    //\n    //    total = 10 - (total + 4) % 10;\n    //    if (total === 10) total = 0;\n    //\n    //    //return total === vatNum.slice(7, 8);\n    //\n    //\n    //    return {\n    //        total: total,\n    //        expect: vatNum.slice(7, 8)\n    //    }\n    //\n    //}\n\n    var _checks = {\n        AT: function (vatNum) {\n            var total = 0;\n            var multipliers = [1, 2, 1, 2, 1, 2, 1];\n            var temp = 0;\n\n            for (var i = 0; i < 7; i++) {\n                temp = Number(vatNum.charAt(i)) * multipliers[i];\n                if (temp > 9)\n                    total += Math.floor(temp / 10) + temp % 10;\n                else\n                    total += temp;\n            }\n\n            total = 10 - (total + 4) % 10;\n            if (total === 10) total = 0;\n\n            return total === vatNum.slice(7, 8);\n        },\n        BE: function (vatNum) {\n            if (vatNum.length === 9) vatNum = \"0\" + vatNum;\n            if (vatNum.slice(1, 2) === 0) return false;\n\n            return 97 - vatNum.slice(0, 8) % 97 === vatNum.slice(8, 10);\n        },\n\n        BG: function (vatNum) {\n            if (vatNum.length === 9) {\n                var total = 0;\n                var temp = 0;\n                for (var i = 0; i < 8; i++) temp += Number(vatNum.charAt(i)) * (i + 1);\n                total = temp % 11;\n                if (total !== 10) {\n                    return total === vatNum.slice(8);\n                }\n\n                var temp = 0;\n                for (var i = 0; i < 8; i++) temp += Number(vatNum.charAt(i)) * (i + 3);\n\n                total = temp % 11;\n                if (total === 10) total = 0;\n                return total === vatNum.slice(8);\n            }\n\n            // 10 digit VAT code - see if it relates to a standard physical person\n            if ((/^\\d\\d[0-5]\\d[0-3]\\d\\d{4}$/).test(vatNum)) {\n\n                // Check month\n                var month = Number(vatNum.slice(2, 4));\n                if ((month > 0 && month < 13) || (month > 20 && month < 33) || (month > 40 && month < 53)) {\n\n                    // Extract the next digit and multiply by the counter.\n                    var multipliers = [2, 4, 8, 5, 10, 9, 7, 3, 6];\n                    var total = 0;\n                    for (var i = 0; i < 9; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n                    // Establish check digit.\n                    total = total % 11;\n                    if (total === 10) total = 0;\n\n                    // Check to see if the check digit given is correct, If not, try next type of person\n                    if (total === vatNum.substr(9, 1)) return true;\n                }\n            }\n\n            // It doesn't relate to a standard physical person - see if it relates to a foreigner.\n\n            // Extract the next digit and multiply by the counter.\n            var multipliers = [21, 19, 17, 13, 11, 9, 7, 3, 1];\n            var total = 0;\n            for (var i = 0; i < 9; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n            // Check to see if the check digit given is correct, If not, try next type of person\n            if (total % 10 === vatNum.substr(9, 1)) return true;\n\n            // Finally, if not yet identified, see if it conforms to a miscellaneous VAT number\n\n            // Extract the next digit and multiply by the counter.\n            var multipliers = [4, 3, 2, 7, 6, 5, 4, 3, 2];\n            var total = 0;\n            for (var i = 0; i < 9; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n            // Establish check digit.\n            total = 11 - total % 11;\n            if (total === 10) return false;\n            if (total === 11) total = 0;\n\n            // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n            if (total === vatNum.substr(9, 1))\n                return true;\n            else\n                return false;\n        },\n\n        CHE: function (vatNum) {\n\n            // Checks the check digits of a Swiss VAT number.\n\n            // Extract the next digit and multiply by the counter.\n            var multipliers = [5, 4, 3, 2, 7, 6, 5, 4];\n            var total = 0;\n            for (var i = 0; i < 8; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n            // Establish check digit.\n            total = 11 - total % 11;\n            if (total === 10) return false;\n            if (total === 11) total = 0;\n\n            // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n            return total === vatNum.substr(8, 1);\n        },\n\n        CY: function (vatNum) {\n\n            // Checks the check digits of a Cypriot VAT number.\n\n            // Not allowed to start with '12'\n            if (Number(vatNum.slice(0, 2) === 12)) return false;\n\n            // Extract the next digit and multiply by the counter.\n            var total = 0;\n            for (var i = 0; i < 8; i++) {\n                var temp = Number(vatNum.charAt(i));\n                if (i % 2 === 0) {\n                    switch (temp) {\n                        case 0:\n                            temp = 1;\n                            break;\n                        case 1:\n                            temp = 0;\n                            break;\n                        case 2:\n                            temp = 5;\n                            break;\n                        case 3:\n                            temp = 7;\n                            break;\n                        case 4:\n                            temp = 9;\n                            break;\n                        default:\n                            temp = temp * 2 + 3;\n                    }\n                }\n                total += temp;\n            }\n\n            // Establish check digit using modulus 26, and translate to char. equivalent.\n            total = total % 26;\n            total = String.fromCharCode(total + 65);\n\n            // Check to see if the check digit given is correct\n            return total === vatNum.substr(8, 1);\n        },\n\n        CZ: function (vatNum) {\n\n            // Checks the check digits of a Czech Republic VAT number.\n\n            var total = 0;\n            var multipliers = [8, 7, 6, 5, 4, 3, 2];\n\n            var czexp = [];\n            czexp[0] = (/^\\d{8}$/);\n            czexp[1] = (/^[0-5][0-9][0|1|5|6]\\d[0-3]\\d\\d{3}$/);\n            czexp[2] = (/^6\\d{8}$/);\n            czexp[3] = (/^\\d{2}[0-3|5-8]\\d[0-3]\\d\\d{4}$/);\n            var i = 0;\n\n            // Legal entities\n            if (czexp[0].test(vatNum)) {\n\n                // Extract the next digit and multiply by the counter.\n                for (var i = 0; i < 7; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n                // Establish check digit.\n                total = 11 - total % 11;\n                if (total === 10) total = 0;\n                if (total === 11) total = 1;\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                return total === vatNum.slice(7, 8);\n            }\n\n            // Individuals type 1\n            else if (czexp[1].test(vatNum)) {\n                if (temp = Number(vatNum.slice(0, 2)) > 53) return false;\n                return true;\n            }\n\n            // Individuals type 2\n            else if (czexp[2].test(vatNum)) {\n\n                // Extract the next digit and multiply by the counter.\n                for (var i = 0; i < 7; i++) total += Number(vatNum.charAt(i + 1)) * multipliers[i];\n\n                // Establish check digit.\n                total = 11 - total % 11;\n                if (total === 10) total = 0;\n                if (total === 11) total = 1;\n\n                // Convert calculated check digit according to a lookup table;\n                var lookup = [8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 10];\n                return lookup[total - 1] === vatNum.slice(8, 9);\n            }\n\n            // Individuals type 3\n            else if (czexp[3].test(vatNum)) {\n                var temp = Number(vatNum.slice(0, 2)) + Number(vatNum.slice(2, 4)) + Number(vatNum.slice(4, 6)) + Number(vatNum.slice(6, 8)) + Number(vatNum.slice(8));\n                return !!(temp % 11 === 0 && Number(vatNum) % 11 === 0);\n            }\n\n            // else error\n            return false;\n        },\n\n        DE: function (vatNum) {\n\n            // Checks the check digits of a German VAT number.\n\n            var product = 10;\n            var sum = 0;\n            var checkdigit = 0;\n            for (var i = 0; i < 8; i++) {\n\n                // Extract the next digit and implement peculiar algorithm!.\n                sum = (Number(vatNum.charAt(i)) + product) % 10;\n                if (sum === 0) {\n                    sum = 10\n                }\n                product = (2 * sum) % 11;\n            }\n\n            // Establish check digit.\n            if (11 - product === 10) {\n                checkdigit = 0\n            } else {\n                checkdigit = 11 - product\n            }\n\n            // Compare it with the last two characters of the VAT number. If the same, then it is a valid\n            // check digit.\n            return checkdigit === vatNum.slice(8, 9);\n        },\n\n        DK: function (vatNum) {\n\n            // Checks the check digits of a Danish VAT number.\n\n            var total = 0;\n            var multipliers = [2, 7, 6, 5, 4, 3, 2, 1];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n            // Establish check digit.\n            total = total % 11;\n\n            // The remainder should be 0 for it to be valid..\n            return total === 0;\n        },\n\n        EE: function (vatNum) {\n\n            // Checks the check digits of an Estonian VAT number.\n\n            var total = 0;\n            var multipliers = [3, 7, 1, 3, 7, 1, 3, 7];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n            // Establish check digits using modulus 10.\n            total = 10 - total % 10;\n            if (total === 10) total = 0;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            return total === vatNum.slice(8, 9);\n        },\n\n        EL: function (vatNum) {\n\n            // Checks the check digits of a Greek VAT number.\n\n            var total = 0;\n            var multipliers = [256, 128, 64, 32, 16, 8, 4, 2];\n\n            //eight character numbers should be prefixed with an 0.\n            if (vatNum.length === 8) {\n                vatNum = \"0\" + vatNum\n            }\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n            // Establish check digit.\n            total = total % 11;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            return total === vatNum.slice(8, 9);\n        },\n\n        ES: function (vatNum) {\n\n            // Checks the check digits of a Spanish VAT number.\n\n            var total = 0;\n            var temp = 0;\n            var multipliers = [2, 1, 2, 1, 2, 1, 2];\n            var esexp = [];\n            esexp[0] = (/^[A-H|J|U|V]\\d{8}$/);\n            esexp[1] = (/^[A-H|N-S|W]\\d{7}[A-J]$/);\n            esexp[2] = (/^[0-9|Y|Z]\\d{7}[A-Z]$/);\n            esexp[3] = (/^[K|L|M|X]\\d{7}[A-Z]$/);\n            var i = 0;\n\n            // National juridical entities\n            if (esexp[0].test(vatNum)) {\n\n                // Extract the next digit and multiply by the counter.\n                for (i = 0; i < 7; i++) {\n                    temp = Number(vatNum.charAt(i + 1)) * multipliers[i];\n                    if (temp > 9)\n                        total += Math.floor(temp / 10) + temp % 10;\n                    else\n                        total += temp;\n                }\n                // Now calculate the check digit itself.\n                total = 10 - total % 10;\n                if (total === 10) {\n                    total = 0;\n                }\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                return total === vatNum.slice(8, 9);\n            }\n\n            // Juridical entities other than national ones\n            else if (esexp[1].test(vatNum)) {\n\n                // Extract the next digit and multiply by the counter.\n                for (i = 0; i < 7; i++) {\n                    temp = Number(vatNum.charAt(i + 1)) * multipliers[i];\n                    if (temp > 9)\n                        total += Math.floor(temp / 10) + temp % 10;\n                    else\n                        total += temp;\n                }\n\n                // Now calculate the check digit itself.\n                total = 10 - total % 10;\n                total = String.fromCharCode(total + 64);\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                return total === vatNum.slice(8, 9);\n            }\n\n            // Personal number (NIF) (starting with numeric of Y or Z)\n            else if (esexp[2].test(vatNum)) {\n                var tempnumber = vatNum;\n                if (tempnumber.substring(0, 1) === 'Y') tempnumber = tempnumber.replace(/Y/, \"1\");\n                if (tempnumber.substring(0, 1) === 'Z') tempnumber = tempnumber.replace(/Z/, \"2\");\n                return tempnumber.charAt(8) === 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(Number(tempnumber.substring(0, 8)) % 23);\n            }\n\n            // Personal number (NIF) (starting with K, L, M, or X)\n            else if (esexp[3].test(vatNum)) {\n                return vatNum.charAt(8) === 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(Number(vatNum.substring(1, 8)) % 23);\n            }\n\n            else return false;\n        },\n\n        EU: function (vatNum) {\n\n            // We know little about EU numbers apart from the fact that the first 3 digits represent the\n            // country, and that there are nine digits in total.\n            return true;\n        },\n\n        FI: function (vatNum) {\n\n            // Checks the check digits of a Finnish VAT number.\n\n            var total = 0;\n            var multipliers = [7, 9, 10, 5, 8, 4, 2];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 7; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n            // Establish check digit.\n            total = 11 - total % 11;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            return total === vatNum.slice(7, 8);\n        },\n\n        FR: function (vatNum) {\n\n            // Checks the check digits of a French VAT number.\n\n            if (!(/^\\d{11}$/).test(vatNum)) return true;\n\n            // Extract the last nine digits as an integer.\n            var total = vatNum.substring(2);\n\n            // Establish check digit.\n            total = (total * 100 + 12) % 97;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            return total === vatNum.slice(0, 2);\n        },\n\n        GB: function (vatNum) {\n\n            // Checks the check digits of a UK VAT number.\n\n            var multipliers = [8, 7, 6, 5, 4, 3, 2];\n\n            // Government departments\n            if (vatNum.substr(0, 2) === 'GD') {\n                return vatNum.substr(2, 3) < 500;\n            }\n\n            // Health authorities\n            if (vatNum.substr(0, 2) === 'HA') {\n                return vatNum.substr(2, 3) > 499;\n            }\n\n            // Standard and commercial numbers\n            var total = 0;\n\n            // 0 VAT numbers disallowed!\n            if (Number(vatNum.slice(0)) === 0) return false;\n\n            // Check range is OK for modulus 97 calculation\n            var no = Number(vatNum.slice(0, 7));\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 7; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n            // Old numbers use a simple 97 modulus, but new numbers use an adaptation of that (less 55). Our\n            // VAT number could use either system, so we check it against both.\n\n            // Establish check digits by subtracting 97 from total until negative.\n            var cd = total;\n            while (cd > 0) {\n                cd = cd - 97;\n            }\n\n            // Get the absolute value and compare it with the last two characters of the VAT number. If the\n            // same, then it is a valid traditional check digit. However, even then the number must fit within\n            // certain specified ranges.\n            cd = Math.abs(cd);\n            if (cd === vatNum.slice(7, 9) && no < 9990001 && (no < 100000 || no > 999999) && (no < 9490001 || no > 9700000)) return true;\n\n            // Now try the new method by subtracting 55 from the check digit if we can - else add 42\n            if (cd >= 55)\n                cd = cd - 55;\n            else\n                cd = cd + 42;\n            return !!(cd === vatNum.slice(7, 9) && no > 1000000);\n        },\n\n        HR: function (vatNum) {\n\n            // Checks the check digits of a Croatian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n            var product = 10;\n            var sum = 0;\n            var checkdigit = 0;\n\n            for (var i = 0; i < 10; i++) {\n\n                // Extract the next digit and implement the algorithm\n                sum = (Number(vatNum.charAt(i)) + product) % 10;\n                if (sum === 0) {\n                    sum = 10\n                }\n\n                product = (2 * sum) % 11;\n            }\n\n            // Now check that we have the right check digit\n            return (product + vatNum.slice(10, 11) * 1) % 10 === 1;\n        },\n\n        HU: function (vatNum) {\n\n            // Checks the check digits of a Hungarian VAT number.\n\n            var total = 0;\n            var multipliers = [9, 7, 3, 1, 9, 7, 3];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 7; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n            // Establish check digit.\n            total = 10 - total % 10;\n            if (total === 10) total = 0;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            return total === vatNum.slice(7, 8);\n        },\n\n        IE: function (vatNum) {\n\n            // Checks the check digits of an Irish VAT number.\n\n            var total = 0;\n            var multipliers = [8, 7, 6, 5, 4, 3, 2];\n\n            // If the code is type 1 format, we need to convert it to the new before performing the validation.\n            if (/^\\d[A-Z\\*\\+]/.test(vatNum)) vatNum = \"0\" + vatNum.substring(2, 7) + vatNum.substring(0, 1) + vatNum.substring(7, 8);\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 7; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n            // If the number is type 3 then we need to include the trailing A or H in the calculation\n            if (/^\\d{7}[A-Z][AH]$/.test(vatNum)) {\n\n                // Add in a multiplier for the character A (1*9=9) or H (8*9=72)\n                if (vatNum.charAt(8) === 'H')\n                    total += 72;\n                else\n                    total += 9;\n            }\n\n            // Establish check digit using modulus 23, and translate to char. equivalent.\n            total = total % 23;\n            if (total === 0)\n                total = \"W\";\n            else\n                total = String.fromCharCode(total + 64);\n\n            // Compare it with the eighth character of the VAT number. If it's the same, then it's valid.\n            return total === vatNum.slice(7, 8);\n        },\n\n        IT: function (vatNum) {\n\n            // Checks the check digits of an Italian VAT number.\n\n            var total = 0;\n            var multipliers = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2];\n            var temp;\n\n            // The last three digits are the issuing office, and cannot exceed more 201, unless 999 or 888\n            if (Number(vatNum.slice(0, 7)) === 0) return false;\n            temp = Number(vatNum.slice(7, 10));\n            if ((temp < 1) || (temp > 201) && temp !== 999 && temp !== 888) return false;\n\n            // Extract the next digit and multiply by the appropriate\n            for (var i = 0; i < 10; i++) {\n                temp = Number(vatNum.charAt(i)) * multipliers[i];\n                if (temp > 9)\n                    total += Math.floor(temp / 10) + temp % 10;\n                else\n                    total += temp;\n            }\n\n            // Establish check digit.\n            total = 10 - total % 10;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            return total === vatNum.slice(10, 11);\n        },\n\n        LT: function (vatNum) {\n\n            // Checks the check digits of a Lithuanian VAT number.\n\n            // 9 character VAT numbers are for legal persons\n            if (vatNum.length === 9) {\n\n                // 8th character must be one\n                if (!(/^\\d{7}1/).test(vatNum)) return false;\n\n                // Extract the next digit and multiply by the counter+1.\n                var total = 0;\n                for (var i = 0; i < 8; i++) total += Number(vatNum.charAt(i)) * (i + 1);\n\n                // Can have a double check digit calculation!\n                if (total % 11 === 10) {\n                    var multipliers = [3, 4, 5, 6, 7, 8, 9, 1];\n                    total = 0;\n                    for (i = 0; i < 8; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n                }\n\n                // Establish check digit.\n                total = total % 11;\n                if (total === 10) {\n                    total = 0;\n                }\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                return total === vatNum.slice(8, 9);\n            }\n\n            // 12 character VAT numbers are for temporarily registered taxpayers\n            else {\n\n                // 11th character must be one\n                if (!(/^\\d{10}1/).test(vatNum)) return false;\n\n                // Extract the next digit and multiply by the counter+1.\n                var total = 0;\n                var multipliers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2];\n                for (var i = 0; i < 11; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n                // Can have a double check digit calculation!\n                if (total % 11 === 10) {\n                    var multipliers = [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4];\n                    total = 0;\n                    for (i = 0; i < 11; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n                }\n\n                // Establish check digit.\n                total = total % 11;\n                if (total === 10) {\n                    total = 0;\n                }\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                return total === vatNum.slice(11, 12);\n            }\n        },\n\n        LU: function (vatNum) {\n\n            // Checks the check digits of a Luxembourg VAT number.\n\n            return vatNum.slice(0, 6) % 89 === vatNum.slice(6, 8);\n        },\n\n        LV: function (vatNum) {\n\n            // Checks the check digits of a Latvian VAT number.\n\n            // Differentiate between legal entities and natural bodies. For the latter we simply check that\n            // the first six digits correspond to valid DDMMYY dates.\n            if ((/^[0-3]/).test(vatNum)) {\n                return !!(/^[0-3][0-9][0-1][0-9]/).test(vatNum);\n            }\n\n            else {\n\n                var total = 0;\n                var multipliers = [9, 1, 4, 8, 3, 10, 2, 5, 7, 6];\n\n                // Extract the next digit and multiply by the counter.\n                for (var i = 0; i < 10; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n                // Establish check digits by getting modulus 11.\n                if (total % 11 === 4 && vatNum[0] === 9) total = total - 45;\n                if (total % 11 === 4)\n                    total = 4 - total % 11;\n                else if (total % 11 > 4)\n                    total = 14 - total % 11;\n                else if (total % 11 < 4)\n                    total = 3 - total % 11;\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                return total === vatNum.slice(10, 11);\n            }\n        },\n\n        MT: function (vatNum) {\n\n            // Checks the check digits of a Maltese VAT number.\n\n            var total = 0;\n            var multipliers = [3, 4, 6, 7, 8, 9];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 6; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n            // Establish check digits by getting modulus 37.\n            total = 37 - total % 37;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            return total === vatNum.slice(6, 8) * 1;\n        },\n\n        NL: function (vatNum) {\n\n            // Checks the check digits of a Dutch VAT number.\n\n            var total = 0;\n            var multipliers = [9, 8, 7, 6, 5, 4, 3, 2];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n            // Establish check digits by getting modulus 11.\n            total = total % 11;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            return total === vatNum.slice(8, 9);\n        },\n\n        NO: function (vatNum) {\n\n            // Checks the check digits of a Norwegian VAT number.\n            // See http://www.brreg.no/english/coordination/number.html\n\n            var total = 0;\n            var multipliers = [3, 2, 7, 6, 5, 4, 3, 2];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n            // Establish check digits by getting modulus 11. Check digits > 9 are invalid\n            total = 11 - total % 11;\n            if (total === 11) {\n                total = 0;\n            }\n            if (total < 10) {\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                return total === vatNum.slice(8, 9);\n            }\n        },\n\n        PL: function (vatNum) {\n\n            // Checks the check digits of a Polish VAT number.\n\n            var total = 0;\n            var multipliers = [6, 5, 7, 2, 3, 4, 5, 6, 7];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 9; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n            // Establish check digits subtracting modulus 11 from 11.\n            total = total % 11;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            return total === vatNum.slice(9, 10);\n        },\n\n        PT: function (vatNum) {\n\n            // Checks the check digits of a Portugese VAT number.\n\n            var total = 0;\n            var multipliers = [9, 8, 7, 6, 5, 4, 3, 2];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n            // Establish check digits subtracting modulus 11 from 11.\n            total = 11 - total % 11;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            return total === vatNum.slice(8, 9);\n        },\n\n        RO: function (vatNum) {\n\n            // Checks the check digits of a Romanian VAT number.\n\n            var multipliers = [7, 5, 3, 2, 1, 7, 5, 3, 2];\n\n            // Extract the next digit and multiply by the counter.\n            var VATlen = vatNum.length;\n            multipliers = multipliers.slice(10 - VATlen);\n            var total = 0;\n            for (var i = 0; i < vatNum.length - 1; i++) {\n                total += Number(vatNum.charAt(i)) * multipliers[i];\n            }\n\n            // Establish check digits by getting modulus 11.\n            total = (10 * total) % 11;\n            if (total === 10) total = 0;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            return total === vatNum.slice(vatNum.length - 1, vatNum.length);\n        },\n\n        RS: function (vatNum) {\n\n            // Checks the check digits of a Serbian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n            var product = 10;\n            var sum = 0;\n            var checkdigit = 0;\n\n            for (var i = 0; i < 8; i++) {\n\n                // Extract the next digit and implement the algorithm\n                sum = (Number(vatNum.charAt(i)) + product) % 10;\n                if (sum === 0) {\n                    sum = 10\n                }\n                product = (2 * sum) % 11;\n            }\n\n            // Now check that we have the right check digit\n            return (product + vatNum.slice(8, 9) * 1) % 10 === 1;\n        },\n\n        RU: function (vatNum) {\n\n            // Checks the check digits of a Russian INN number\n            // See http://russianpartner.biz/test_inn.html for algorithm\n\n            // 10 digit INN numbers\n            if (vatNum.length === 10) {\n                var total = 0;\n                var multipliers = [2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\n                for (var i = 0; i < 10; i++) {\n                    total += Number(vatNum.charAt(i)) * multipliers[i];\n                }\n                total = total % 11;\n                if (total > 9) {\n                    total = total % 10\n                }\n\n                // Compare it with the last character of the VAT number. If it is the same, then it's valid\n                return total === vatNum.slice(9, 10);\n\n                // 12 digit INN numbers\n            } else if (vatNum.length === 12) {\n                var total1 = 0;\n                var multipliers1 = [7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\n                var total2 = 0;\n                var multipliers2 = [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\n\n                for (var i = 0; i < 11; i++) total1 += Number(vatNum.charAt(i)) * multipliers1[i];\n                total1 = total1 % 11;\n                if (total1 > 9) {\n                    total1 = total1 % 10\n                }\n\n                for (var i = 0; i < 11; i++) total2 += Number(vatNum.charAt(i)) * multipliers2[i];\n                total2 = total2 % 11;\n                if (total2 > 9) {\n                    total2 = total2 % 10\n                }\n\n                // Compare the first check with the 11th character and the second check with the 12th and last\n                // character of the VAT number. If they're both the same, then it's valid\n                return !!((total1 === vatNum.slice(10, 11)) && (total2 === vatNum.slice(11, 12)));\n            }\n        },\n\n        SE: function (vatNum) {\n\n            // Calculate R where R = R1 + R3 + R5 + R7 + R9, and Ri = INT(Ci/5) + (Ci*2) modulo 10\n            var R = 0;\n            var digit;\n            for (var i = 0; i < 9; i = i + 2) {\n                digit = Number(vatNum.charAt(i));\n                R += Math.floor(digit / 5) + ((digit * 2) % 10);\n            }\n\n            // Calculate S where S = C2 + C4 + C6 + C8\n            var S = 0;\n            for (var i = 1; i < 9; i = i + 2) S += Number(vatNum.charAt(i));\n\n            // Calculate the Check Digit\n            var cd = (10 - (R + S) % 10) % 10;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            return cd === vatNum.slice(9, 10);\n        },\n\n        SI: function (vatNum) {\n\n            // Checks the check digits of a Slovenian VAT number.\n\n            var total = 0;\n            var multipliers = [8, 7, 6, 5, 4, 3, 2];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 7; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n            // Establish check digits using modulus 11\n            total = 11 - total % 11;\n            if (total === 10) {\n                total = 0;\n            }\n\n            // Compare the number with the last character of the VAT number. If it is the\n            // same, then it's a valid check digit.\n            return !!(total !== 11 && total === vatNum.slice(7, 8));\n        },\n\n        SK: function (vatNum) {\n\n            // Checks the check digits of a Slovakian VAT number.\n\n            // Check that the modulus of the whole VAT number is 0 - else error\n            return Number(vatNum % 11) === 0;\n        }\n    };\n\n    if (typeof module === 'object' && module.exports) module.exports = exports;\n\n    return exports;\n})();\n\r return VatChecker;});"],"sourceRoot":"/source/"}