{"version":3,"sources":["ng-jsvat.js"],"names":["VatChecker","_REGEXP","austria","belgium","bulgaria","switzerland","cyprus","czech_republic","germany","denmark","estonia","greece","spain_national","spain_other","spain_personal_1","spain_personal_2","eu_type","finland","france_1","france_2","france_3","france_4","uk_standart","uk_branches","uk_goverment","uk_health_authority","croatia","hungary","ireland_1","ireland_2","ireland_3","italy","latvia","lithunia","luxembourg","malta","netherlands","norway_not_EU","poland","portugal","romania","russia","serbia","slovenia","slovakia_republic","sweden","exports","checkVATNumber","number","defCCode","VATNumber","toString","toUpperCase","replace","isValid","k","hasOwnProperty","parsedNum","exec","cCode","cNumber","length","checkDigitFunc","_checks","AT","vatnumber","total","multipliers","temp","i","Number","charAt","Math","floor","slice","BE","BG","test","month","substr","CHE","CY","String","fromCharCode","CZ","czexp","lookup","DE","product","sum","checkdigit","DK","EE","EL","ES","esexp","tempnumber","substring","EU","FI","FR","GB","no","cd","abs","HR","HU","IE","IT","LT","LU","LV","MT","NL","NO","PL","PT","RO","VATlen","RS","RU","total1","multipliers1","total2","multipliers2","SE","digit","R","S","SI","SK"],"mappings":"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","file":"ng-jsvat.min.js","sourcesContent":["var VatChecker = (function () {\n    'use strict';\n\n    var _REGEXP = {\n        austria: /^(AT)U(\\d{8})$/,\n        belgium: /^(BE)(0?\\d{9})$/,\n        bulgaria: /^(BG)(\\d{9,10})$/,\n        switzerland: /^(CHE)(\\d{9})(MWST)?$/,\n        cyprus: /^(CY)([0-59]\\d{7}[A-Z])$/,\n        czech_republic: /^(CZ)(\\d{8,10})(\\d{3})?$/,\n        germany: /^(DE)([1-9]\\d{8})$/,\n        denmark: /^(DK)(\\d{8})$/,\n        estonia: /^(EE)(10\\d{7})$/,\n        greece: /^(EL)(\\d{9})$/,\n        spain_national: /^(ES)([A-Z]\\d{8})$/,\n        spain_other: /^(ES)([A-HN-SW]\\d{7}[A-J])$/,\n        spain_personal_1: /^(ES)([0-9YZ]\\d{7}[A-Z])$/,\n        spain_personal_2: /^(ES)([KLMX]\\d{7}[A-Z])$/,\n        eu_type: /^(EU)(\\d{9})$/,\n        finland: /^(FI)(\\d{8})$/,\n        france_1: /^(FR)(\\d{11})$/,\n        france_2: /^(FR)([A-HJ-NP-Z]\\d{10})$/,\n        france_3: /^(FR)(\\d[A-HJ-NP-Z]\\d{9})$/,\n        france_4: /^(FR)([A-HJ-NP-Z]{2}\\d{9})$/,\n        uk_standart: /^(GB)?(\\d{9})$/,\n        uk_branches: /^(GB)?(\\d{12})$/,\n        uk_goverment: /^(GB)?(GD\\d{3})$/,\n        uk_health_authority: /^(GB)?(HA\\d{3})$/,\n        croatia: /^(HR)(\\d{11})$/,\n        hungary: /^(HU)(\\d{8})$/,\n        ireland_1: /^(IE)(\\d{7}[A-W])$/,\n        ireland_2: /^(IE)([7-9][A-Z\\*\\+)]\\d{5}[A-W])$/,\n        ireland_3: /^(IE)(\\d{7}[A-W][AH])$/,\n        italy: /^(IT)(\\d{11})$/,\n        latvia: /^(LV)(\\d{11})$/,\n        lithunia: /^(LT)(\\d{9}|\\d{12})$/,\n        luxembourg: /^(LU)(\\d{8})$/,\n        malta: /^(MT)([1-9]\\d{7})$/,\n        netherlands: /^(NL)(\\d{9})B\\d{2}$/,\n        norway_not_EU: /^(NO)(\\d{9})$/,\n        poland: /^(PL)(\\d{10})$/,\n        portugal: /^(PT)(\\d{9})$/,\n        romania: /^(RO)([1-9]\\d{1,9})$/,\n        russia: /^(RU)(\\d{10}|\\d{12})$/,\n        serbia: /^(RS)(\\d{9})$/,\n        slovenia: /^(SI)([1-9]\\d{7})$/,\n        slovakia_republic: /^(SK)([1-9]\\d[2346-9]\\d{7})$/,\n        sweden: /^(SE)(\\d{10}01)$/\n    };\n\n    var exports = {\n        checkVATNumber: function (number) {\n            var defCCode = \"GB\";\n\n            var VATNumber = number.toString().toUpperCase().replace(/(\\s|-|\\.)+/g, '');\n            var isValid = false;\n\n            for (var k in _REGEXP) {\n                if (_REGEXP.hasOwnProperty(k)) {\n\n                    var parsedNum = _REGEXP[k].exec(VATNumber);\n                    if (parsedNum) {\n\n                        var cCode = parsedNum[1];\n                        var cNumber = parsedNum[2];\n                        if (cCode.length == 0) cCode = defCCode;\n\n                        var checkDigitFunc = _checks[cCode];\n                        isValid = checkDigitFunc(cNumber);\n\n                        break;\n                    }\n                }\n            }\n\n            return isValid;\n        }\n    };\n\n    var _checks = {\n        AT: function (vatnumber) {\n            var total = 0;\n            var multipliers = [1, 2, 1, 2, 1, 2, 1];\n            var temp = 0;\n\n            for (var i = 0; i < 7; i++) {\n                temp = Number(vatnumber.charAt(i)) * multipliers[i];\n                if (temp > 9)\n                    total += Math.floor(temp / 10) + temp % 10;\n                else\n                    total += temp;\n            }\n\n            total = 10 - (total + 4) % 10;\n            if (total == 10) total = 0;\n\n            return total == vatnumber.slice(7, 8);\n        },\n        BE: function (vatnumber) {\n            if (vatnumber.length == 9) vatnumber = \"0\" + vatnumber;\n            if (vatnumber.slice(1, 2) == 0) return false;\n\n            return 97 - vatnumber.slice(0, 8) % 97 == vatnumber.slice(8, 10);\n        },\n\n        BG: function (vatnumber) {\n            if (vatnumber.length == 9) {\n                var total = 0;\n                var temp = 0;\n                for (var i = 0; i < 8; i++) temp += Number(vatnumber.charAt(i)) * (i + 1);\n                total = temp % 11;\n                if (total != 10) {\n                    return total == vatnumber.slice(8);\n                }\n\n                var temp = 0;\n                for (var i = 0; i < 8; i++) temp += Number(vatnumber.charAt(i)) * (i + 3);\n\n                total = temp % 11;\n                if (total == 10) total = 0;\n                return total == vatnumber.slice(8);\n            }\n\n            // 10 digit VAT code - see if it relates to a standard physical person\n            if ((/^\\d\\d[0-5]\\d[0-3]\\d\\d{4}$/).test(vatnumber)) {\n\n                // Check month\n                var month = Number(vatnumber.slice(2, 4));\n                if ((month > 0 && month < 13) || (month > 20 && month < 33) || (month > 40 && month < 53)) {\n\n                    // Extract the next digit and multiply by the counter.\n                    var multipliers = [2, 4, 8, 5, 10, 9, 7, 3, 6];\n                    var total = 0;\n                    for (var i = 0; i < 9; i++) total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n                    // Establish check digit.\n                    total = total % 11;\n                    if (total == 10) total = 0;\n\n                    // Check to see if the check digit given is correct, If not, try next type of person\n                    if (total == vatnumber.substr(9, 1)) return true;\n                }\n            }\n\n            // It doesn't relate to a standard physical person - see if it relates to a foreigner.\n\n            // Extract the next digit and multiply by the counter.\n            var multipliers = [21, 19, 17, 13, 11, 9, 7, 3, 1];\n            var total = 0;\n            for (var i = 0; i < 9; i++) total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n            // Check to see if the check digit given is correct, If not, try next type of person\n            if (total % 10 == vatnumber.substr(9, 1)) return true;\n\n            // Finally, if not yet identified, see if it conforms to a miscellaneous VAT number\n\n            // Extract the next digit and multiply by the counter.\n            var multipliers = [4, 3, 2, 7, 6, 5, 4, 3, 2];\n            var total = 0;\n            for (var i = 0; i < 9; i++) total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n            // Establish check digit.\n            total = 11 - total % 11;\n            if (total == 10) return false;\n            if (total == 11) total = 0;\n\n            // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n            if (total == vatnumber.substr(9, 1))\n                return true;\n            else\n                return false;\n        },\n\n        CHE: function (vatnumber) {\n\n            // Checks the check digits of a Swiss VAT number.\n\n            // Extract the next digit and multiply by the counter.\n            var multipliers = [5, 4, 3, 2, 7, 6, 5, 4];\n            var total = 0;\n            for (var i = 0; i < 8; i++) total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n            // Establish check digit.\n            total = 11 - total % 11;\n            if (total == 10) return false;\n            if (total == 11) total = 0;\n\n            // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n            return total == vatnumber.substr(8, 1);\n        },\n\n        CY: function (vatnumber) {\n\n            // Checks the check digits of a Cypriot VAT number.\n\n            // Not allowed to start with '12'\n            if (Number(vatnumber.slice(0, 2) == 12)) return false;\n\n            // Extract the next digit and multiply by the counter.\n            var total = 0;\n            for (var i = 0; i < 8; i++) {\n                var temp = Number(vatnumber.charAt(i));\n                if (i % 2 == 0) {\n                    switch (temp) {\n                        case 0:\n                            temp = 1;\n                            break;\n                        case 1:\n                            temp = 0;\n                            break;\n                        case 2:\n                            temp = 5;\n                            break;\n                        case 3:\n                            temp = 7;\n                            break;\n                        case 4:\n                            temp = 9;\n                            break;\n                        default:\n                            temp = temp * 2 + 3;\n                    }\n                }\n                total += temp;\n            }\n\n            // Establish check digit using modulus 26, and translate to char. equivalent.\n            total = total % 26;\n            total = String.fromCharCode(total + 65);\n\n            // Check to see if the check digit given is correct\n            return total == vatnumber.substr(8, 1);\n        },\n\n        CZ: function (vatnumber) {\n\n            // Checks the check digits of a Czech Republic VAT number.\n\n            var total = 0;\n            var multipliers = [8, 7, 6, 5, 4, 3, 2];\n\n            var czexp = [];\n            czexp[0] = (/^\\d{8}$/);\n            czexp[1] = (/^[0-5][0-9][0|1|5|6]\\d[0-3]\\d\\d{3}$/);\n            czexp[2] = (/^6\\d{8}$/);\n            czexp[3] = (/^\\d{2}[0-3|5-8]\\d[0-3]\\d\\d{4}$/);\n            var i = 0;\n\n            // Legal entities\n            if (czexp[0].test(vatnumber)) {\n\n                // Extract the next digit and multiply by the counter.\n                for (var i = 0; i < 7; i++) total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n                // Establish check digit.\n                total = 11 - total % 11;\n                if (total == 10) total = 0;\n                if (total == 11) total = 1;\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                return total == vatnumber.slice(7, 8);\n            }\n\n            // Individuals type 1\n            else if (czexp[1].test(vatnumber)) {\n                if (temp = Number(vatnumber.slice(0, 2)) > 53) return false;\n                return true;\n            }\n\n            // Individuals type 2\n            else if (czexp[2].test(vatnumber)) {\n\n                // Extract the next digit and multiply by the counter.\n                for (var i = 0; i < 7; i++) total += Number(vatnumber.charAt(i + 1)) * multipliers[i];\n\n                // Establish check digit.\n                total = 11 - total % 11;\n                if (total == 10) total = 0;\n                if (total == 11) total = 1;\n\n                // Convert calculated check digit according to a lookup table;\n                var lookup = [8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 10];\n                return lookup[total - 1] == vatnumber.slice(8, 9);\n            }\n\n            // Individuals type 3\n            else if (czexp[3].test(vatnumber)) {\n                var temp = Number(vatnumber.slice(0, 2)) + Number(vatnumber.slice(2, 4)) + Number(vatnumber.slice(4, 6)) + Number(vatnumber.slice(6, 8)) + Number(vatnumber.slice(8));\n                return !!(temp % 11 == 0 && Number(vatnumber) % 11 == 0);\n            }\n\n            // else error\n            return false;\n        },\n\n        DE: function (vatnumber) {\n\n            // Checks the check digits of a German VAT number.\n\n            var product = 10;\n            var sum = 0;\n            var checkdigit = 0;\n            for (var i = 0; i < 8; i++) {\n\n                // Extract the next digit and implement peculiar algorithm!.\n                sum = (Number(vatnumber.charAt(i)) + product) % 10;\n                if (sum == 0) {\n                    sum = 10\n                }\n                product = (2 * sum) % 11;\n            }\n\n            // Establish check digit.\n            if (11 - product == 10) {\n                checkdigit = 0\n            } else {\n                checkdigit = 11 - product\n            }\n\n            // Compare it with the last two characters of the VAT number. If the same, then it is a valid\n            // check digit.\n            return checkdigit == vatnumber.slice(8, 9);\n        },\n\n        DK: function (vatnumber) {\n\n            // Checks the check digits of a Danish VAT number.\n\n            var total = 0;\n            var multipliers = [2, 7, 6, 5, 4, 3, 2, 1];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n            // Establish check digit.\n            total = total % 11;\n\n            // The remainder should be 0 for it to be valid..\n            return total == 0;\n        },\n\n        EE: function (vatnumber) {\n\n            // Checks the check digits of an Estonian VAT number.\n\n            var total = 0;\n            var multipliers = [3, 7, 1, 3, 7, 1, 3, 7];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n            // Establish check digits using modulus 10.\n            total = 10 - total % 10;\n            if (total == 10) total = 0;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            return total == vatnumber.slice(8, 9);\n        },\n\n        EL: function (vatnumber) {\n\n            // Checks the check digits of a Greek VAT number.\n\n            var total = 0;\n            var multipliers = [256, 128, 64, 32, 16, 8, 4, 2];\n\n            //eight character numbers should be prefixed with an 0.\n            if (vatnumber.length == 8) {\n                vatnumber = \"0\" + vatnumber\n            }\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n            // Establish check digit.\n            total = total % 11;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            return total == vatnumber.slice(8, 9);\n        },\n\n        ES: function (vatnumber) {\n\n            // Checks the check digits of a Spanish VAT number.\n\n            var total = 0;\n            var temp = 0;\n            var multipliers = [2, 1, 2, 1, 2, 1, 2];\n            var esexp = [];\n            esexp[0] = (/^[A-H|J|U|V]\\d{8}$/);\n            esexp[1] = (/^[A-H|N-S|W]\\d{7}[A-J]$/);\n            esexp[2] = (/^[0-9|Y|Z]\\d{7}[A-Z]$/);\n            esexp[3] = (/^[K|L|M|X]\\d{7}[A-Z]$/);\n            var i = 0;\n\n            // National juridical entities\n            if (esexp[0].test(vatnumber)) {\n\n                // Extract the next digit and multiply by the counter.\n                for (i = 0; i < 7; i++) {\n                    temp = Number(vatnumber.charAt(i + 1)) * multipliers[i];\n                    if (temp > 9)\n                        total += Math.floor(temp / 10) + temp % 10;\n                    else\n                        total += temp;\n                }\n                // Now calculate the check digit itself.\n                total = 10 - total % 10;\n                if (total == 10) {\n                    total = 0;\n                }\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                return total == vatnumber.slice(8, 9);\n            }\n\n            // Juridical entities other than national ones\n            else if (esexp[1].test(vatnumber)) {\n\n                // Extract the next digit and multiply by the counter.\n                for (i = 0; i < 7; i++) {\n                    temp = Number(vatnumber.charAt(i + 1)) * multipliers[i];\n                    if (temp > 9)\n                        total += Math.floor(temp / 10) + temp % 10;\n                    else\n                        total += temp;\n                }\n\n                // Now calculate the check digit itself.\n                total = 10 - total % 10;\n                total = String.fromCharCode(total + 64);\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                return total == vatnumber.slice(8, 9);\n            }\n\n            // Personal number (NIF) (starting with numeric of Y or Z)\n            else if (esexp[2].test(vatnumber)) {\n                var tempnumber = vatnumber;\n                if (tempnumber.substring(0, 1) == 'Y') tempnumber = tempnumber.replace(/Y/, \"1\");\n                if (tempnumber.substring(0, 1) == 'Z') tempnumber = tempnumber.replace(/Z/, \"2\");\n                return tempnumber.charAt(8) == 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(Number(tempnumber.substring(0, 8)) % 23);\n            }\n\n            // Personal number (NIF) (starting with K, L, M, or X)\n            else if (esexp[3].test(vatnumber)) {\n                return vatnumber.charAt(8) == 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(Number(vatnumber.substring(1, 8)) % 23);\n            }\n\n            else return false;\n        },\n\n        EU: function (vatnumber) {\n\n            // We know little about EU numbers apart from the fact that the first 3 digits represent the\n            // country, and that there are nine digits in total.\n            return true;\n        },\n\n        FI: function (vatnumber) {\n\n            // Checks the check digits of a Finnish VAT number.\n\n            var total = 0;\n            var multipliers = [7, 9, 10, 5, 8, 4, 2];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 7; i++) total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n            // Establish check digit.\n            total = 11 - total % 11;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            return total == vatnumber.slice(7, 8);\n        },\n\n        FR: function (vatnumber) {\n\n            // Checks the check digits of a French VAT number.\n\n            if (!(/^\\d{11}$/).test(vatnumber)) return true;\n\n            // Extract the last nine digits as an integer.\n            var total = vatnumber.substring(2);\n\n            // Establish check digit.\n            total = (total * 100 + 12) % 97;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            return total == vatnumber.slice(0, 2);\n        },\n\n        GB: function (vatnumber) {\n\n            // Checks the check digits of a UK VAT number.\n\n            var multipliers = [8, 7, 6, 5, 4, 3, 2];\n\n            // Government departments\n            if (vatnumber.substr(0, 2) == 'GD') {\n                return vatnumber.substr(2, 3) < 500;\n            }\n\n            // Health authorities\n            if (vatnumber.substr(0, 2) == 'HA') {\n                return vatnumber.substr(2, 3) > 499;\n            }\n\n            // Standard and commercial numbers\n            var total = 0;\n\n            // 0 VAT numbers disallowed!\n            if (Number(vatnumber.slice(0)) == 0) return false;\n\n            // Check range is OK for modulus 97 calculation\n            var no = Number(vatnumber.slice(0, 7));\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 7; i++) total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n            // Old numbers use a simple 97 modulus, but new numbers use an adaptation of that (less 55). Our\n            // VAT number could use either system, so we check it against both.\n\n            // Establish check digits by subtracting 97 from total until negative.\n            var cd = total;\n            while (cd > 0) {\n                cd = cd - 97;\n            }\n\n            // Get the absolute value and compare it with the last two characters of the VAT number. If the\n            // same, then it is a valid traditional check digit. However, even then the number must fit within\n            // certain specified ranges.\n            cd = Math.abs(cd);\n            if (cd == vatnumber.slice(7, 9) && no < 9990001 && (no < 100000 || no > 999999) && (no < 9490001 || no > 9700000)) return true;\n\n            // Now try the new method by subtracting 55 from the check digit if we can - else add 42\n            if (cd >= 55)\n                cd = cd - 55;\n            else\n                cd = cd + 42;\n            return !!(cd == vatnumber.slice(7, 9) && no > 1000000);\n        },\n\n        HR: function (vatnumber) {\n\n            // Checks the check digits of a Croatian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n            var product = 10;\n            var sum = 0;\n            var checkdigit = 0;\n\n            for (var i = 0; i < 10; i++) {\n\n                // Extract the next digit and implement the algorithm\n                sum = (Number(vatnumber.charAt(i)) + product) % 10;\n                if (sum == 0) {\n                    sum = 10\n                }\n\n                product = (2 * sum) % 11;\n            }\n\n            // Now check that we have the right check digit\n            return (product + vatnumber.slice(10, 11) * 1) % 10 == 1;\n        },\n\n        HU: function (vatnumber) {\n\n            // Checks the check digits of a Hungarian VAT number.\n\n            var total = 0;\n            var multipliers = [9, 7, 3, 1, 9, 7, 3];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 7; i++) total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n            // Establish check digit.\n            total = 10 - total % 10;\n            if (total == 10) total = 0;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            return total == vatnumber.slice(7, 8);\n        },\n\n        IE: function (vatnumber) {\n\n            // Checks the check digits of an Irish VAT number.\n\n            var total = 0;\n            var multipliers = [8, 7, 6, 5, 4, 3, 2];\n\n            // If the code is type 1 format, we need to convert it to the new before performing the validation.\n            if (/^\\d[A-Z\\*\\+]/.test(vatnumber)) vatnumber = \"0\" + vatnumber.substring(2, 7) + vatnumber.substring(0, 1) + vatnumber.substring(7, 8);\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 7; i++) total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n            // If the number is type 3 then we need to include the trailing A or H in the calculation\n            if (/^\\d{7}[A-Z][AH]$/.test(vatnumber)) {\n\n                // Add in a multiplier for the character A (1*9=9) or H (8*9=72)\n                if (vatnumber.charAt(8) == 'H')\n                    total += 72;\n                else\n                    total += 9;\n            }\n\n            // Establish check digit using modulus 23, and translate to char. equivalent.\n            total = total % 23;\n            if (total == 0)\n                total = \"W\";\n            else\n                total = String.fromCharCode(total + 64);\n\n            // Compare it with the eighth character of the VAT number. If it's the same, then it's valid.\n            return total == vatnumber.slice(7, 8);\n        },\n\n        IT: function (vatnumber) {\n\n            // Checks the check digits of an Italian VAT number.\n\n            var total = 0;\n            var multipliers = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2];\n            var temp;\n\n            // The last three digits are the issuing office, and cannot exceed more 201, unless 999 or 888\n            if (Number(vatnumber.slice(0, 7)) == 0) return false;\n            temp = Number(vatnumber.slice(7, 10));\n            if ((temp < 1) || (temp > 201) && temp != 999 && temp != 888) return false;\n\n            // Extract the next digit and multiply by the appropriate\n            for (var i = 0; i < 10; i++) {\n                temp = Number(vatnumber.charAt(i)) * multipliers[i];\n                if (temp > 9)\n                    total += Math.floor(temp / 10) + temp % 10;\n                else\n                    total += temp;\n            }\n\n            // Establish check digit.\n            total = 10 - total % 10;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            return total == vatnumber.slice(10, 11);\n        },\n\n        LT: function (vatnumber) {\n\n            // Checks the check digits of a Lithuanian VAT number.\n\n            // 9 character VAT numbers are for legal persons\n            if (vatnumber.length == 9) {\n\n                // 8th character must be one\n                if (!(/^\\d{7}1/).test(vatnumber)) return false;\n\n                // Extract the next digit and multiply by the counter+1.\n                var total = 0;\n                for (var i = 0; i < 8; i++) total += Number(vatnumber.charAt(i)) * (i + 1);\n\n                // Can have a double check digit calculation!\n                if (total % 11 == 10) {\n                    var multipliers = [3, 4, 5, 6, 7, 8, 9, 1];\n                    total = 0;\n                    for (i = 0; i < 8; i++) total += Number(vatnumber.charAt(i)) * multipliers[i];\n                }\n\n                // Establish check digit.\n                total = total % 11;\n                if (total == 10) {\n                    total = 0;\n                }\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                return total == vatnumber.slice(8, 9);\n            }\n\n            // 12 character VAT numbers are for temporarily registered taxpayers\n            else {\n\n                // 11th character must be one\n                if (!(/^\\d{10}1/).test(vatnumber)) return false;\n\n                // Extract the next digit and multiply by the counter+1.\n                var total = 0;\n                var multipliers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2];\n                for (var i = 0; i < 11; i++) total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n                // Can have a double check digit calculation!\n                if (total % 11 == 10) {\n                    var multipliers = [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4];\n                    total = 0;\n                    for (i = 0; i < 11; i++) total += Number(vatnumber.charAt(i)) * multipliers[i];\n                }\n\n                // Establish check digit.\n                total = total % 11;\n                if (total == 10) {\n                    total = 0;\n                }\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                return total == vatnumber.slice(11, 12);\n            }\n        },\n\n        LU: function (vatnumber) {\n\n            // Checks the check digits of a Luxembourg VAT number.\n\n            return vatnumber.slice(0, 6) % 89 == vatnumber.slice(6, 8);\n        },\n\n        LV: function (vatnumber) {\n\n            // Checks the check digits of a Latvian VAT number.\n\n            // Differentiate between legal entities and natural bodies. For the latter we simply check that\n            // the first six digits correspond to valid DDMMYY dates.\n            if ((/^[0-3]/).test(vatnumber)) {\n                return !!(/^[0-3][0-9][0-1][0-9]/).test(vatnumber);\n            }\n\n            else {\n\n                var total = 0;\n                var multipliers = [9, 1, 4, 8, 3, 10, 2, 5, 7, 6];\n\n                // Extract the next digit and multiply by the counter.\n                for (var i = 0; i < 10; i++) total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n                // Establish check digits by getting modulus 11.\n                if (total % 11 == 4 && vatnumber[0] == 9) total = total - 45;\n                if (total % 11 == 4)\n                    total = 4 - total % 11;\n                else if (total % 11 > 4)\n                    total = 14 - total % 11;\n                else if (total % 11 < 4)\n                    total = 3 - total % 11;\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                return total == vatnumber.slice(10, 11);\n            }\n        },\n\n        MT: function (vatnumber) {\n\n            // Checks the check digits of a Maltese VAT number.\n\n            var total = 0;\n            var multipliers = [3, 4, 6, 7, 8, 9];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 6; i++) total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n            // Establish check digits by getting modulus 37.\n            total = 37 - total % 37;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            return total == vatnumber.slice(6, 8) * 1;\n        },\n\n        NL: function (vatnumber) {\n\n            // Checks the check digits of a Dutch VAT number.\n\n            var total = 0;\n            var multipliers = [9, 8, 7, 6, 5, 4, 3, 2];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n            // Establish check digits by getting modulus 11.\n            total = total % 11;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            return total == vatnumber.slice(8, 9);\n        },\n\n        NO: function (vatnumber) {\n\n            // Checks the check digits of a Norwegian VAT number.\n            // See http://www.brreg.no/english/coordination/number.html\n\n            var total = 0;\n            var multipliers = [3, 2, 7, 6, 5, 4, 3, 2];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n            // Establish check digits by getting modulus 11. Check digits > 9 are invalid\n            total = 11 - total % 11;\n            if (total == 11) {\n                total = 0;\n            }\n            if (total < 10) {\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                return total == vatnumber.slice(8, 9);\n            }\n        },\n\n        PL: function (vatnumber) {\n\n            // Checks the check digits of a Polish VAT number.\n\n            var total = 0;\n            var multipliers = [6, 5, 7, 2, 3, 4, 5, 6, 7];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 9; i++) total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n            // Establish check digits subtracting modulus 11 from 11.\n            total = total % 11;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            return total == vatnumber.slice(9, 10);\n        },\n\n        PT: function (vatnumber) {\n\n            // Checks the check digits of a Portugese VAT number.\n\n            var total = 0;\n            var multipliers = [9, 8, 7, 6, 5, 4, 3, 2];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n            // Establish check digits subtracting modulus 11 from 11.\n            total = 11 - total % 11;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            return total == vatnumber.slice(8, 9);\n        },\n\n        RO: function (vatnumber) {\n\n            // Checks the check digits of a Romanian VAT number.\n\n            var multipliers = [7, 5, 3, 2, 1, 7, 5, 3, 2];\n\n            // Extract the next digit and multiply by the counter.\n            var VATlen = vatnumber.length;\n            multipliers = multipliers.slice(10 - VATlen);\n            var total = 0;\n            for (var i = 0; i < vatnumber.length - 1; i++) {\n                total += Number(vatnumber.charAt(i)) * multipliers[i];\n            }\n\n            // Establish check digits by getting modulus 11.\n            total = (10 * total) % 11;\n            if (total == 10) total = 0;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            return total == vatnumber.slice(vatnumber.length - 1, vatnumber.length);\n        },\n\n        RS: function (vatnumber) {\n\n            // Checks the check digits of a Serbian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n            var product = 10;\n            var sum = 0;\n            var checkdigit = 0;\n\n            for (var i = 0; i < 8; i++) {\n\n                // Extract the next digit and implement the algorithm\n                sum = (Number(vatnumber.charAt(i)) + product) % 10;\n                if (sum == 0) {\n                    sum = 10\n                }\n                product = (2 * sum) % 11;\n            }\n\n            // Now check that we have the right check digit\n            return (product + vatnumber.slice(8, 9) * 1) % 10 == 1;\n        },\n\n        RU: function (vatnumber) {\n\n            // Checks the check digits of a Russian INN number\n            // See http://russianpartner.biz/test_inn.html for algorithm\n\n            // 10 digit INN numbers\n            if (vatnumber.length == 10) {\n                var total = 0;\n                var multipliers = [2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\n                for (var i = 0; i < 10; i++) {\n                    total += Number(vatnumber.charAt(i)) * multipliers[i];\n                }\n                total = total % 11;\n                if (total > 9) {\n                    total = total % 10\n                }\n\n                // Compare it with the last character of the VAT number. If it is the same, then it's valid\n                return total == vatnumber.slice(9, 10);\n\n                // 12 digit INN numbers\n            } else if (vatnumber.length == 12) {\n                var total1 = 0;\n                var multipliers1 = [7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\n                var total2 = 0;\n                var multipliers2 = [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\n\n                for (var i = 0; i < 11; i++) total1 += Number(vatnumber.charAt(i)) * multipliers1[i];\n                total1 = total1 % 11;\n                if (total1 > 9) {\n                    total1 = total1 % 10\n                }\n\n                for (var i = 0; i < 11; i++) total2 += Number(vatnumber.charAt(i)) * multipliers2[i];\n                total2 = total2 % 11;\n                if (total2 > 9) {\n                    total2 = total2 % 10\n                }\n\n                // Compare the first check with the 11th character and the second check with the 12th and last\n                // character of the VAT number. If they're both the same, then it's valid\n                return !!((total1 == vatnumber.slice(10, 11)) && (total2 == vatnumber.slice(11, 12)));\n            }\n        },\n\n        SE: function (vatnumber) {\n\n            // Calculate R where R = R1 + R3 + R5 + R7 + R9, and Ri = INT(Ci/5) + (Ci*2) modulo 10\n            var R = 0;\n            var digit;\n            for (var i = 0; i < 9; i = i + 2) {\n                digit = Number(vatnumber.charAt(i));\n                R += Math.floor(digit / 5) + ((digit * 2) % 10);\n            }\n\n            // Calculate S where S = C2 + C4 + C6 + C8\n            var S = 0;\n            for (var i = 1; i < 9; i = i + 2) S += Number(vatnumber.charAt(i));\n\n            // Calculate the Check Digit\n            var cd = (10 - (R + S) % 10) % 10;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            return cd == vatnumber.slice(9, 10);\n        },\n\n        SI: function (vatnumber) {\n\n            // Checks the check digits of a Slovenian VAT number.\n\n            var total = 0;\n            var multipliers = [8, 7, 6, 5, 4, 3, 2];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 7; i++) total += Number(vatnumber.charAt(i)) * multipliers[i];\n\n            // Establish check digits using modulus 11\n            total = 11 - total % 11;\n            if (total == 10) {\n                total = 0;\n            }\n\n            // Compare the number with the last character of the VAT number. If it is the\n            // same, then it's a valid check digit.\n            return !!(total != 11 && total == vatnumber.slice(7, 8));\n        },\n\n        SK: function (vatnumber) {\n\n            // Checks the check digits of a Slovakian VAT number.\n\n            // Check that the modulus of the whole VAT number is 0 - else error\n            return Number(vatnumber % 11) == 0;\n        }\n    };\n\n    return exports;\n\n\n})();"],"sourceRoot":"/source/"}