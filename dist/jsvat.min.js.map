{"version":3,"sources":["jsvat.js"],"names":["VatChecker","_validateRegexp","vat","regexp","test","_validateRules","countryName","parsedNum","exec","number","checkDigitFunc","_checks","_validate","result","_REGEXP_LIST","austria","belgium","bulgaria","switzerland","cyprus","czech_republic","germany","denmark","estonia","greece","spain","europe","finland","france","united_kingdom","croatia","hungary","ireland","italy","latvia","lithunia","luxembourg","malta","netherlands","norway","poland","portugal","romania","russia","serbia","slovenia","slovakia_republic","sweden","exports","checkVatNum","toString","toUpperCase","replace","hasOwnProperty","Array","isArray","i","length","vatNum","expect","total","multipliers","temp","charAt","Math","floor","slice","check","j","month","k","substr","l","m","String","fromCharCode","czExp","lookup","product","sum","checkDigit","esExp","tempnumber","substring","no","abs","vatLength","expect2","total1","multipliers1","total2","multipliers2","digit","R","S","module"],"mappings":"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","file":"jsvat.min.js","sourcesContent":["var VatChecker = (function () {\n    'use strict';\n\n    var _REGEXP_LIST = {\n        austria: /^(AT)U(\\d{8})$/,\n        belgium: /^(BE)(0?\\d{9})$/,\n        bulgaria: /^(BG)(\\d{9,10})$/,\n        switzerland: /^(CHE)(\\d{9})(MWST)?$/,\n        cyprus: /^(CY)([0-59]\\d{7}[A-Z])$/,\n        czech_republic: /^(CZ)(\\d{8,10})(\\d{3})?$/,\n        germany: /^(DE)([1-9]\\d{8})$/,\n        denmark: /^(DK)(\\d{8})$/,\n        estonia: /^(EE)(10\\d{7})$/,\n        greece: /^(EL)(\\d{9})$/,\n        spain: [\n            /^(ES)([A-Z]\\d{8})$/,\n            /^(ES)([A-HN-SW]\\d{7}[A-J])$/,\n            /^(ES)([0-9YZ]\\d{7}[A-Z])$/,\n            /^(ES)([KLMX]\\d{7}[A-Z])$/\n        ],\n        europe: /^(EU)(\\d{9})$/,\n        finland: /^(FI)(\\d{8})$/,\n        france: [\n            /^(FR)(\\d{11})$/,\n            /^(FR)([A-HJ-NP-Z]\\d{10})$/,\n            /^(FR)(\\d[A-HJ-NP-Z]\\d{9})$/,\n            /^(FR)([A-HJ-NP-Z]{2}\\d{9})$/\n        ],\n        united_kingdom: [\n            /^(GB)?(\\d{9})$/,\n            /^(GB)?(\\d{12})$/,\n            /^(GB)?(GD\\d{3})$/,\n            /^(GB)?(HA\\d{3})$/\n        ],\n        croatia: /^(HR)(\\d{11})$/,\n        hungary: /^(HU)(\\d{8})$/,\n        ireland: [\n            /^(IE)(\\d{7}[A-W])$/,\n            /^(IE)([7-9][A-Z\\*\\+)]\\d{5}[A-W])$/,\n            /^(IE)(\\d{7}[A-W][AH])$/\n        ],\n        italy: /^(IT)(\\d{11})$/,\n        latvia: /^(LV)(\\d{11})$/,\n        lithunia: /^(LT)(\\d{9}|\\d{12})$/,\n        luxembourg: /^(LU)(\\d{8})$/,\n        malta: /^(MT)([1-9]\\d{7})$/,\n        netherlands: /^(NL)(\\d{9})B\\d{2}$/,\n        norway: /^(NO)(\\d{9})$/,\n        poland: /^(PL)(\\d{10})$/,\n        portugal: /^(PT)(\\d{9})$/,\n        romania: /^(RO)([1-9]\\d{1,9})$/,\n        russia: /^(RU)(\\d{10}|\\d{12})$/,\n        serbia: /^(RS)(\\d{9})$/,\n        slovenia: /^(SI)([1-9]\\d{7})$/,\n        slovakia_republic: /^(SK)([1-9]\\d[2346-9]\\d{7})$/,\n        sweden: /^(SE)(\\d{10}01)$/\n    };\n\n    function _validateRegexp(vat, regexp) {\n        return regexp.test(vat);\n    }\n\n    function _validateRules(vat, regexp, countryName) {\n        var parsedNum = regexp.exec(vat);\n\n        //var code = parsedNum[1];\n        var number = parsedNum[2];\n        //if (!code || code.length === 0) code = 'GB';\n\n        var checkDigitFunc = _checks[countryName];\n        return checkDigitFunc(number);\n    }\n\n    function _validate(vat, regexp, countryName) {\n        var result = false;\n        if (_validateRegexp(vat, regexp)) {\n            result = _validateRules(vat, regexp, countryName);\n        }\n        return result;\n    }\n\n    var exports = {\n        checkVatNum: function (vat) {\n            if (!vat) return false;\n            vat = vat.toString().toUpperCase().replace(/(\\s|-|\\.)+/g, '');\n\n            for (var countryName in _REGEXP_LIST) {\n                if (_REGEXP_LIST.hasOwnProperty(countryName)) {\n                    var regexp = _REGEXP_LIST[countryName];\n\n                    if (Array.isArray(regexp)) {\n                        for (var i = 0; i < regexp.length; i++) {\n                            if (_validate(vat, regexp[i], countryName)) return true;\n                        }\n                    } else {\n                        if (_validate(vat, regexp, countryName)) return true;\n                    }\n                }\n            }\n            return false\n\n        }\n    };\n\n    var _checks = {\n        austria: function (vatNum) {\n            var total = 0;\n            var multipliers = [1, 2, 1, 2, 1, 2, 1];\n            var temp = 0;\n            var expect;\n\n            for (var i = 0; i < 7; i++) {\n                temp = +vatNum.charAt(i) * multipliers[i];\n                if (temp > 9)\n                    total += Math.floor(temp / 10) + temp % 10;\n                else\n                    total += temp;\n            }\n\n            total = 10 - (total + 4) % 10;\n            if (total === 10) total = 0;\n\n            expect = +vatNum.slice(7, 8);\n\n            return total === expect;\n        },\n        belgium: function (vatNum) {\n            var expect;\n            var check;\n            if (vatNum.length === 9) vatNum = \"0\" + vatNum;\n            if (+vatNum.slice(1, 2) === 0) return false;\n\n            check = +(97 - +vatNum.slice(0, 8) % 97);\n            expect = +vatNum.slice(8, 10);\n            return check === expect;\n        },\n        bulgaria: function (vatNum) {\n            var expect;\n            var multipliers;\n            var temp = 0;\n            var total = 0;\n\n            if (vatNum.length === 9) {\n\n                temp = 0;\n                for (var i = 0; i < 8; i++) {\n                    temp += +vatNum.charAt(i) * (i + 1);\n                }\n                total = temp % 11;\n                if (total !== 10) {\n                    expect = +vatNum.slice(8);\n                    return total === expect;\n                }\n\n                temp = 0;\n                for (var j = 0; j < 8; j++) {\n                    temp += +vatNum.charAt(j) * (j + 3);\n                }\n\n                total = temp % 11;\n                if (total === 10) total = 0;\n                expect = +vatNum.slice(8);\n                return total === expect;\n            }\n\n            // 10 digit VAT code - see if it relates to a standard physical person\n            if ((/^\\d\\d[0-5]\\d[0-3]\\d\\d{4}$/).test(vatNum)) {\n\n                // Check month\n                var month = +vatNum.slice(2, 4);\n                if ((month > 0 && month < 13) || (month > 20 && month < 33) || (month > 40 && month < 53)) {\n\n                    // Extract the next digit and multiply by the counter.\n                    multipliers = [2, 4, 8, 5, 10, 9, 7, 3, 6];\n                    total = 0;\n                    for (var k = 0; k < 9; k++) {\n                        total += +vatNum.charAt(k) * multipliers[k];\n                    }\n\n                    // Establish check digit.\n                    total = total % 11;\n                    if (total === 10) total = 0;\n\n                    // Check to see if the check digit given is correct, If not, try next type of person\n                    if (total === +vatNum.substr(9, 1)) return true;\n                }\n            }\n\n            // It doesn't relate to a standard physical person - see if it relates to a foreigner.\n\n            // Extract the next digit and multiply by the counter.\n            multipliers = [21, 19, 17, 13, 11, 9, 7, 3, 1];\n            total = 0;\n            for (var l = 0; l < 9; l++) {\n                total += +vatNum.charAt(l) * multipliers[l];\n            }\n\n            // Check to see if the check digit given is correct, If not, try next type of person\n            if (total % 10 === +vatNum.substr(9, 1)) {\n                return true;\n            }\n\n            // Finally, if not yet identified, see if it conforms to a miscellaneous VAT number\n\n            // Extract the next digit and multiply by the counter.\n            multipliers = [4, 3, 2, 7, 6, 5, 4, 3, 2];\n            total = 0;\n            for (var m = 0; m < 9; m++) {\n                total += +vatNum.charAt(m) * multipliers[m];\n            }\n\n            // Establish check digit.\n            total = 11 - total % 11;\n            if (total === 10) return false;\n            if (total === 11) total = 0;\n\n            // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n            expect = +vatNum.substr(9, 1);\n            return total === expect;\n        },\n        switzerland: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Swiss VAT number.\n\n            // Extract the next digit and multiply by the counter.\n            var multipliers = [5, 4, 3, 2, 7, 6, 5, 4];\n            var total = 0;\n            for (var i = 0; i < 8; i++) total += +vatNum.charAt(i) * multipliers[i];\n\n            // Establish check digit.\n            total = 11 - total % 11;\n            if (total === 10) return false;\n            if (total === 11) total = 0;\n\n            // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n            expect = +vatNum.substr(8, 1);\n            return total === expect;\n        },\n        cyprus: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Cypriot VAT number.\n\n            // Not allowed to start with '12'\n            if (+vatNum.slice(0, 2) === 12) return false;\n\n            // Extract the next digit and multiply by the counter.\n            var total = 0;\n            for (var i = 0; i < 8; i++) {\n                var temp = +vatNum.charAt(i);\n                if (i % 2 === 0) {\n                    switch (temp) {\n                        case 0:\n                            temp = 1;\n                            break;\n                        case 1:\n                            temp = 0;\n                            break;\n                        case 2:\n                            temp = 5;\n                            break;\n                        case 3:\n                            temp = 7;\n                            break;\n                        case 4:\n                            temp = 9;\n                            break;\n                        default:\n                            temp = temp * 2 + 3;\n                    }\n                }\n                total += temp;\n            }\n\n            // Establish check digit using modulus 26, and translate to char. equivalent.\n            total = total % 26;\n            total = String.fromCharCode(total + 65);\n\n            // Check to see if the check digit given is correct\n            expect = vatNum.substr(8, 1);\n            return total === expect;\n        },\n        czech_republic: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Czech Republic VAT number.\n\n            var total = 0;\n            var multipliers = [8, 7, 6, 5, 4, 3, 2];\n\n            var czExp = [];\n            czExp[0] = (/^\\d{8}$/);\n            czExp[1] = (/^[0-5][0-9][0|1|5|6]\\d[0-3]\\d\\d{3}$/);\n            czExp[2] = (/^6\\d{8}$/);\n            czExp[3] = (/^\\d{2}[0-3|5-8]\\d[0-3]\\d\\d{4}$/);\n\n            // Legal entities\n            if (czExp[0].test(vatNum)) {\n\n                // Extract the next digit and multiply by the counter.\n                for (var i = 0; i < 7; i++) {\n                    total += +vatNum.charAt(i) * multipliers[i];\n                }\n\n                // Establish check digit.\n                total = 11 - total % 11;\n                if (total === 10) total = 0;\n                if (total === 11) total = 1;\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                expect = +vatNum.slice(7, 8);\n                return total === expect;\n            }\n\n            // Individuals type 1\n            else if (czExp[1].test(vatNum)) {\n                if (temp = +vatNum.slice(0, 2) > 53) return false;\n                return true;\n            }\n\n            // Individuals type 2\n            else if (czExp[2].test(vatNum)) {\n\n                // Extract the next digit and multiply by the counter.\n                for (var j = 0; j < 7; j++) {\n                    total += +vatNum.charAt(j + 1) * multipliers[j];\n                }\n\n                // Establish check digit.\n                total = 11 - total % 11;\n                if (total === 10) total = 0;\n                if (total === 11) total = 1;\n\n                // Convert calculated check digit according to a lookup table;\n                var lookup = [8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 10];\n                expect = +vatNum.slice(8, 9);\n                return lookup[total - 1] === expect;\n            }\n\n            // Individuals type 3\n            else if (czExp[3].test(vatNum)) {\n                var temp = +vatNum.slice(0, 2) + +vatNum.slice(2, 4) + +vatNum.slice(4, 6) + +vatNum.slice(6, 8) + +vatNum.slice(8);\n                expect = +vatNum % 11 === 0;\n                return !!(temp % 11 === 0 && expect);\n            }\n\n            // else error\n            return false;\n        },\n        germany: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a German VAT number.\n\n            var product = 10;\n            var sum = 0;\n            var checkDigit = 0;\n            for (var i = 0; i < 8; i++) {\n\n                // Extract the next digit and implement peculiar algorithm!.\n                sum = (+vatNum.charAt(i) + product) % 10;\n                if (sum === 0) {\n                    sum = 10\n                }\n                product = (2 * sum) % 11;\n            }\n\n            // Establish check digit.\n            if (11 - product === 10) {\n                checkDigit = 0\n            } else {\n                checkDigit = 11 - product\n            }\n\n            // Compare it with the last two characters of the VAT number. If the same, then it is a valid\n            // check digit.\n            expect = +vatNum.slice(8, 9);\n            return checkDigit === expect;\n        },\n        denmark: function (vatNum) {\n            var expect = 0;\n\n            // Checks the check digits of a Danish VAT number.\n\n            var total = 0;\n            var multipliers = [2, 7, 6, 5, 4, 3, 2, 1];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) total += +vatNum.charAt(i) * multipliers[i];\n\n            // Establish check digit.\n            total = total % 11;\n\n            // The remainder should be 0 for it to be valid..\n            return total === expect;\n        },\n        estonia: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of an Estonian VAT number.\n\n            var total = 0;\n            var multipliers = [3, 7, 1, 3, 7, 1, 3, 7];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) total += +vatNum.charAt(i) * multipliers[i];\n\n            // Establish check digits using modulus 10.\n            total = 10 - total % 10;\n            if (total === 10) total = 0;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vatNum.slice(8, 9);\n            return total === expect;\n        },\n        greece: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Greek VAT number.\n\n            var total = 0;\n            var multipliers = [256, 128, 64, 32, 16, 8, 4, 2];\n\n            //eight character numbers should be prefixed with an 0.\n            if (vatNum.length === 8) {\n                vatNum = \"0\" + vatNum\n            }\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) total += +vatNum.charAt(i) * multipliers[i];\n\n            // Establish check digit.\n            total = total % 11;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vatNum.slice(8, 9);\n            return total === expect;\n        },\n        spain: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Spanish VAT number.\n\n            var total = 0;\n            var temp = 0;\n            var multipliers = [2, 1, 2, 1, 2, 1, 2];\n            var esExp = [];\n            esExp[0] = (/^[A-H|J|U|V]\\d{8}$/);\n            esExp[1] = (/^[A-H|N-S|W]\\d{7}[A-J]$/);\n            esExp[2] = (/^[0-9|Y|Z]\\d{7}[A-Z]$/);\n            esExp[3] = (/^[K|L|M|X]\\d{7}[A-Z]$/);\n            var i = 0;\n\n            // National juridical entities\n            if (esExp[0].test(vatNum)) {\n\n                // Extract the next digit and multiply by the counter.\n                for (i = 0; i < 7; i++) {\n                    temp = vatNum.charAt(i + 1) * multipliers[i];\n                    if (temp > 9)\n                        total += Math.floor(temp / 10) + temp % 10;\n                    else\n                        total += temp;\n                }\n                // Now calculate the check digit itself.\n                total = 10 - total % 10;\n                if (total === 10) {\n                    total = 0;\n                }\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                expect = +vatNum.slice(8, 9);\n                return total === expect;\n            }\n\n            // Juridical entities other than national ones\n            else if (esExp[1].test(vatNum)) {\n\n                // Extract the next digit and multiply by the counter.\n                for (i = 0; i < 7; i++) {\n                    temp = vatNum.charAt(i + 1) * multipliers[i];\n                    if (temp > 9)\n                        total += Math.floor(temp / 10) + temp % 10;\n                    else\n                        total += temp;\n                }\n\n                // Now calculate the check digit itself.\n                total = 10 - total % 10;\n                total = String.fromCharCode(total + 64);\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                expect = vatNum.slice(8, 9);\n                return total === expect;\n            }\n\n            // Personal number (NIF) (starting with numeric of Y or Z)\n            else if (esExp[2].test(vatNum)) {\n                var tempnumber = vatNum;\n                if (tempnumber.substring(0, 1) === 'Y') tempnumber = tempnumber.replace(/Y/, \"1\");\n                if (tempnumber.substring(0, 1) === 'Z') tempnumber = tempnumber.replace(/Z/, \"2\");\n                expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+tempnumber.substring(0, 8) % 23);\n                return tempnumber.charAt(8) === expect;\n            }\n\n            // Personal number (NIF) (starting with K, L, M, or X)\n            else if (esExp[3].test(vatNum)) {\n                expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+vatNum.substring(1, 8) % 23);\n                return vatNum.charAt(8) === expect;\n            }\n\n            else return false;\n        },\n        europe: function () {\n\n            // We know little about EU numbers apart from the fact that the first 3 digits represent the\n            // country, and that there are nine digits in total.\n            return true;\n        },\n        finland: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Finnish VAT number.\n\n            var total = 0;\n            var multipliers = [7, 9, 10, 5, 8, 4, 2];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 7; i++) total += +vatNum.charAt(i) * multipliers[i];\n\n            // Establish check digit.\n            total = 11 - total % 11;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vatNum.slice(7, 8);\n            return total === expect;\n        },\n        france: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a French VAT number.\n\n            if (!(/^\\d{11}$/).test(vatNum)) {\n                return true;\n            }\n\n            // Extract the last nine digits as an integer.\n            var total = +vatNum.substring(2);\n\n            // Establish check digit.\n            total = (total * 100 + 12) % 97;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vatNum.slice(0, 2);\n            return total === expect;\n        },\n        united_kingdom: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a UK VAT number.\n\n            var multipliers = [8, 7, 6, 5, 4, 3, 2];\n\n            // Government departments\n            if (vatNum.substr(0, 2) === 'GD') {\n                expect = 500;\n                return vatNum.substr(2, 3) < expect;\n            }\n\n            // Health authorities\n            if (vatNum.substr(0, 2) === 'HA') {\n                expect = 499;\n                return vatNum.substr(2, 3) > expect;\n            }\n\n            // Standard and commercial numbers\n            var total = 0;\n\n            // 0 VAT numbers disallowed!\n            if (+vatNum.slice(0) === 0) return false;\n\n            // Check range is OK for modulus 97 calculation\n            var no = +vatNum.slice(0, 7);\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 7; i++) total += +vatNum.charAt(i) * multipliers[i];\n\n            // Old numbers use a simple 97 modulus, but new numbers use an adaptation of that (less 55). Our\n            // VAT number could use either system, so we check it against both.\n\n            // Establish check digits by subtracting 97 from total until negative.\n            var checkDigit = total;\n            while (checkDigit > 0) {\n                checkDigit = checkDigit - 97;\n            }\n\n            // Get the absolute value and compare it with the last two characters of the VAT number. If the\n            // same, then it is a valid traditional check digit. However, even then the number must fit within\n            // certain specified ranges.\n            checkDigit = Math.abs(checkDigit);\n            if (checkDigit === +vatNum.slice(7, 9) && no < 9990001 && (no < 100000 || no > 999999) && (no < 9490001 || no > 9700000)) return true;\n\n            // Now try the new method by subtracting 55 from the check digit if we can - else add 42\n            if (checkDigit >= 55)\n                checkDigit = checkDigit - 55;\n            else\n                checkDigit = checkDigit + 42;\n            expect = +vatNum.slice(7, 9);\n            return !!(checkDigit === expect && no > 1000000);\n        },\n        croatia: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Croatian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n            var product = 10;\n            var sum = 0;\n\n            for (var i = 0; i < 10; i++) {\n\n                // Extract the next digit and implement the algorithm\n                sum = (+vatNum.charAt(i) + product) % 10;\n                if (sum === 0) {\n                    sum = 10\n                }\n\n                product = (2 * sum) % 11;\n            }\n\n            // Now check that we have the right check digit\n            expect = +vatNum.slice(10, 11);\n            return (product + expect) % 10 === 1;\n        },\n        hungary: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Hungarian VAT number.\n\n            var total = 0;\n            var multipliers = [9, 7, 3, 1, 9, 7, 3];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 7; i++) total += +vatNum.charAt(i) * multipliers[i];\n\n            // Establish check digit.\n            total = 10 - total % 10;\n            if (total === 10) total = 0;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vatNum.slice(7, 8);\n            return total === expect;\n        },\n        ireland: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of an Irish VAT number.\n\n            var total = 0;\n            var multipliers = [8, 7, 6, 5, 4, 3, 2];\n\n            // If the code is type 1 format, we need to convert it to the new before performing the validation.\n            if (/^\\d[A-Z\\*\\+]/.test(vatNum)) {\n                vatNum = \"0\" + vatNum.substring(2, 7) + vatNum.substring(0, 1) + vatNum.substring(7, 8);\n            }\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 7; i++) {\n                total += +vatNum.charAt(i) * multipliers[i];\n            }\n\n            // If the number is type 3 then we need to include the trailing A or H in the calculation\n            if (/^\\d{7}[A-Z][AH]$/.test(vatNum)) {\n                // Add in a multiplier for the character A (1*9=9) or H (8*9=72)\n                if (vatNum.charAt(8) === 'H') {\n                    total += 72;\n                } else {\n                    total += 9;\n                }\n            }\n\n            // Establish check digit using modulus 23, and translate to char. equivalent.\n            total = total % 23;\n            if (total === 0) {\n                total = \"W\";\n            } else {\n                total = String.fromCharCode(total + 64);\n            }\n\n            // Compare it with the eighth character of the VAT number. If it's the same, then it's valid.\n            expect = vatNum.slice(7, 8);\n            return total === expect;\n        },\n        italy: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of an Italian VAT number.\n\n            var total = 0;\n            var multipliers = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2];\n            var temp;\n\n            // The last three digits are the issuing office, and cannot exceed more 201, unless 999 or 888\n            if (+vatNum.slice(0, 7) === 0) {\n                return false;\n            }\n\n            temp = +vatNum.slice(7, 10);\n            if ((temp < 1) || (temp > 201) && temp !== 999 && temp !== 888) {\n                return false;\n            }\n\n            // Extract the next digit and multiply by the appropriate\n            for (var i = 0; i < 10; i++) {\n                temp = +vatNum.charAt(i) * multipliers[i];\n                if (temp > 9)\n                    total += Math.floor(temp / 10) + temp % 10;\n                else\n                    total += temp;\n            }\n\n            // Establish check digit.\n            total = 10 - total % 10;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vatNum.slice(10, 11);\n            return total === expect;\n        },\n        latvia: function (vatNum) {\n            var total;\n            var multipliers;\n            var expect;\n\n            // Checks the check digits of a Lithuanian VAT number.\n\n            // 9 character VAT numbers are for legal persons\n            if (vatNum.length === 9) {\n\n                // 8th character must be one\n                if (!(/^\\d{7}1/).test(vatNum)) return false;\n\n                // Extract the next digit and multiply by the counter+1.\n                total = 0;\n                for (var i = 0; i < 8; i++) {\n                    total += +vatNum.charAt(i) * (i + 1);\n                }\n\n                // Can have a double check digit calculation!\n                if (total % 11 === 10) {\n                    multipliers = [3, 4, 5, 6, 7, 8, 9, 1];\n                    total = 0;\n                    for (var j = 0; j < 8; j++) {\n                        total += +vatNum.charAt(j) * multipliers[j];\n                    }\n                }\n\n                // Establish check digit.\n                total = total % 11;\n                if (total === 10) {\n                    total = 0;\n                }\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                expect = +vatNum.slice(8, 9);\n                return total === expect;\n            }\n\n            // 12 character VAT numbers are for temporarily registered taxpayers\n            else {\n\n                // 11th character must be one\n                if (!(/^\\d{10}1/).test(vatNum)) return false;\n\n                // Extract the next digit and multiply by the counter+1.\n                total = 0;\n                multipliers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2];\n                for (var k = 0; k < 11; k++) {\n                    total += +vatNum.charAt(k) * multipliers[k];\n                }\n\n                // Can have a double check digit calculation!\n                if (total % 11 === 10) {\n                    multipliers = [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4];\n                    total = 0;\n                    for (var l = 0; l < 11; l++) {\n                        total += +vatNum.charAt(l) * multipliers[l];\n                    }\n                }\n\n                // Establish check digit.\n                total = total % 11;\n                if (total === 10) {\n                    total = 0;\n                }\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                expect = +vatNum.slice(11, 12);\n                return total === expect;\n            }\n        },\n        lithunia: function (vatNum) {\n            var expect = +vatNum.slice(6, 8);\n            var checkDigit = +vatNum.slice(0, 6) % 89;\n            // Checks the check digits of a Luxembourg VAT number.\n\n            return checkDigit === expect;\n        },\n        luxembourg: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Latvian VAT number.\n\n            // Differentiate between legal entities and natural bodies. For the latter we simply check that\n            // the first six digits correspond to valid DDMMYY dates.\n            if ((/^[0-3]/).test(vatNum)) {\n                return !!(/^[0-3][0-9][0-1][0-9]/).test(vatNum);\n            } else {\n\n                var total = 0;\n                var multipliers = [9, 1, 4, 8, 3, 10, 2, 5, 7, 6];\n\n                // Extract the next digit and multiply by the counter.\n                for (var i = 0; i < 10; i++) total += +vatNum.charAt(i) * multipliers[i];\n\n                // Establish check digits by getting modulus 11.\n                if (total % 11 === 4 && vatNum[0] === 9) total = total - 45;\n                if (total % 11 === 4)\n                    total = 4 - total % 11;\n                else if (total % 11 > 4)\n                    total = 14 - total % 11;\n                else if (total % 11 < 4)\n                    total = 3 - total % 11;\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                expect = +vatNum.slice(10, 11);\n                return total === expect;\n            }\n        },\n        malta: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Maltese VAT number.\n\n            var total = 0;\n            var multipliers = [3, 4, 6, 7, 8, 9];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 6; i++) total += +vatNum.charAt(i) * multipliers[i];\n\n            // Establish check digits by getting modulus 37.\n            total = 37 - total % 37;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vatNum.slice(6, 8);\n            return total === expect;\n        },\n        netherlands: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Dutch VAT number.\n\n            var total = 0;\n            var multipliers = [9, 8, 7, 6, 5, 4, 3, 2];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) total += +vatNum.charAt(i) * multipliers[i];\n\n            // Establish check digits by getting modulus 11.\n            total = total % 11;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vatNum.slice(8, 9);\n            return total === expect;\n        },\n        norway: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Norwegian VAT number.\n            // See http://www.brreg.no/english/coordination/number.html\n\n            var total = 0;\n            var multipliers = [3, 2, 7, 6, 5, 4, 3, 2];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) total += +vatNum.charAt(i) * multipliers[i];\n\n            // Establish check digits by getting modulus 11. Check digits > 9 are invalid\n            total = 11 - total % 11;\n            if (total === 11) {\n                total = 0;\n            }\n            if (total < 10) {\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                expect = +vatNum.slice(8, 9);\n                return total === expect;\n            }\n        },\n        poland: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Polish VAT number.\n\n            var total = 0;\n            var multipliers = [6, 5, 7, 2, 3, 4, 5, 6, 7];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 9; i++) total += +vatNum.charAt(i) * multipliers[i];\n\n            // Establish check digits subtracting modulus 11 from 11.\n            total = total % 11;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vatNum.slice(9, 10);\n            return total === expect;\n        },\n        portugal: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Portugese VAT number.\n\n            var total = 0;\n            var multipliers = [9, 8, 7, 6, 5, 4, 3, 2];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) total += +vatNum.charAt(i) * multipliers[i];\n\n            // Establish check digits subtracting modulus 11 from 11.\n            total = 11 - total % 11;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vatNum.slice(8, 9);\n            return total === expect;\n        },\n        romania: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Romanian VAT number.\n\n            var multipliers = [7, 5, 3, 2, 1, 7, 5, 3, 2];\n\n            // Extract the next digit and multiply by the counter.\n            var vatLength = vatNum.length;\n            multipliers = multipliers.slice(10 - vatLength);\n            var total = 0;\n            for (var i = 0; i < vatNum.length - 1; i++) {\n                total += +vatNum.charAt(i) * multipliers[i];\n            }\n\n            // Establish check digits by getting modulus 11.\n            total = (10 * total) % 11;\n            if (total === 10) total = 0;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vatNum.slice(vatNum.length - 1, vatNum.length);\n            return total === expect;\n        },\n        serbia: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Serbian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n            var product = 10;\n            var sum = 0;\n            var checkDigit;\n\n            for (var i = 0; i < 8; i++) {\n\n                // Extract the next digit and implement the algorithm\n                sum = (+vatNum.charAt(i) + product) % 10;\n                if (sum === 0) {\n                    sum = 10\n                }\n                product = (2 * sum) % 11;\n            }\n\n            // Now check that we have the right check digit\n            expect = 1;\n            checkDigit = (product + +vatNum.slice(8, 9)) % 10;\n            return checkDigit === expect;\n        },\n        russia: function (vatNum) {\n            var expect;\n            var expect2;\n\n            // Checks the check digits of a Russian INN number\n            // See http://russianpartner.biz/test_inn.html for algorithm\n\n            // 10 digit INN numbers\n            if (vatNum.length === 10) {\n                var total = 0;\n                var multipliers = [2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\n                for (var i = 0; i < 10; i++) {\n                    total += +vatNum.charAt(i) * multipliers[i];\n                }\n\n                total = total % 11;\n                if (total > 9) {\n                    total = total % 10\n                }\n\n                // Compare it with the last character of the VAT number. If it is the same, then it's valid\n                expect = +vatNum.slice(9, 10);\n                return total === expect;\n\n                // 12 digit INN numbers\n            } else if (vatNum.length === 12) {\n                var total1 = 0;\n                var multipliers1 = [7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\n                var total2 = 0;\n                var multipliers2 = [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\n\n                for (var j = 0; j < 11; j++) {\n                    total1 += +vatNum.charAt(j) * multipliers1[j];\n                }\n\n                total1 = total1 % 11;\n                if (total1 > 9) {\n                    total1 = total1 % 10\n                }\n\n                for (var k = 0; k < 11; k++) {\n                    total2 += +vatNum.charAt(k) * multipliers2[k];\n                }\n\n                total2 = total2 % 11;\n                if (total2 > 9) {\n                    total2 = total2 % 10\n                }\n\n                // Compare the first check with the 11th character and the second check with the 12th and last\n                // character of the VAT number. If they're both the same, then it's valid\n                expect = +vatNum.slice(10, 11);\n                expect2 = +vatNum.slice(11, 12);\n                return (expect) && (expect2);\n            }\n        },\n        sweden: function (vatNum) {\n            var expect;\n\n            // Calculate R where R = R1 + R3 + R5 + R7 + R9, and Ri = INT(Ci/5) + (Ci*2) modulo 10\n            var R = 0;\n            var digit;\n            for (var i = 0; i < 9; i = i + 2) {\n                digit = +vatNum.charAt(i);\n                R += Math.floor(digit / 5) + ((digit * 2) % 10);\n            }\n\n            // Calculate S where S = C2 + C4 + C6 + C8\n            var S = 0;\n            for (var j = 1; j < 9; j = j + 2) {\n                S += +vatNum.charAt(j);\n            }\n\n            var checkDigit = (10 - (R + S) % 10) % 10;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vatNum.slice(9, 10);\n\n            return checkDigit === expect;\n        },\n        slovenia: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Slovenian VAT number.\n\n            var total = 0;\n            var multipliers = [8, 7, 6, 5, 4, 3, 2];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 7; i++) total += +vatNum.charAt(i) * multipliers[i];\n\n            // Establish check digits using modulus 11\n            total = 11 - total % 11;\n            if (total === 10) {\n                total = 0;\n            }\n\n            // Compare the number with the last character of the VAT number. If it is the\n            // same, then it's a valid check digit.\n            expect = +vatNum.slice(7, 8);\n            return !!(total !== 11 && total === expect);\n        },\n        slovakia_republic: function (vatNum) {\n            var expect = 0;\n            var checkDigit = (vatNum % 11);\n            // Checks the check digits of a Slovakian VAT number.\n            // Check that the modulus of the whole VAT number is 0 - else error\n            return checkDigit === expect;\n        }\n    };\n\n    if (typeof module === 'object' && module.exports) module.exports = exports;\n\n    return exports;\n})();"],"sourceRoot":"/source/"}