{"version":3,"sources":["jsvat.js"],"names":["jsvat","COUNTRIES","_validateRegex","vat","regex","test","_validateRules","countryName","parsedNum","exec","number","_validate","result","getClearVAT","toString","toUpperCase","replace","_makeArr","Array","isArray","exports","config","austria","belgium","bulgaria","croatia","cyprus","czech_republic","denmark","estonia","europe","finland","france","germany","greece","hungary","ireland","italy","latvia","lithunia","luxembourg","malta","netherlands","norway","poland","portugal","romania","russia","serbia","slovakia_republic","slovenia","spain","sweden","switzerland","united_kingdom","checkVAT","isDetailed","isValid","countries","hasOwnProperty","regexArr","i","length","push","module","temp","expect","total","charAt","CONDITIONS","multipliers","Math","floor","slice","CALCULATIONS","check","RULES","checkNineLengthVat","j","isPhysicalPerson","month","k","physical","substr","isForeigner","l","foreigner","miscellaneousVAT","m","miscellaneous","String","fromCharCode","product","sum","additional","lookup","substring","checkDigit","med","alt","vatLength","expect2","m_1","total1","total2","m_2","m_3","tempnumber","digit","R","S","no","abs"],"mappings":"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","file":"jsvat.min.js","sourcesContent":["var jsvat = (function(COUNTRIES) {\n  'use strict';\n\n  function _validateRegex(vat, regex) {\n    return regex.test(vat);\n  }\n\n  function _validateRules(vat, regex, countryName) {\n    var parsedNum = regex.exec(vat);\n    var number = parsedNum[2];\n\n    return COUNTRIES[countryName](number, countryName);\n  }\n\n  function _validate(vat, regex, countryName) {\n    var result = false;\n    if (_validateRegex(vat, regex)) {\n      result = _validateRules(vat, regex, countryName);\n    }\n    return result;\n  }\n\n  function getClearVAT(vat) {\n    return vat.toString().toUpperCase().replace(/(\\s|-|\\.)+/g, '');\n  }\n\n  function _makeArr(regex) {\n    //TODO (S.Panfilov) this is not cross-browser check\n    if (!Array.isArray(regex)) {\n      return [regex];\n    }\n\n    return regex;\n  }\n\n  var exports = {\n    //TODO (S.Panfilov) Fixed config and refactor\n    config: {\n      austria: true,\n      belgium: true,\n      bulgaria: true,\n      croatia: true,\n      cyprus: true,\n      czech_republic: true,\n      denmark: true,\n      estonia: true,\n      europe: true,\n      finland: true,\n      france: true,\n      germany: true,\n      greece: true,\n      hungary: true,\n      ireland: true,\n      italy: true,\n      latvia: true,\n      lithunia: true,\n      luxembourg: true,\n      malta: true,\n      netherlands: true,\n      norway: true,\n      poland: true,\n      portugal: true,\n      romania: true,\n      russia: true,\n      serbia: true,\n      slovakia_republic: true,\n      slovenia: true,\n      spain: true,\n      sweden: true,\n      switzerland: true,\n      united_kingdom: true\n    },\n    checkVAT: function(vat, isDetailed) {\n      if (!vat) return false;\n\n      vat = getClearVAT(vat);\n\n      var result = {\n        isValid: false,\n        countries: []\n      };\n\n      for (var countryName in COUNTRIES) {\n        if (COUNTRIES.hasOwnProperty(countryName)) {\n\n          //Make sure country check not skipped in config\n          if (exports[countryName] && exports[countryName] !== false) {\n\n            var regexArr = _makeArr(COUNTRIES[countryName].regex);\n\n            for (var i = 0; i < regexArr.length; i++) {\n\n              //If once become a true, shouldn't be a false any more\n              result.isValid = (_validate(vat, regexArr[i], countryName)) ? true : result.isValid;\n\n              if (result.isValid) {\n                //If not detailed just return bool and exit\n                if (!isDetailed) {\n                  return result.isValid\n                } else {\n                  //if detailed, should fill array of countries\n                  result.push(countryName);\n                }\n              }\n            }\n\n          }\n        }\n      }\n\n      return isDetailed ? result : result.isValid;\n\n    }\n  };\n\n\n  //Support of node.js\n  if (typeof module === 'object' && module.exports) module.exports = exports;\n\n  return exports;\n})(COUNTRIES);\n'use strict';\n\nvar austria = function(vat, countryName) {\n  var total = 0;\n  var temp;\n  var expect;\n\n  for (var i = 0; i < 7; i++) {\n    temp = vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n    if (temp > 9)\n      total += Math.floor(temp / 10) + temp % 10;\n    else\n      total += temp;\n  }\n\n  total = 10 - (total + 4) % 10;\n  if (total === 10) total = 0;\n\n  expect = +vat.slice(7, 8);\n\n  return total === expect;\n};\nCALCULATIONS.belgium = function(vat) {\n  var expect;\n\n  if (vat.length === 9) {\n    vat = '0' + vat;\n  }\n\n  if (+vat.slice(1, 2) === 0) return false;\n\n  var check = (97 - +vat.slice(0, 8) % 97);\n  expect = +vat.slice(8, 10);\n  return check === expect;\n};\nRULES.belgium = {\n  \"regex\": \"/^(BE)(0?\\\\d{9})$/\"\n};\n'use strict';\n\nvar bulgaria = function(vat, countryName) {\n  var checkNineLengthVat = function() {\n    var total = 0;\n    var temp;\n    var expect;\n\n    temp = 0;\n    for (var i = 0; i < 8; i++) {\n      temp += +vat.charAt(i) * (i + 1);\n    }\n\n    total = temp % 11;\n    if (total !== 10) {\n      expect = +vat.slice(8);\n      return total === expect;\n    }\n\n    temp = 0;\n    for (var j = 0; j < 8; j++) {\n      temp += +vat.charAt(j) * (j + 3);\n    }\n\n    total = temp % 11;\n    if (total === 10) total = 0;\n    expect = +vat.slice(8);\n\n    return total === expect;\n  };\n\n  var isPhysicalPerson = function() {\n    var total = 0;\n    // 10 digit VAT code - see if it relates to a standard physical person\n    if ((/^\\d\\d[0-5]\\d[0-3]\\d\\d{4}$/).test(vat)) {\n      // Check month\n      var month = +vat.slice(2, 4);\n      if ((month > 0 && month < 13) || (month > 20 && month < 33) || (month > 40 && month < 53)) {\n\n        total = 0;\n        for (var k = 0; k < 9; k++) {\n          total += +vat.charAt(k) * CONDITIONS[countryName].multipliers.physical[k];\n        }\n        // Establish check digit.\n        total = total % 11;\n        if (total === 10) total = 0;\n\n        // Check to see if the check digit given is correct, If not, try next type of person\n        if (total === +vat.substr(9, 1)) return true;\n      }\n    }\n\n    return false;\n\n  };\n\n  // It doesn't relate to a standard physical person - see if it relates to a foreigner.\n  var isForeigner = function() {\n    var total = 0;\n    // Extract the next digit and multiply by the counter.\n    for (var l = 0; l < 9; l++) {\n      total += +vat.charAt(l) * CONDITIONS[countryName].multipliers.foreigner[l];\n    }\n\n    // Check to see if the check digit given is correct, If not, try next type of person\n    if (total % 10 === +vat.substr(9, 1)) {\n      return true;\n    }\n  };\n\n  var miscellaneousVAT = function() {\n    var total = 0;\n    // Finally, if not yet identified, see if it conforms to a miscellaneous VAT number\n\n    for (var m = 0; m < 9; m++) {\n      total += +vat.charAt(m) * CONDITIONS[countryName].multipliers.miscellaneous[m];\n    }\n\n    // Establish check digit.\n    total = 11 - total % 11;\n    if (total === 10) return false;\n    if (total === 11) total = 0;\n\n    // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n    expect = +vat.substr(9, 1);\n    return total === expect;\n  };\n\n  if (vat.length === 9) {\n    return checkNineLengthVat();\n  } else {\n    return isPhysicalPerson() || isForeigner() || miscellaneousVAT();\n  }\n\n};\n'use strict';\n\nvar cyprus = function(vat) {\n  var total = 0;\n  var expect;\n\n  // Not allowed to start with '12'\n  if (+vat.slice(0, 2) === 12) return false;\n\n  // Extract the next digit and multiply by the counter.\n\n  for (var i = 0; i < 8; i++) {\n    var temp = +vat.charAt(i);\n    if (i % 2 === 0) {\n      switch (temp) {\n        case 0:\n          temp = 1;\n          break;\n        case 1:\n          temp = 0;\n          break;\n        case 2:\n          temp = 5;\n          break;\n        case 3:\n          temp = 7;\n          break;\n        case 4:\n          temp = 9;\n          break;\n        default:\n          temp = temp * 2 + 3;\n      }\n    }\n    total += temp;\n  }\n\n  // Establish check digit using modulus 26, and translate to char. equivalent.\n  total = total % 26;\n  total = String.fromCharCode(total + 65);\n\n  // Check to see if the check digit given is correct\n  expect = vat.substr(8, 1);\n  return total === expect;\n};\n'use strict';\n\nvar croatia = function(vat) {\n  var expect;\n\n  // Checks the check digits of a Croatian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n  var product = 10;\n  var sum = 0;\n\n  for (var i = 0; i < 10; i++) {\n\n    // Extract the next digit and implement the algorithm\n    sum = (+vat.charAt(i) + product) % 10;\n    if (sum === 0) {\n      sum = 10;\n    }\n\n    product = (2 * sum) % 11;\n  }\n\n  // Now check that we have the right check digit\n  expect = +vat.slice(10, 11);\n  return (product + expect) % 10 === 1;\n};\nvar czech_republic = function(vat, countryName) {\n  var total = 0;\n  var expect;\n\n  // Legal entities\n  if (CONDITIONS[countryName].additional[0].test(vat)) {\n\n    // Extract the next digit and multiply by the counter.\n    for (var i = 0; i < 7; i++) {\n      total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n    }\n\n    // Establish check digit.\n    total = 11 - total % 11;\n    if (total === 10) total = 0;\n    if (total === 11) total = 1;\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    expect = +vat.slice(7, 8);\n    return total === expect;\n  }\n\n  // Individuals type 2\n  else if (CONDITIONS[countryName].additional[2].test(vat)) {\n\n    // Extract the next digit and multiply by the counter.\n    for (var j = 0; j < 7; j++) {\n      total += +vat.charAt(j + 1) * CONDITIONS[countryName].multipliers[j];\n    }\n\n    // Establish check digit.\n    total = 11 - total % 11;\n    if (total === 10) total = 0;\n    if (total === 11) total = 1;\n\n    // Convert calculated check digit according to a lookup table;\n    expect = +vat.slice(8, 9);\n    return CONDITIONS[countryName].lookup[total - 1] === expect;\n  }\n\n  // Individuals type 3\n  else if (CONDITIONS[countryName].additional[3].test(vat)) {\n    var temp = +vat.slice(0, 2) + vat.slice(2, 4) + vat.slice(4, 6) + vat.slice(6, 8) + vat.slice(8);\n    expect = +vat % 11 === 0;\n    return !!(temp % 11 === 0 && expect);\n  }\n\n  // else error\n  return false;\n};\n'use strict';\n\nvar denmark = function(vat, countryName) {\n  var total = 0;\n\n  for (var i = 0; i < 8; i++) {\n    total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n  }\n\n  return total % 11 === 0;\n};\n'use strict';\n\nvar estonia = function(vat, countryName) {\n  var total = 0;\n  var expect;\n\n  // Extract the next digit and multiply by the counter.\n  for (var i = 0; i < 8; i++) {\n    total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n  }\n\n  // Establish check digits using modulus 10.\n  total = 10 - total % 10;\n  if (total === 10) total = 0;\n\n  // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n  expect = +vat.slice(8, 9);\n  return total === expect;\n};\n'use strict';\n\nvar europe = function() {\n  //TODO (S.Panfilov) wtf?\n  // We know little about EU numbers apart from the fact that the first 3 digits represent the\n  // country, and that there are nine digits in total.\n  return true;\n};\n'use strict';\n\nvar finland = function(vat, countryName) {\n  var total = 0;\n  var expect;\n\n  // Extract the next digit and multiply by the counter.\n  for (var i = 0; i < 7; i++) total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n\n  // Establish check digit.\n  total = 11 - total % 11;\n  if (total > 9) {\n    total = 0;\n  }\n\n  // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n  expect = +vat.slice(7, 8);\n  return total === expect;\n};\nvar france = function(vat) {\n  var total;\n  var expect;\n\n  // Checks the check digits of a French VAT number.\n  if (!(/^\\d{11}$/).test(vat)) {\n    return true;\n  }\n\n  // Extract the last nine digits as an integer.\n  total = +vat.substring(2);\n\n  // Establish check digit.\n  total = (total * 100 + 12) % 97;\n\n  // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n  expect = +vat.slice(0, 2);\n  return total === expect;\n};\n'use strict';\n\nvar greece = function(vat, countryName) {\n  var total = 0;\n  var expect;\n\n  //eight character numbers should be prefixed with an 0.\n  if (vat.length === 8) {\n    vat = '0' + vat;\n  }\n\n  // Extract the next digit and multiply by the counter.\n  for (var i = 0; i < 8; i++) {\n    total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n  }\n\n  // Establish check digit.\n  total = total % 11;\n  if (total > 9) {\n    total = 0;\n  }\n\n  // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n  expect = +vat.slice(8, 9);\n  return total === expect;\n};\n'use strict';\n\nvar germany = function(vat) {\n  // Checks the check digits of a German VAT number.\n  var product = 10;\n  var sum = 0;\n  var checkDigit = 0;\n  var expect;\n\n  for (var i = 0; i < 8; i++) {\n\n    // Extract the next digit and implement peculiar algorithm!.\n    sum = (+vat.charAt(i) + product) % 10;\n    if (sum === 0) {\n      sum = 10;\n    }\n    product = (2 * sum) % 11;\n  }\n\n  // Establish check digit.\n  if (11 - product === 10) {\n    checkDigit = 0;\n  } else {\n    checkDigit = 11 - product;\n  }\n\n  // Compare it with the last two characters of the VAT number. If the same, then it is a valid\n  // check digit.\n  expect = +vat.slice(8, 9);\n  return checkDigit === expect;\n};\n'use strict';\n\nvar hungary = function(vat, countryName) {\n  var total = 0;\n  var expect;\n\n  // Extract the next digit and multiply by the counter.\n  for (var i = 0; i < 7; i++) {\n    total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n  }\n\n  // Establish check digit.\n  total = 10 - total % 10;\n  if (total === 10) total = 0;\n\n  // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n  expect = +vat.slice(7, 8);\n  return total === expect;\n};\n'use strict';\n\nvar ireland = function(vat, countryName) {\n  var total = 0;\n  var expect;\n\n  // If the code is type 1 format, we need to convert it to the new before performing the validation.\n  if (/^\\d[A-Z\\*\\+]/.test(vat)) {\n    vat = '0' + vat.substring(2, 7) + vat.substring(0, 1) + vat.substring(7, 8);\n  }\n\n  // Extract the next digit and multiply by the counter.\n  for (var i = 0; i < 7; i++) {\n    total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n  }\n\n  // If the number is type 3 then we need to include the trailing A or H in the calculation\n  if (/^\\d{7}[A-Z][AH]$/.test(vat)) {\n    // Add in a multiplier for the character A (1*9=9) or H (8*9=72)\n    if (vat.charAt(8) === 'H') {\n      total += 72;\n    } else {\n      total += 9;\n    }\n  }\n\n  // Establish check digit using modulus 23, and translate to char. equivalent.\n  total = total % 23;\n  if (total === 0) {\n    total = 'W';\n  } else {\n    total = String.fromCharCode(total + 64);\n  }\n\n  // Compare it with the eighth character of the VAT number. If it's the same, then it's valid.\n  expect = vat.slice(7, 8);\n  return total === expect;\n};\n'use strict';\nvar italy = function(vat, countryName) {\n  var total = 0;\n  var temp;\n  var expect;\n\n  // The last three digits are the issuing office, and cannot exceed more 201, unless 999 or 888\n  if (+vat.slice(0, 7) === 0) {\n    return false;\n  }\n\n  temp = +vat.slice(7, 10);\n  if ((temp < 1) || (temp > 201) && temp !== 999 && temp !== 888) {\n    return false;\n  }\n\n  // Extract the next digit and multiply by the appropriate\n  for (var i = 0; i < 10; i++) {\n    temp = +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n    if (temp > 9)\n      total += Math.floor(temp / 10) + temp % 10;\n    else\n      total += temp;\n  }\n\n  // Establish check digit.\n  total = 10 - total % 10;\n  if (total > 9) {\n    total = 0;\n  }\n\n  // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n  expect = +vat.slice(10, 11);\n  return total === expect;\n};\n'use strict';\nvar latvia = function(vat, countryName) {\n  var total = 0;\n  var expect;\n\n  // Differentiate between legal entities and natural bodies. For the latter we simply check that\n  // the first six digits correspond to valid DDMMYY dates.\n  if ((/^[0-3]/).test(vat)) {\n    return !!(/^[0-3][0-9][0-1][0-9]/).test(vat);\n  } else {\n\n    // Extract the next digit and multiply by the counter.\n    for (var i = 0; i < 10; i++) {\n      total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n    }\n\n    // Establish check digits by getting modulus 11.\n    if (total % 11 === 4 && vat[0] === 9) total = total - 45;\n    if (total % 11 === 4)\n      total = 4 - total % 11;\n    else if (total % 11 > 4)\n      total = 14 - total % 11;\n    else if (total % 11 < 4)\n      total = 3 - total % 11;\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    expect = +vat.slice(10, 11);\n    return total === expect;\n  }\n};\n'use strict';\n\nvar lithunia = function(vat, countryName) {\n  var total = 0;\n  var expect;\n\n  // 9 character VAT numbers are for legal persons\n  if (vat.length === 9) {\n\n    // 8th character must be one\n    if (!(/^\\d{7}1/).test(vat)) return false;\n\n    // Extract the next digit and multiply by the counter+1.\n    total = 0;\n    for (var i = 0; i < 8; i++) {\n      total += +vat.charAt(i) * (i + 1);\n    }\n\n    // Can have a double check digit calculation!\n    if (total % 11 === 10) {\n      total = 0;\n      for (var j = 0; j < 8; j++) {\n        total += +vat.charAt(j) * CONDITIONS[countryName].multipliers.short[j];\n      }\n    }\n\n    // Establish check digit.\n    total = total % 11;\n    if (total === 10) {\n      total = 0;\n    }\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    expect = +vat.slice(8, 9);\n    return total === expect;\n  }\n\n  // 12 character VAT numbers are for temporarily registered taxpayers\n  else {\n\n    // 11th character must be one\n    if (!(/^\\d{10}1/).test(vat)) return false;\n\n    // Extract the next digit and multiply by the counter+1.\n    total = 0;\n    for (var k = 0; k < 11; k++) {\n      total += +vat.charAt(k) * CONDITIONS[countryName].multipliers.med[k];\n    }\n\n    // Can have a double check digit calculation!\n    if (total % 11 === 10) {\n      total = 0;\n      for (var l = 0; l < 11; l++) {\n        total += +vat.charAt(l) * CONDITIONS[countryName].multipliers.alt[l];\n      }\n    }\n\n    // Establish check digit.\n    total = total % 11;\n    if (total === 10) {\n      total = 0;\n    }\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    expect = +vat.slice(11, 12);\n    return total === expect;\n  }\n};\n'use strict';\nvar luxembourg = function(vat) {\n  var expect = +vat.slice(6, 8);\n  var checkDigit = +vat.slice(0, 6) % 89;\n  // Checks the check digits of a Luxembourg VAT number.\n\n  return checkDigit === expect;\n};\n'use strict';\nvar malta = function(vat, countryName) {\n  var total = 0;\n  var expect;\n\n  // Extract the next digit and multiply by the counter.\n  for (var i = 0; i < 6; i++) {\n    total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n  }\n\n  // Establish check digits by getting modulus 37.\n  total = 37 - total % 37;\n\n  // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n  expect = +vat.slice(6, 8);\n  return total === expect;\n};\n'use strict';\nvar netherlands = function(vat, countryName) {\n  var total = 0;\n  var expect;\n\n  // Extract the next digit and multiply by the counter.\n  for (var i = 0; i < 8; i++) {\n    total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n  }\n\n  // Establish check digits by getting modulus 11.\n  total = total % 11;\n  if (total > 9) {\n    total = 0;\n  }\n\n  // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n  expect = +vat.slice(8, 9);\n  return total === expect;\n};\n'use strict';\nvar norway = function(vat, countryName) {\n  var total = 0;\n  var expect;\n  // See http://www.brreg.no/english/coordination/number.html\n\n  // Extract the next digit and multiply by the counter.\n  for (var i = 0; i < 8; i++) {\n    total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n  }\n\n  // Establish check digits by getting modulus 11. Check digits > 9 are invalid\n  total = 11 - total % 11;\n  if (total === 11) {\n    total = 0;\n  }\n  if (total < 10) {\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    expect = +vat.slice(8, 9);\n    return total === expect;\n  }\n};\n'use strict';\nvar portugal = function(vat, countryName) {\n  var total = 0;\n  var expect;\n\n  // Extract the next digit and multiply by the counter.\n  for (var i = 0; i < 8; i++) {\n    total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n  }\n\n  // Establish check digits subtracting modulus 11 from 11.\n  total = 11 - total % 11;\n  if (total > 9) {\n    total = 0;\n  }\n\n  // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n  expect = +vat.slice(8, 9);\n  return total === expect;\n};\n'use strict';\nvar poland = function(vat, countryName) {\n  var total = 0;\n  var expect;\n\n  // Extract the next digit and multiply by the counter.\n  for (var i = 0; i < 9; i++) {\n    total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n  }\n\n  // Establish check digits subtracting modulus 11 from 11.\n  total = total % 11;\n  if (total > 9) {\n    total = 0;\n  }\n\n  // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n  expect = +vat.slice(9, 10);\n  return total === expect;\n};\n'use strict';\nvar romania = function(vat, countryName) {\n  var total = 0;\n  var expect;\n\n  // Extract the next digit and multiply by the counter.\n  var vatLength = vat.length;\n  var multipliers = CONDITIONS[countryName].multipliers.slice(10 - vatLength);\n\n  for (var i = 0; i < vat.length - 1; i++) {\n    total += +vat.charAt(i) * multipliers[i];\n  }\n\n  // Establish check digits by getting modulus 11.\n  total = (10 * total) % 11;\n  if (total === 10) total = 0;\n\n  // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n  expect = +vat.slice(vat.length - 1, vat.length);\n  return total === expect;\n};\n'use strict';\n\nvar russia = function(vat, countryName) {\n  var total = 0;\n  var expect;\n  var expect2;\n\n  // Checks the check digits of a Russian INN number\n  // See http://russianpartner.biz/test_inn.html for algorithm\n\n  // 10 digit INN numbers\n  if (vat.length === 10) {\n\n    for (var i = 0; i < 10; i++) {\n      total += +vat.charAt(i) * CONDITIONS[countryName].multipliers.m_1[i];\n    }\n\n    total = total % 11;\n    if (total > 9) {\n      total = total % 10;\n    }\n\n    // Compare it with the last character of the VAT number. If it is the same, then it's valid\n    expect = +vat.slice(9, 10);\n    return total === expect;\n\n    // 12 digit INN numbers\n  } else if (vat.length === 12) {\n    var total1 = 0;\n    var total2 = 0;\n\n    for (var j = 0; j < 11; j++) {\n      total1 += +vat.charAt(j) * CONDITIONS[countryName].multipliers.m_2[j];\n    }\n\n    total1 = total1 % 11;\n    if (total1 > 9) {\n      total1 = total1 % 10;\n    }\n\n    for (var k = 0; k < 11; k++) {\n      total2 += +vat.charAt(k) * CONDITIONS[countryName].multipliers.m_3[k];\n    }\n\n    total2 = total2 % 11;\n    if (total2 > 9) {\n      total2 = total2 % 10;\n    }\n\n    // Compare the first check with the 11th character and the second check with the 12th and last\n    // character of the VAT number. If they're both the same, then it's valid\n    //expect = +vat.slice(10, 11);\n    expect = (total1 === +vat.slice(10, 11));\n    //expect2 = +vat.slice(11, 12);\n    expect2 = (total2 === +vat.slice(11, 12));\n    return (expect) && (expect2);\n  }\n};\n'use strict';\nvar serbia = function(vat) {\n  // Checks the check digits of a Serbian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n  var product = 10;\n  var sum = 0;\n  var checkDigit;\n\n  for (var i = 0; i < 8; i++) {\n\n    // Extract the next digit and implement the algorithm\n    sum = (+vat.charAt(i) + product) % 10;\n    if (sum === 0) {\n      sum = 10;\n    }\n    product = (2 * sum) % 11;\n  }\n\n  // Now check that we have the right check digit\n  var expect = 1;\n  checkDigit = (product + (+vat.slice(8, 9))) % 10;\n  return checkDigit === expect;\n};\n'use strict';\n\nvar slovakia_republic = function(vat) {\n  var expect = 0;\n  var checkDigit = (vat % 11);\n  return checkDigit === expect;\n};\n'use strict';\nvar slovenia = function(vat, countryName) {\n  var total = 0;\n  var expect;\n\n  // Extract the next digit and multiply by the counter.\n  for (var i = 0; i < 7; i++) {\n    total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n  }\n\n  // Establish check digits using modulus 11\n  total = 11 - total % 11;\n  if (total === 10) {\n    total = 0;\n  }\n\n  // Compare the number with the last character of the VAT number. If it is the\n  // same, then it's a valid check digit.\n  expect = +vat.slice(7, 8);\n  return !!(total !== 11 && total === expect);\n};\n'use strict';\n\nvar spain = function(vat, countryName) {\n  var i = 0;\n  var total = 0;\n  var temp;\n  var expect;\n\n  // National juridical entities\n  if (CONDITIONS[countryName].additional[0].test(vat)) {\n\n    // Extract the next digit and multiply by the counter.\n    for (i = 0; i < 7; i++) {\n      temp = vat.charAt(i + 1) * CONDITIONS[countryName].multipliers[i];\n      if (temp > 9)\n        total += Math.floor(temp / 10) + temp % 10;\n      else\n        total += temp;\n    }\n    // Now calculate the check digit itself.\n    total = 10 - total % 10;\n    if (total === 10) {\n      total = 0;\n    }\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    expect = +vat.slice(8, 9);\n    return total === expect;\n  }\n\n  // Juridical entities other than national ones\n  else if (CONDITIONS[countryName].additional[1].test(vat)) {\n\n    // Extract the next digit and multiply by the counter.\n    for (i = 0; i < 7; i++) {\n      temp = vat.charAt(i + 1) * CONDITIONS[countryName].multipliers[i];\n      if (temp > 9)\n        total += Math.floor(temp / 10) + temp % 10;\n      else\n        total += temp;\n    }\n\n    // Now calculate the check digit itself.\n    total = 10 - total % 10;\n    total = String.fromCharCode(total + 64);\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    expect = vat.slice(8, 9);\n    return total === expect;\n  }\n\n  // Personal number (NIF) (starting with numeric of Y or Z)\n  else if (CONDITIONS[countryName].additional[2].test(vat)) {\n    var tempnumber = vat;\n    if (tempnumber.substring(0, 1) === 'Y') tempnumber = tempnumber.replace(/Y/, '1');\n    if (tempnumber.substring(0, 1) === 'Z') tempnumber = tempnumber.replace(/Z/, '2');\n    expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+tempnumber.substring(0, 8) % 23);\n    return tempnumber.charAt(8) === expect;\n  }\n\n  // Personal number (NIF) (starting with K, L, M, or X)\n  else if (CONDITIONS[countryName].additional[3].test(vat)) {\n    expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+vat.substring(1, 8) % 23);\n    return vat.charAt(8) === expect;\n  } else return false;\n};\n'use strict';\nvar sweden = function(vat) {\n  var expect;\n\n  // Calculate R where R = R1 + R3 + R5 + R7 + R9, and Ri = INT(Ci/5) + (Ci*2) modulo 10\n  var R = 0;\n  var digit;\n  for (var i = 0; i < 9; i = i + 2) {\n    digit = +vat.charAt(i);\n    R += Math.floor(digit / 5) + ((digit * 2) % 10);\n  }\n\n  // Calculate S where S = C2 + C4 + C6 + C8\n  var S = 0;\n  for (var j = 1; j < 9; j = j + 2) {\n    S += +vat.charAt(j);\n  }\n\n  var checkDigit = (10 - (R + S) % 10) % 10;\n\n  // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n  expect = +vat.slice(9, 10);\n\n  return checkDigit === expect;\n};\n'use strict';\n\nvar switzerland = function(vat, countryName) {\n  var total = 0;\n  for (var i = 0; i < 8; i++) {\n    total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n  }\n\n  // Establish check digit.\n  total = 11 - total % 11;\n  if (total === 10) return false;\n  if (total === 11) total = 0;\n\n  // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n  expect = +vat.substr(8, 1);\n  return total === expect;\n};\n'use strict';\n\nvar united_kingdom = function(vat, countryName) {\n  var total = 0;\n  var expect;\n\n  // Government departments\n  if (vat.substr(0, 2) === 'GD') {\n    expect = 500;\n    return vat.substr(2, 3) < expect;\n  }\n\n  // Health authorities\n  if (vat.substr(0, 2) === 'HA') {\n    expect = 499;\n    return vat.substr(2, 3) > expect;\n  }\n\n  // Standard and commercial numbers\n\n\n  // 0 VAT numbers disallowed!\n  if (+vat.slice(0) === 0) return false;\n\n  // Check range is OK for modulus 97 calculation\n  var no = +vat.slice(0, 7);\n\n  // Extract the next digit and multiply by the counter.\n  for (var i = 0; i < 7; i++) {\n    total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n  }\n\n  // Old numbers use a simple 97 modulus, but new numbers use an adaptation of that (less 55). Our\n  // VAT number could use either system, so we check it against both.\n\n  // Establish check digits by subtracting 97 from total until negative.\n  var checkDigit = total;\n  while (checkDigit > 0) {\n    checkDigit = checkDigit - 97;\n  }\n\n  // Get the absolute value and compare it with the last two characters of the VAT number. If the\n  // same, then it is a valid traditional check digit. However, even then the number must fit within\n  // certain specified ranges.\n  checkDigit = Math.abs(checkDigit);\n  if (checkDigit === +vat.slice(7, 9) && no < 9990001 && (no < 100000 || no > 999999) && (no < 9490001 || no > 9700000)) return true;\n\n  // Now try the new method by subtracting 55 from the check digit if we can - else add 42\n  if (checkDigit >= 55)\n    checkDigit = checkDigit - 55;\n  else\n    checkDigit = checkDigit + 42;\n  expect = +vat.slice(7, 9);\n  return !!(checkDigit === expect && no > 1000000);\n};"],"sourceRoot":"/source/"}