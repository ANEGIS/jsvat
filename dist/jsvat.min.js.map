{"version":3,"sources":["jsvat.js"],"names":["VatChecker","_REGEXP","austria","belgium","bulgaria","switzerland","cyprus","czech_republic","germany","denmark","estonia","greece","spain_national","spain_other","spain_personal_1","spain_personal_2","eu_type","finland","france_1","france_2","france_3","france_4","uk_standard","uk_branches","uk_government","uk_health_authority","croatia","hungary","ireland_1","ireland_2","ireland_3","italy","latvia","lithunia","luxembourg","malta","netherlands","norway_not_EU","poland","portugal","romania","russia","serbia","slovenia","slovakia_republic","sweden","exports","checkVatNum","number","defCCode","vatNum","toString","toUpperCase","replace","isValid","k","console","log","hasOwnProperty","isMatch","test","parsedNum","exec","cCode","cNumber","length","checkDigitFunc","_checks","toLowerCase","at","expect","total","multipliers","temp","i","Number","charAt","Math","floor","slice","be","bg","j","month","substr","l","m","che","cy","String","fromCharCode","cz","czExp","lookup","de","product","sum","checkdigit","dk","ee","el","es","esExp","tempnumber","substring","eu","fi","fr","gb","no","checkDigit","abs","hr","hu","ie","it","lt","lu","lv","mt","nl","pl","pt","ro","VATlen","rs","ru","expect2","total1","multipliers1","total2","multipliers2","se","digit","R","S","si","sk","module"],"mappings":"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","file":"jsvat.min.js","sourcesContent":["var VatChecker = (function () {\n    'use strict';\n\n    var _REGEXP = {\n        austria: /^(AT)U(\\d{8})$/,\n        belgium: /^(BE)(0?\\d{9})$/,\n        bulgaria: /^(BG)(\\d{9,10})$/,\n        switzerland: /^(CHE)(\\d{9})(MWST)?$/,\n        cyprus: /^(CY)([0-59]\\d{7}[A-Z])$/,\n        czech_republic: /^(CZ)(\\d{8,10})(\\d{3})?$/,\n        germany: /^(DE)([1-9]\\d{8})$/,\n        denmark: /^(DK)(\\d{8})$/,\n        estonia: /^(EE)(10\\d{7})$/,\n        greece: /^(EL)(\\d{9})$/,\n        spain_national: /^(ES)([A-Z]\\d{8})$/,\n        spain_other: /^(ES)([A-HN-SW]\\d{7}[A-J])$/,\n        spain_personal_1: /^(ES)([0-9YZ]\\d{7}[A-Z])$/,\n        spain_personal_2: /^(ES)([KLMX]\\d{7}[A-Z])$/,\n        eu_type: /^(EU)(\\d{9})$/,\n        finland: /^(FI)(\\d{8})$/,\n        france_1: /^(FR)(\\d{11})$/,\n        france_2: /^(FR)([A-HJ-NP-Z]\\d{10})$/,\n        france_3: /^(FR)(\\d[A-HJ-NP-Z]\\d{9})$/,\n        france_4: /^(FR)([A-HJ-NP-Z]{2}\\d{9})$/,\n        uk_standard: /^(GB)?(\\d{9})$/,\n        uk_branches: /^(GB)?(\\d{12})$/,\n        uk_government: /^(GB)?(GD\\d{3})$/,\n        uk_health_authority: /^(GB)?(HA\\d{3})$/,\n        croatia: /^(HR)(\\d{11})$/,\n        hungary: /^(HU)(\\d{8})$/,\n        ireland_1: /^(IE)(\\d{7}[A-W])$/,\n        ireland_2: /^(IE)([7-9][A-Z\\*\\+)]\\d{5}[A-W])$/,\n        ireland_3: /^(IE)(\\d{7}[A-W][AH])$/,\n        italy: /^(IT)(\\d{11})$/,\n        latvia: /^(LV)(\\d{11})$/,\n        lithunia: /^(LT)(\\d{9}|\\d{12})$/,\n        luxembourg: /^(LU)(\\d{8})$/,\n        malta: /^(MT)([1-9]\\d{7})$/,\n        netherlands: /^(NL)(\\d{9})B\\d{2}$/,\n        norway_not_EU: /^(NO)(\\d{9})$/,\n        poland: /^(PL)(\\d{10})$/,\n        portugal: /^(PT)(\\d{9})$/,\n        romania: /^(RO)([1-9]\\d{1,9})$/,\n        russia: /^(RU)(\\d{10}|\\d{12})$/,\n        serbia: /^(RS)(\\d{9})$/,\n        slovenia: /^(SI)([1-9]\\d{7})$/,\n        slovakia_republic: /^(SK)([1-9]\\d[2346-9]\\d{7})$/,\n        sweden: /^(SE)(\\d{10}01)$/\n    };\n\n    var exports = {\n        checkVatNum: function (number) {\n            if (!number) return false;\n            var defCCode = \"GB\";\n\n            var vatNum = number.toString().toUpperCase().replace(/(\\s|-|\\.)+/g, '');\n            var isValid = false;\n\n\n            for (var k in _REGEXP) {\n                console.log(k);\n                if (_REGEXP.hasOwnProperty(k)) {\n\n                    var isMatch = _REGEXP[k].test(vatNum);\n\n                    if (isMatch) {\n                        //TODO (S.Panfilov) todo and exec should do the same, but they didn't\n                        var parsedNum = _REGEXP[k].exec(vatNum);\n\n                        var cCode = parsedNum[1];\n                        var cNumber = parsedNum[2];\n                        if (!cCode || cCode.length === 0) cCode = defCCode;\n\n                        //TODO (S.Panfilov) refactor it (should call by key from regexp)\n                        var checkDigitFunc = _checks[cCode.toLowerCase()];\n                        isValid = checkDigitFunc(cNumber);\n                        //TODO (S.Panfilov) debug\n                        //isValid = true;\n\n                        break;\n                    }\n                }\n            }\n\n            return isValid;\n        }\n    };\n\n    //TODO (S.Panfilov) debug\n    function check(vatNum) {\n\n        var total = 0;\n        var multipliers = [1, 2, 1, 2, 1, 2, 1];\n        var temp = 0;\n\n        for (var i = 0; i < 7; i++) {\n            temp = Number(vatNum.charAt(i)) * multipliers[i];\n            if (temp > 9)\n                total += Math.floor(temp / 10) + temp % 10;\n            else\n                total += temp;\n        }\n\n        total = 10 - (total + 4) % 10;\n        if (total === 10) total = 0;\n\n        //return total === vatNum.slice(7, 8);\n\n\n        return {\n            total: total,\n            expect: vatNum.slice(7, 8)\n        }\n\n    }\n\n    var _checks = {\n        at: function (vatNum) {\n            var total = 0;\n            var multipliers = [1, 2, 1, 2, 1, 2, 1];\n            var temp = 0;\n            var expect;\n\n            for (var i = 0; i < 7; i++) {\n                temp = Number(vatNum.charAt(i)) * multipliers[i];\n                if (temp > 9)\n                    total += Math.floor(temp / 10) + temp % 10;\n                else\n                    total += temp;\n            }\n\n            total = 10 - (total + 4) % 10;\n            if (total === 10) total = 0;\n\n            expect = +vatNum.slice(7, 8);\n\n            return total === expect;\n        },\n        be: function (vatNum) {\n            var expect;\n            if (vatNum.length === 9) vatNum = \"0\" + vatNum;\n            if (vatNum.slice(1, 2) === 0) return false;\n\n            return 97 - vatNum.slice(0, 8) % 97 === vatNum.slice(8, 10);\n        },\n\n        bg: function (vatNum) {\n            var expect;\n            var multipliers;\n            var temp = 0;\n            var total = 0;\n\n            if (vatNum.length === 9) {\n\n                temp = 0;\n                for (var i = 0; i < 8; i++) {\n                    temp += Number(vatNum.charAt(i)) * (i + 1);\n                }\n                total = temp % 11;\n                if (total !== 10) {\n                    expect = +vatNum.slice(8);\n                    return total === expect;\n                }\n\n                temp = 0;\n                for (var j = 0; j < 8; j++) {\n                    temp += Number(vatNum.charAt(j)) * (j + 3);\n                }\n\n                total = temp % 11;\n                if (total === 10) total = 0;\n                expect = vatNum.slice(8);\n                return total === expect;\n            }\n\n            // 10 digit VAT code - see if it relates to a standard physical person\n            if ((/^\\d\\d[0-5]\\d[0-3]\\d\\d{4}$/).test(vatNum)) {\n\n                // Check month\n                var month = Number(vatNum.slice(2, 4));\n                if ((month > 0 && month < 13) || (month > 20 && month < 33) || (month > 40 && month < 53)) {\n\n                    // Extract the next digit and multiply by the counter.\n                    multipliers = [2, 4, 8, 5, 10, 9, 7, 3, 6];\n                    total = 0;\n                    for (var k = 0; k < 9; k++) {\n                        total += Number(vatNum.charAt(k)) * multipliers[k];\n                    }\n\n                    // Establish check digit.\n                    total = total % 11;\n                    if (total === 10) total = 0;\n\n                    // Check to see if the check digit given is correct, If not, try next type of person\n                    if (total === vatNum.substr(9, 1)) return true;\n                }\n            }\n\n            // It doesn't relate to a standard physical person - see if it relates to a foreigner.\n\n            // Extract the next digit and multiply by the counter.\n            multipliers = [21, 19, 17, 13, 11, 9, 7, 3, 1];\n            total = 0;\n            for (var l = 0; l < 9; l++) {\n                total += Number(vatNum.charAt(l)) * multipliers[l];\n            }\n\n            // Check to see if the check digit given is correct, If not, try next type of person\n            if (total % 10 === vatNum.substr(9, 1)) {\n                return true;\n            }\n\n            // Finally, if not yet identified, see if it conforms to a miscellaneous VAT number\n\n            // Extract the next digit and multiply by the counter.\n            multipliers = [4, 3, 2, 7, 6, 5, 4, 3, 2];\n            total = 0;\n            for (var m = 0; m < 9; m++) {\n                total += Number(vatNum.charAt(m)) * multipliers[m];\n            }\n\n            // Establish check digit.\n            total = 11 - total % 11;\n            if (total === 10) return false;\n            if (total === 11) total = 0;\n\n            // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n            expect = vatNum.substr(9, 1);\n            return total === expect;\n        },\n\n        che: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Swiss VAT number.\n\n            // Extract the next digit and multiply by the counter.\n            var multipliers = [5, 4, 3, 2, 7, 6, 5, 4];\n            var total = 0;\n            for (var i = 0; i < 8; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n            // Establish check digit.\n            total = 11 - total % 11;\n            if (total === 10) return false;\n            if (total === 11) total = 0;\n\n            // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n            expect = vatNum.substr(8, 1);\n            return total === expect;\n        },\n\n        cy: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Cypriot VAT number.\n\n            // Not allowed to start with '12'\n            if (Number(vatNum.slice(0, 2) === 12)) return false;\n\n            // Extract the next digit and multiply by the counter.\n            var total = 0;\n            for (var i = 0; i < 8; i++) {\n                var temp = Number(vatNum.charAt(i));\n                if (i % 2 === 0) {\n                    switch (temp) {\n                        case 0:\n                            temp = 1;\n                            break;\n                        case 1:\n                            temp = 0;\n                            break;\n                        case 2:\n                            temp = 5;\n                            break;\n                        case 3:\n                            temp = 7;\n                            break;\n                        case 4:\n                            temp = 9;\n                            break;\n                        default:\n                            temp = temp * 2 + 3;\n                    }\n                }\n                total += temp;\n            }\n\n            // Establish check digit using modulus 26, and translate to char. equivalent.\n            total = total % 26;\n            total = String.fromCharCode(total + 65);\n\n            // Check to see if the check digit given is correct\n            expect = vatNum.substr(8, 1);\n            return total === expect;\n        },\n\n        cz: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Czech Republic VAT number.\n\n            var total = 0;\n            var multipliers = [8, 7, 6, 5, 4, 3, 2];\n\n            var czExp = [];\n            czExp[0] = (/^\\d{8}$/);\n            czExp[1] = (/^[0-5][0-9][0|1|5|6]\\d[0-3]\\d\\d{3}$/);\n            czExp[2] = (/^6\\d{8}$/);\n            czExp[3] = (/^\\d{2}[0-3|5-8]\\d[0-3]\\d\\d{4}$/);\n\n            // Legal entities\n            if (czExp[0].test(vatNum)) {\n\n                // Extract the next digit and multiply by the counter.\n                for (var i = 0; i < 7; i++) {\n                    total += Number(vatNum.charAt(i)) * multipliers[i];\n                }\n\n                // Establish check digit.\n                total = 11 - total % 11;\n                if (total === 10) total = 0;\n                if (total === 11) total = 1;\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                expect = vatNum.slice(7, 8);\n                return total === expect;\n            }\n\n            // Individuals type 1\n            else if (czExp[1].test(vatNum)) {\n                if (temp = Number(vatNum.slice(0, 2)) > 53) return false;\n                return true;\n            }\n\n            // Individuals type 2\n            else if (czExp[2].test(vatNum)) {\n\n                // Extract the next digit and multiply by the counter.\n                for (var j = 0; j < 7; j++) {\n                    total += Number(vatNum.charAt(j + 1)) * multipliers[j];\n                }\n\n                // Establish check digit.\n                total = 11 - total % 11;\n                if (total === 10) total = 0;\n                if (total === 11) total = 1;\n\n                // Convert calculated check digit according to a lookup table;\n                var lookup = [8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 10];\n                expect = vatNum.slice(8, 9);\n                return lookup[total - 1] === expect;\n            }\n\n            // Individuals type 3\n            else if (czExp[3].test(vatNum)) {\n                var temp = Number(vatNum.slice(0, 2)) + Number(vatNum.slice(2, 4)) + Number(vatNum.slice(4, 6)) + Number(vatNum.slice(6, 8)) + Number(vatNum.slice(8));\n                expect = Number(vatNum) % 11 === 0;\n                return !!(temp % 11 === 0 && expect);\n            }\n\n            // else error\n            return false;\n        },\n\n        de: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a German VAT number.\n\n            var product = 10;\n            var sum = 0;\n            var checkdigit = 0;\n            for (var i = 0; i < 8; i++) {\n\n                // Extract the next digit and implement peculiar algorithm!.\n                sum = (Number(vatNum.charAt(i)) + product) % 10;\n                if (sum === 0) {\n                    sum = 10\n                }\n                product = (2 * sum) % 11;\n            }\n\n            // Establish check digit.\n            if (11 - product === 10) {\n                checkdigit = 0\n            } else {\n                checkdigit = 11 - product\n            }\n\n            // Compare it with the last two characters of the VAT number. If the same, then it is a valid\n            // check digit.\n            expect = vatNum.slice(8, 9);\n            return checkdigit === expect;\n        },\n\n        dk: function (vatNum) {\n            var expect = 0;\n\n            // Checks the check digits of a Danish VAT number.\n\n            var total = 0;\n            var multipliers = [2, 7, 6, 5, 4, 3, 2, 1];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n            // Establish check digit.\n            total = total % 11;\n\n            // The remainder should be 0 for it to be valid..\n            return total === expect;\n        },\n\n        ee: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of an Estonian VAT number.\n\n            var total = 0;\n            var multipliers = [3, 7, 1, 3, 7, 1, 3, 7];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n            // Establish check digits using modulus 10.\n            total = 10 - total % 10;\n            if (total === 10) total = 0;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = vatNum.slice(8, 9);\n            return total === expect;\n        },\n\n        el: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Greek VAT number.\n\n            var total = 0;\n            var multipliers = [256, 128, 64, 32, 16, 8, 4, 2];\n\n            //eight character numbers should be prefixed with an 0.\n            if (vatNum.length === 8) {\n                vatNum = \"0\" + vatNum\n            }\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n            // Establish check digit.\n            total = total % 11;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = vatNum.slice(8, 9);\n            return total === expect;\n        },\n\n        es: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Spanish VAT number.\n\n            var total = 0;\n            var temp = 0;\n            var multipliers = [2, 1, 2, 1, 2, 1, 2];\n            var esExp = [];\n            esExp[0] = (/^[A-H|J|U|V]\\d{8}$/);\n            esExp[1] = (/^[A-H|N-S|W]\\d{7}[A-J]$/);\n            esExp[2] = (/^[0-9|Y|Z]\\d{7}[A-Z]$/);\n            esExp[3] = (/^[K|L|M|X]\\d{7}[A-Z]$/);\n            var i = 0;\n\n            // National juridical entities\n            if (esExp[0].test(vatNum)) {\n\n                // Extract the next digit and multiply by the counter.\n                for (i = 0; i < 7; i++) {\n                    temp = Number(vatNum.charAt(i + 1)) * multipliers[i];\n                    if (temp > 9)\n                        total += Math.floor(temp / 10) + temp % 10;\n                    else\n                        total += temp;\n                }\n                // Now calculate the check digit itself.\n                total = 10 - total % 10;\n                if (total === 10) {\n                    total = 0;\n                }\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                expect = vatNum.slice(8, 9);\n                return total === expect;\n            }\n\n            // Juridical entities other than national ones\n            else if (esExp[1].test(vatNum)) {\n\n                // Extract the next digit and multiply by the counter.\n                for (i = 0; i < 7; i++) {\n                    temp = Number(vatNum.charAt(i + 1)) * multipliers[i];\n                    if (temp > 9)\n                        total += Math.floor(temp / 10) + temp % 10;\n                    else\n                        total += temp;\n                }\n\n                // Now calculate the check digit itself.\n                total = 10 - total % 10;\n                total = String.fromCharCode(total + 64);\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                expect = vatNum.slice(8, 9);\n                return total === expect;\n            }\n\n            // Personal number (NIF) (starting with numeric of Y or Z)\n            else if (esExp[2].test(vatNum)) {\n                var tempnumber = vatNum;\n                if (tempnumber.substring(0, 1) === 'Y') tempnumber = tempnumber.replace(/Y/, \"1\");\n                if (tempnumber.substring(0, 1) === 'Z') tempnumber = tempnumber.replace(/Z/, \"2\");\n                expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(Number(tempnumber.substring(0, 8)) % 23);\n                return tempnumber.charAt(8) === expect;\n            }\n\n            // Personal number (NIF) (starting with K, L, M, or X)\n            else if (esExp[3].test(vatNum)) {\n                expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(Number(vatNum.substring(1, 8)) % 23);\n                return vatNum.charAt(8) === expect;\n            }\n\n            else return false;\n        },\n\n        eu: function () {\n\n            // We know little about EU numbers apart from the fact that the first 3 digits represent the\n            // country, and that there are nine digits in total.\n            return true;\n        },\n\n        fi: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Finnish VAT number.\n\n            var total = 0;\n            var multipliers = [7, 9, 10, 5, 8, 4, 2];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 7; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n            // Establish check digit.\n            total = 11 - total % 11;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = vatNum.slice(7, 8);\n            return total === expect;\n        },\n\n        fr: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a French VAT number.\n\n            if (!(/^\\d{11}$/).test(vatNum)) {\n                return true;\n            }\n\n            // Extract the last nine digits as an integer.\n            var total = vatNum.substring(2);\n\n            // Establish check digit.\n            total = (total * 100 + 12) % 97;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = vatNum.slice(0, 2);\n            return total === expect;\n        },\n\n        gb: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a UK VAT number.\n\n            var multipliers = [8, 7, 6, 5, 4, 3, 2];\n\n            // Government departments\n            if (vatNum.substr(0, 2) === 'GD') {\n                expect = 500;\n                return vatNum.substr(2, 3) < expect;\n            }\n\n            // Health authorities\n            if (vatNum.substr(0, 2) === 'HA') {\n                expect = 499;\n                return vatNum.substr(2, 3) > expect;\n            }\n\n            // Standard and commercial numbers\n            var total = 0;\n\n            // 0 VAT numbers disallowed!\n            if (Number(vatNum.slice(0)) === 0) return false;\n\n            // Check range is OK for modulus 97 calculation\n            var no = Number(vatNum.slice(0, 7));\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 7; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n            // Old numbers use a simple 97 modulus, but new numbers use an adaptation of that (less 55). Our\n            // VAT number could use either system, so we check it against both.\n\n            // Establish check digits by subtracting 97 from total until negative.\n            var checkDigit = total;\n            while (checkDigit > 0) {\n                checkDigit = checkDigit - 97;\n            }\n\n            // Get the absolute value and compare it with the last two characters of the VAT number. If the\n            // same, then it is a valid traditional check digit. However, even then the number must fit within\n            // certain specified ranges.\n            checkDigit = Math.abs(checkDigit);\n            if (checkDigit === vatNum.slice(7, 9) && no < 9990001 && (no < 100000 || no > 999999) && (no < 9490001 || no > 9700000)) return true;\n\n            // Now try the new method by subtracting 55 from the check digit if we can - else add 42\n            if (checkDigit >= 55)\n                checkDigit = checkDigit - 55;\n            else\n                checkDigit = checkDigit + 42;\n            expect = vatNum.slice(7, 9);\n            return !!(checkDigit === expect && no > 1000000);\n        },\n\n        hr: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Croatian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n            var product = 10;\n            var sum = 0;\n\n            for (var i = 0; i < 10; i++) {\n\n                // Extract the next digit and implement the algorithm\n                sum = (Number(vatNum.charAt(i)) + product) % 10;\n                if (sum === 0) {\n                    sum = 10\n                }\n\n                product = (2 * sum) % 11;\n            }\n\n            // Now check that we have the right check digit\n            expect = vatNum.slice(10, 11) * 1;\n            return (product + expect) % 10 === 1;\n        },\n\n        hu: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Hungarian VAT number.\n\n            var total = 0;\n            var multipliers = [9, 7, 3, 1, 9, 7, 3];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 7; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n            // Establish check digit.\n            total = 10 - total % 10;\n            if (total === 10) total = 0;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = vatNum.slice(7, 8);\n            return total === expect;\n        },\n\n        ie: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of an Irish VAT number.\n\n            var total = 0;\n            var multipliers = [8, 7, 6, 5, 4, 3, 2];\n\n            // If the code is type 1 format, we need to convert it to the new before performing the validation.\n            if (/^\\d[A-Z\\*\\+]/.test(vatNum)) vatNum = \"0\" + vatNum.substring(2, 7) + vatNum.substring(0, 1) + vatNum.substring(7, 8);\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 7; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n            // If the number is type 3 then we need to include the trailing A or H in the calculation\n            if (/^\\d{7}[A-Z][AH]$/.test(vatNum)) {\n\n                // Add in a multiplier for the character A (1*9=9) or H (8*9=72)\n                if (vatNum.charAt(8) === 'H')\n                    total += 72;\n                else\n                    total += 9;\n            }\n\n            // Establish check digit using modulus 23, and translate to char. equivalent.\n            total = total % 23;\n            if (total === 0)\n                total = \"W\";\n            else\n                total = String.fromCharCode(total + 64);\n\n            // Compare it with the eighth character of the VAT number. If it's the same, then it's valid.\n            expect = vatNum.slice(7, 8);\n            return total === expect;\n        },\n\n        it: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of an Italian VAT number.\n\n            var total = 0;\n            var multipliers = [1, 2, 1, 2, 1, 2, 1, 2, 1, 2];\n            var temp;\n\n            // The last three digits are the issuing office, and cannot exceed more 201, unless 999 or 888\n            if (Number(vatNum.slice(0, 7)) === 0) {\n                return false;\n            }\n            temp = Number(vatNum.slice(7, 10));\n            if ((temp < 1) || (temp > 201) && temp !== 999 && temp !== 888) {\n                return false;\n            }\n\n            // Extract the next digit and multiply by the appropriate\n            for (var i = 0; i < 10; i++) {\n                temp = Number(vatNum.charAt(i)) * multipliers[i];\n                if (temp > 9)\n                    total += Math.floor(temp / 10) + temp % 10;\n                else\n                    total += temp;\n            }\n\n            // Establish check digit.\n            total = 10 - total % 10;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = vatNum.slice(10, 11);\n            return total === expect;\n        },\n\n        lt: function (vatNum) {\n            var total;\n            var multipliers;\n            var expect;\n\n            // Checks the check digits of a Lithuanian VAT number.\n\n            // 9 character VAT numbers are for legal persons\n            if (vatNum.length === 9) {\n\n                // 8th character must be one\n                if (!(/^\\d{7}1/).test(vatNum)) return false;\n\n                // Extract the next digit and multiply by the counter+1.\n                total = 0;\n                for (var i = 0; i < 8; i++) {\n                    total += Number(vatNum.charAt(i)) * (i + 1);\n                }\n\n                // Can have a double check digit calculation!\n                if (total % 11 === 10) {\n                    multipliers = [3, 4, 5, 6, 7, 8, 9, 1];\n                    total = 0;\n                    for (var j = 0; j < 8; j++) {\n                        total += Number(vatNum.charAt(j)) * multipliers[j];\n                    }\n                }\n\n                // Establish check digit.\n                total = total % 11;\n                if (total === 10) {\n                    total = 0;\n                }\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                expect = vatNum.slice(8, 9);\n                return total === expect;\n            }\n\n            // 12 character VAT numbers are for temporarily registered taxpayers\n            else {\n\n                // 11th character must be one\n                if (!(/^\\d{10}1/).test(vatNum)) return false;\n\n                // Extract the next digit and multiply by the counter+1.\n                total = 0;\n                multipliers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2];\n                for (var k = 0; k < 11; k++) {\n                    total += Number(vatNum.charAt(k)) * multipliers[k];\n                }\n\n                // Can have a double check digit calculation!\n                if (total % 11 === 10) {\n                    multipliers = [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4];\n                    total = 0;\n                    for (var l = 0; l < 11; l++) {\n                        total += Number(vatNum.charAt(l)) * multipliers[l];\n                    }\n                }\n\n                // Establish check digit.\n                total = total % 11;\n                if (total === 10) {\n                    total = 0;\n                }\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                expect = vatNum.slice(11, 12);\n                return total === expect;\n            }\n        },\n\n        lu: function (vatNum) {\n            var expect = vatNum.slice(6, 8);\n            var checkDigit = vatNum.slice(0, 6);\n            // Checks the check digits of a Luxembourg VAT number.\n\n            return checkDigit === expect;\n        },\n\n        lv: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Latvian VAT number.\n\n            // Differentiate between legal entities and natural bodies. For the latter we simply check that\n            // the first six digits correspond to valid DDMMYY dates.\n            if ((/^[0-3]/).test(vatNum)) {\n                return !!(/^[0-3][0-9][0-1][0-9]/).test(vatNum);\n            } else {\n\n                var total = 0;\n                var multipliers = [9, 1, 4, 8, 3, 10, 2, 5, 7, 6];\n\n                // Extract the next digit and multiply by the counter.\n                for (var i = 0; i < 10; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n                // Establish check digits by getting modulus 11.\n                if (total % 11 === 4 && vatNum[0] === 9) total = total - 45;\n                if (total % 11 === 4)\n                    total = 4 - total % 11;\n                else if (total % 11 > 4)\n                    total = 14 - total % 11;\n                else if (total % 11 < 4)\n                    total = 3 - total % 11;\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                expect = vatNum.slice(10, 11);\n                return total === expect;\n            }\n        },\n\n        mt: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Maltese VAT number.\n\n            var total = 0;\n            var multipliers = [3, 4, 6, 7, 8, 9];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 6; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n            // Establish check digits by getting modulus 37.\n            total = 37 - total % 37;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = vatNum.slice(6, 8) * 1;\n            return total === expect;\n        },\n\n        nl: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Dutch VAT number.\n\n            var total = 0;\n            var multipliers = [9, 8, 7, 6, 5, 4, 3, 2];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n            // Establish check digits by getting modulus 11.\n            total = total % 11;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = vatNum.slice(8, 9);\n            return total === expect;\n        },\n\n        no: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Norwegian VAT number.\n            // See http://www.brreg.no/english/coordination/number.html\n\n            var total = 0;\n            var multipliers = [3, 2, 7, 6, 5, 4, 3, 2];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n            // Establish check digits by getting modulus 11. Check digits > 9 are invalid\n            total = 11 - total % 11;\n            if (total === 11) {\n                total = 0;\n            }\n            if (total < 10) {\n\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                expect = vatNum.slice(8, 9);\n                return total === expect;\n            }\n        },\n\n        pl: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Polish VAT number.\n\n            var total = 0;\n            var multipliers = [6, 5, 7, 2, 3, 4, 5, 6, 7];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 9; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n            // Establish check digits subtracting modulus 11 from 11.\n            total = total % 11;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = vatNum.slice(9, 10);\n            return total === expect;\n        },\n\n        pt: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Portugese VAT number.\n\n            var total = 0;\n            var multipliers = [9, 8, 7, 6, 5, 4, 3, 2];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 8; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n            // Establish check digits subtracting modulus 11 from 11.\n            total = 11 - total % 11;\n            if (total > 9) {\n                total = 0;\n            }\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = vatNum.slice(8, 9);\n            return total === expect;\n        },\n\n        ro: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Romanian VAT number.\n\n            var multipliers = [7, 5, 3, 2, 1, 7, 5, 3, 2];\n\n            // Extract the next digit and multiply by the counter.\n            var VATlen = vatNum.length;\n            multipliers = multipliers.slice(10 - VATlen);\n            var total = 0;\n            for (var i = 0; i < vatNum.length - 1; i++) {\n                total += Number(vatNum.charAt(i)) * multipliers[i];\n            }\n\n            // Establish check digits by getting modulus 11.\n            total = (10 * total) % 11;\n            if (total === 10) total = 0;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = vatNum.slice(vatNum.length - 1, vatNum.length);\n            return total === expect;\n        },\n\n        rs: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Serbian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n            var product = 10;\n            var sum = 0;\n            var checkDigit;\n\n            for (var i = 0; i < 8; i++) {\n\n                // Extract the next digit and implement the algorithm\n                sum = (Number(vatNum.charAt(i)) + product) % 10;\n                if (sum === 0) {\n                    sum = 10\n                }\n                product = (2 * sum) % 11;\n            }\n\n            // Now check that we have the right check digit\n            expect = 1;\n            checkDigit = (product + vatNum.slice(8, 9) * 1) % 10;\n            return checkDigit === expect;\n        },\n\n        ru: function (vatNum) {\n            var expect;\n            var expect2;\n\n            // Checks the check digits of a Russian INN number\n            // See http://russianpartner.biz/test_inn.html for algorithm\n\n            // 10 digit INN numbers\n            if (vatNum.length === 10) {\n                var total = 0;\n                var multipliers = [2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\n                for (var i = 0; i < 10; i++) {\n                    total += Number(vatNum.charAt(i)) * multipliers[i];\n                }\n\n                total = total % 11;\n                if (total > 9) {\n                    total = total % 10\n                }\n\n                // Compare it with the last character of the VAT number. If it is the same, then it's valid\n                expect = vatNum.slice(9, 10);\n                return total === expect;\n\n                // 12 digit INN numbers\n            } else if (vatNum.length === 12) {\n                var total1 = 0;\n                var multipliers1 = [7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\n                var total2 = 0;\n                var multipliers2 = [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\n\n                for (var j = 0; j < 11; j++) {\n                    total1 += Number(vatNum.charAt(j)) * multipliers1[j];\n                }\n\n                total1 = total1 % 11;\n                if (total1 > 9) {\n                    total1 = total1 % 10\n                }\n\n                for (var k = 0; k < 11; k++) {\n                    total2 += Number(vatNum.charAt(k)) * multipliers2[k];\n                }\n\n                total2 = total2 % 11;\n                if (total2 > 9) {\n                    total2 = total2 % 10\n                }\n\n                // Compare the first check with the 11th character and the second check with the 12th and last\n                // character of the VAT number. If they're both the same, then it's valid\n                expect = vatNum.slice(10, 11);\n                expect2 = vatNum.slice(11, 12);\n                return (expect) && (expect2);\n            }\n        },\n\n        se: function (vatNum) {\n            var expect;\n\n            // Calculate R where R = R1 + R3 + R5 + R7 + R9, and Ri = INT(Ci/5) + (Ci*2) modulo 10\n            var R = 0;\n            var digit;\n            for (var i = 0; i < 9; i = i + 2) {\n                digit = Number(vatNum.charAt(i));\n                R += Math.floor(digit / 5) + ((digit * 2) % 10);\n            }\n\n            // Calculate S where S = C2 + C4 + C6 + C8\n            var S = 0;\n            for (var j = 1; j < 9; j = j + 2) {\n                S += Number(vatNum.charAt(j));\n            }\n\n            var checkDigit = (10 - (R + S) % 10) % 10;\n\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = vatNum.slice(9, 10);\n\n            return checkDigit === expect;\n        },\n\n        si: function (vatNum) {\n            var expect;\n\n            // Checks the check digits of a Slovenian VAT number.\n\n            var total = 0;\n            var multipliers = [8, 7, 6, 5, 4, 3, 2];\n\n            // Extract the next digit and multiply by the counter.\n            for (var i = 0; i < 7; i++) total += Number(vatNum.charAt(i)) * multipliers[i];\n\n            // Establish check digits using modulus 11\n            total = 11 - total % 11;\n            if (total === 10) {\n                total = 0;\n            }\n\n            // Compare the number with the last character of the VAT number. If it is the\n            // same, then it's a valid check digit.\n            expect= vatNum.slice(7, 8);\n            return !!(total !== 11 && total === expect);\n        },\n\n        sk: function (vatNum) {\n            var expect = 0;\n            var checkDigit = (vatNum % 11);\n            // Checks the check digits of a Slovakian VAT number.\n            // Check that the modulus of the whole VAT number is 0 - else error\n            return checkDigit === expect;\n        }\n    };\n\n    if (typeof module === 'object' && module.exports) module.exports = exports;\n\n    return exports;\n})();"],"sourceRoot":"/source/"}