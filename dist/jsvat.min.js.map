{"version":3,"sources":["jsvat.js"],"names":["jsvat","_validateRegex","vat","regex","test","_validateRules","countryName","parsedNum","exec","number","COUNTRIES","_validate","result","getClearVAT","toString","toUpperCase","replace","_makeArr","Array","isArray","exports","config","austria","belgium","bulgaria","croatia","cyprus","czech_republic","denmark","estonia","europe","finland","france","germany","greece","hungary","ireland","italy","latvia","lithunia","luxembourg","malta","netherlands","norway","poland","portugal","romania","russia","serbia","slovakia_republic","slovenia","spain","sweden","switzerland","united_kingdom","checkVAT","isDetailed","isValid","countries","hasOwnProperty","regexArr","i","length","push","calcs","temp","expect","total","charAt","this","rules","multipliers","Math","floor","slice","check","checkNineLengthVat","j","isPhysicalPerson","month","k","physical","substr","isForeigner","l","foreigner","miscellaneousVAT","m","miscellaneous","product","sum","String","fromCharCode","substring","checkDigit","med","alt","short","vatLength","expect2","m_1","total1","total2","m_2","m_3","additional","tempnumber","digit","R","S","no","abs","module"],"mappings":"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","file":"jsvat.min.js","sourcesContent":["var jsvat = (function() {\n\n  'use strict';\n\n  var COUNTRIES = {};\n\n  function _validateRegex(vat, regex) {\n    return regex.test(vat);\n  }\n\n  function _validateRules(vat, regex, countryName) {\n    var parsedNum = regex.exec(vat);\n    var number = parsedNum[2];\n\n    return COUNTRIES[countryName](number, countryName);\n  }\n\n  function _validate(vat, regex, countryName) {\n    var result = false;\n    if (_validateRegex(vat, regex)) {\n      result = _validateRules(vat, regex, countryName);\n    }\n    return result;\n  }\n\n  function getClearVAT(vat) {\n    return vat.toString().toUpperCase().replace(/(\\s|-|\\.)+/g, '');\n  }\n\n  function _makeArr(regex) {\n    //TODO (S.Panfilov) this is not cross-browser check\n    if (!Array.isArray(regex)) {\n      return [regex];\n    }\n\n    return regex;\n  }\n\n  var exports = {\n    //TODO (S.Panfilov) Fixed config and refactor\n    config: {\n      austria: true,\n      belgium: true,\n      bulgaria: true,\n      croatia: true,\n      cyprus: true,\n      czech_republic: true,\n      denmark: true,\n      estonia: true,\n      europe: true,\n      finland: true,\n      france: true,\n      germany: true,\n      greece: true,\n      hungary: true,\n      ireland: true,\n      italy: true,\n      latvia: true,\n      lithunia: true,\n      luxembourg: true,\n      malta: true,\n      netherlands: true,\n      norway: true,\n      poland: true,\n      portugal: true,\n      romania: true,\n      russia: true,\n      serbia: true,\n      slovakia_republic: true,\n      slovenia: true,\n      spain: true,\n      sweden: true,\n      switzerland: true,\n      united_kingdom: true\n    },\n    checkVAT: function(vat, isDetailed) {\n      if (!vat) return false;\n\n      vat = getClearVAT(vat);\n\n      var result = {\n        isValid: false,\n        countries: []\n      };\n\n      for (var countryName in COUNTRIES) {\n        if (COUNTRIES.hasOwnProperty(countryName)) {\n\n          //Make sure country check not skipped in config\n          if (exports[countryName] && exports[countryName] !== false) {\n\n            var regexArr = _makeArr(COUNTRIES[countryName].regex);\n\n            for (var i = 0; i < regexArr.length; i++) {\n\n              //If once become a true, shouldn't be a false any more\n              result.isValid = (_validate(vat, regexArr[i], countryName)) ? true : result.isValid;\n\n              if (result.isValid) {\n                //If not detailed just return bool and exit\n                if (!isDetailed) {\n                  return result.isValid\n                } else {\n                  //if detailed, should fill array of countries\n                  result.push(countryName);\n                }\n              }\n            }\n\n          }\n        }\n      }\n\n      return isDetailed ? result : result.isValid;\n\n    }\n  };\n  COUNTRIES.austria = {\n    calcs: function(vat) {\n      var total = 0;\n      var temp;\n      var expect;\n\n      for (var i = 0; i < 7; i++) {\n        temp = vat.charAt(i) * this.rules.multipliers[i];\n        if (temp > 9)\n          total += Math.floor(temp / 10) + temp % 10;\n        else\n          total += temp;\n      }\n\n      total = 10 - (total + 4) % 10;\n      if (total === 10) total = 0;\n\n      expect = +vat.slice(7, 8);\n\n      return total === expect;\n    },\n    rules: {\n      multipliers: [\n        1,\n        2,\n        1,\n        2,\n        1,\n        2,\n        1\n      ],\n      regex: /^(AT)U(\\d{8})$/\n    }\n  };\n  COUNTRIES.belgium = {\n    calcs: function(vat) {\n      var expect;\n\n      if (vat.length === 9) {\n        vat = '0' + vat;\n      }\n\n      if (+vat.slice(1, 2) === 0) return false;\n\n      var check = (97 - +vat.slice(0, 8) % 97);\n      expect = +vat.slice(8, 10);\n      return check === expect;\n    },\n    rules: {\n      regex: /^(BE)(0?\\d{9})$/\n    }\n  };\n  COUNTRIES.bulgaria = {\n    calcs: function(vat) {\n      var checkNineLengthVat = function() {\n        var total = 0;\n        var temp;\n        var expect;\n\n        temp = 0;\n        for (var i = 0; i < 8; i++) {\n          temp += +vat.charAt(i) * (i + 1);\n        }\n\n        total = temp % 11;\n        if (total !== 10) {\n          expect = +vat.slice(8);\n          return total === expect;\n        }\n\n        temp = 0;\n        for (var j = 0; j < 8; j++) {\n          temp += +vat.charAt(j) * (j + 3);\n        }\n\n        total = temp % 11;\n        if (total === 10) total = 0;\n        expect = +vat.slice(8);\n\n        return total === expect;\n      };\n\n      var isPhysicalPerson = function() {\n        var total = 0;\n        // 10 digit VAT code - see if it relates to a standard physical person\n        if ((/^\\d\\d[0-5]\\d[0-3]\\d\\d{4}$/).test(vat)) {\n          // Check month\n          var month = +vat.slice(2, 4);\n          if ((month > 0 && month < 13) || (month > 20 && month < 33) || (month > 40 && month < 53)) {\n\n            total = 0;\n            for (var k = 0; k < 9; k++) {\n              total += +vat.charAt(k) * this.rules.multipliers.physical[k];\n            }\n            // Establish check digit.\n            total = total % 11;\n            if (total === 10) total = 0;\n\n            // Check to see if the check digit given is correct, If not, try next type of person\n            if (total === +vat.substr(9, 1)) return true;\n          }\n        }\n\n        return false;\n\n      };\n\n      // It doesn't relate to a standard physical person - see if it relates to a foreigner.\n      var isForeigner = function() {\n        var total = 0;\n        // Extract the next digit and multiply by the counter.\n        for (var l = 0; l < 9; l++) {\n          total += +vat.charAt(l) * this.rules.multipliers.foreigner[l];\n        }\n\n        // Check to see if the check digit given is correct, If not, try next type of person\n        if (total % 10 === +vat.substr(9, 1)) {\n          return true;\n        }\n      };\n\n      var miscellaneousVAT = function() {\n        var total = 0;\n        // Finally, if not yet identified, see if it conforms to a miscellaneous VAT number\n\n        for (var m = 0; m < 9; m++) {\n          total += +vat.charAt(m) * this.rules.multipliers.miscellaneous[m];\n        }\n\n        // Establish check digit.\n        total = 11 - total % 11;\n        if (total === 10) return false;\n        if (total === 11) total = 0;\n\n        // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n        expect = +vat.substr(9, 1);\n        return total === expect;\n      };\n\n      if (vat.length === 9) {\n        return checkNineLengthVat();\n      } else {\n        return isPhysicalPerson() || isForeigner() || miscellaneousVAT();\n      }\n\n    },\n    rules: {\n      multipliers: {\n        physical: [\n          2,\n          4,\n          8,\n          5,\n          10,\n          9,\n          7,\n          3,\n          6\n        ],\n        foreigner: [\n          21,\n          19,\n          17,\n          13,\n          11,\n          9,\n          7,\n          3,\n          1\n        ],\n        miscellaneous: [\n          4,\n          3,\n          2,\n          7,\n          6,\n          5,\n          4,\n          3,\n          2\n        ]\n      },\n      regex: /^(BG)(\\d{9,10})$/\n    }\n  };\n  COUNTRIES.croatia = {\n    calcs: function(vat) {\n      var expect;\n\n      // Checks the check digits of a Croatian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n      var product = 10;\n      var sum = 0;\n\n      for (var i = 0; i < 10; i++) {\n\n        // Extract the next digit and implement the algorithm\n        sum = (+vat.charAt(i) + product) % 10;\n        if (sum === 0) {\n          sum = 10;\n        }\n\n        product = (2 * sum) % 11;\n      }\n\n      // Now check that we have the right check digit\n      expect = +vat.slice(10, 11);\n      return (product + expect) % 10 === 1;\n    },\n    rules: {\n      regex: /^(HR)(\\d{11})$/\n    }\n  };\n  COUNTRIES.cyprus = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n\n      // Not allowed to start with '12'\n      if (+vat.slice(0, 2) === 12) return false;\n\n      // Extract the next digit and multiply by the counter.\n\n      for (var i = 0; i < 8; i++) {\n        var temp = +vat.charAt(i);\n        if (i % 2 === 0) {\n          switch (temp) {\n            case 0:\n              temp = 1;\n              break;\n            case 1:\n              temp = 0;\n              break;\n            case 2:\n              temp = 5;\n              break;\n            case 3:\n              temp = 7;\n              break;\n            case 4:\n              temp = 9;\n              break;\n            default:\n              temp = temp * 2 + 3;\n          }\n        }\n        total += temp;\n      }\n\n      // Establish check digit using modulus 26, and translate to char. equivalent.\n      total = total % 26;\n      total = String.fromCharCode(total + 65);\n\n      // Check to see if the check digit given is correct\n      expect = vat.substr(8, 1);\n      return total === expect;\n    },\n    rules: {\n      regex: /^(CY)([0-59]\\d{7}[A-Z])$/\n    }\n  };\n  var czech_republic = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n\n      // Legal entities\n      if (this.rules.additional[0].test(vat)) {\n\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 7; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n\n        // Establish check digit.\n        total = 11 - total % 11;\n        if (total === 10) total = 0;\n        if (total === 11) total = 1;\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(7, 8);\n        return total === expect;\n      }\n\n      // Individuals type 2\n      else if (this.rules.additional[2].test(vat)) {\n\n        // Extract the next digit and multiply by the counter.\n        for (var j = 0; j < 7; j++) {\n          total += +vat.charAt(j + 1) * this.rules.multipliers[j];\n        }\n\n        // Establish check digit.\n        total = 11 - total % 11;\n        if (total === 10) total = 0;\n        if (total === 11) total = 1;\n\n        // Convert calculated check digit according to a lookup table;\n        expect = +vat.slice(8, 9);\n        return this.rules.lookup[total - 1] === expect;\n      }\n\n      // Individuals type 3\n      else if (this.rules.additional[3].test(vat)) {\n        var temp = +vat.slice(0, 2) + vat.slice(2, 4) + vat.slice(4, 6) + vat.slice(6, 8) + vat.slice(8);\n        expect = +vat % 11 === 0;\n        return !!(temp % 11 === 0 && expect);\n      }\n\n      // else error\n      return false;\n    },\n    rules: {\n      multipliers: [\n        8,\n        7,\n        6,\n        5,\n        4,\n        3,\n        2\n      ],\n      \"lookup\": [\n        8,\n        7,\n        6,\n        5,\n        4,\n        3,\n        2,\n        1,\n        0,\n        9,\n        10\n      ],\n      regex: /^(CZ)(\\d{8,10})(\\d{3})?$/,\n      additional: [\n        /^\\d{8}$/,\n        /^[0-5][0-9][0|1|5|6]\\d[0-3]\\d\\d{3}$/,\n        /^6\\d{8}$/,\n        /^\\d{2}[0-3|5-8]\\d[0-3]\\d\\d{4}$/\n      ]\n    }\n  };\n  COUNTRIES.denmark = {\n    calcs: function(vat) {\n      var total = 0;\n\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      }\n\n      return total % 11 === 0;\n    },\n    rules: {\n      multipliers: [\n        2,\n        7,\n        6,\n        5,\n        4,\n        3,\n        2,\n        1\n      ],\n      regex: /^(DK)(\\d{8})$/\n    }\n  };\n  COUNTRIES.estonia = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      }\n\n      // Establish check digits using modulus 10.\n      total = 10 - total % 10;\n      if (total === 10) total = 0;\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [\n        3,\n        7,\n        1,\n        3,\n        7,\n        1,\n        3,\n        7\n      ],\n      regex: /^(EE)(10\\d{7})$/\n    }\n  };\n  COUNTRIES.europe = {\n    calcs: function(vat) {\n      // We know little about EU numbers apart from the fact that the first 3 digits represent the\n      // country, and that there are nine digits in total.\n      return true;\n    },\n    rules: {\n      regex: /^(EU)(\\d{9})$/\n    }\n  };\n  COUNTRIES.finland = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) total += +vat.charAt(i) * this.rules.multipliers[i];\n\n      // Establish check digit.\n      total = 11 - total % 11;\n      if (total > 9) {\n        total = 0;\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(7, 8);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [\n        7,\n        9,\n        10,\n        5,\n        8,\n        4,\n        2\n      ],\n      regex: /^(FI)(\\d{8})$/\n    }\n  };\n  COUNTRIES.france = {\n    calcs: function(vat) {\n      var total;\n      var expect;\n\n      // Checks the check digits of a French VAT number.\n      if (!(/^\\d{11}$/).test(vat)) {\n        return true;\n      }\n\n      // Extract the last nine digits as an integer.\n      total = +vat.substring(2);\n\n      // Establish check digit.\n      total = (total * 100 + 12) % 97;\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(0, 2);\n      return total === expect;\n    },\n    rules: {\n      regex: [\n        /^(FR)(\\d{11})$/,\n        /^(FR)([A-HJ-NP-Z]\\d{10})$/,\n        /^(FR)(\\d[A-HJ-NP-Z]\\d{9})$/,\n        /^(FR)([A-HJ-NP-Z]{2}\\d{9})$/\n      ]\n    }\n  };\n  COUNTRIES.germany = {\n    calcs: function(vat) {\n      // Checks the check digits of a German VAT number.\n      var product = 10;\n      var sum = 0;\n      var checkDigit = 0;\n      var expect;\n\n      for (var i = 0; i < 8; i++) {\n\n        // Extract the next digit and implement peculiar algorithm!.\n        sum = (+vat.charAt(i) + product) % 10;\n        if (sum === 0) {\n          sum = 10;\n        }\n        product = (2 * sum) % 11;\n      }\n\n      // Establish check digit.\n      if (11 - product === 10) {\n        checkDigit = 0;\n      } else {\n        checkDigit = 11 - product;\n      }\n\n      // Compare it with the last two characters of the VAT number. If the same, then it is a valid\n      // check digit.\n      expect = +vat.slice(8, 9);\n      return checkDigit === expect;\n    },\n    rules: {\n      regex: /^(DE)([1-9]\\d{8})$/\n    }\n  };\n  COUNTRIES.greece = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n\n      //eight character numbers should be prefixed with an 0.\n      if (vat.length === 8) {\n        vat = '0' + vat;\n      }\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      }\n\n      // Establish check digit.\n      total = total % 11;\n      if (total > 9) {\n        total = 0;\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [\n        256,\n        128,\n        64,\n        32,\n        16,\n        8,\n        4,\n        2\n      ],\n      regex: /^(EL)(\\d{9})$/\n    }\n  };\n  COUNTRIES.hungary = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      }\n\n      // Establish check digit.\n      total = 10 - total % 10;\n      if (total === 10) total = 0;\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(7, 8);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [\n        9,\n        7,\n        3,\n        1,\n        9,\n        7,\n        3\n      ],\n      regex: /^(HU)(\\d{8})$/\n    }\n  };\n  COUNTRIES.ireland = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n\n      // If the code is type 1 format, we need to convert it to the new before performing the validation.\n      if (/^\\d[A-Z\\*\\+]/.test(vat)) {\n        vat = '0' + vat.substring(2, 7) + vat.substring(0, 1) + vat.substring(7, 8);\n      }\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      }\n\n      // If the number is type 3 then we need to include the trailing A or H in the calculation\n      if (/^\\d{7}[A-Z][AH]$/.test(vat)) {\n        // Add in a multiplier for the character A (1*9=9) or H (8*9=72)\n        if (vat.charAt(8) === 'H') {\n          total += 72;\n        } else {\n          total += 9;\n        }\n      }\n\n      // Establish check digit using modulus 23, and translate to char. equivalent.\n      total = total % 23;\n      if (total === 0) {\n        total = 'W';\n      } else {\n        total = String.fromCharCode(total + 64);\n      }\n\n      // Compare it with the eighth character of the VAT number. If it's the same, then it's valid.\n      expect = vat.slice(7, 8);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [\n        8,\n        7,\n        6,\n        5,\n        4,\n        3,\n        2\n      ],\n      regex: [\n        /^(IE)(\\d{7}[A-W])$/,\n        /^(IE)([7-9][A-Z\\*\\+)]\\d{5}[A-W])$/,\n        /^(IE)(\\d{7}[A-W][AH])$/\n      ]\n    }\n  };\n  COUNTRIES.italy = {\n    calcs: function(vat) {\n      var total = 0;\n      var temp;\n      var expect;\n\n      // The last three digits are the issuing office, and cannot exceed more 201, unless 999 or 888\n      if (+vat.slice(0, 7) === 0) {\n        return false;\n      }\n\n      temp = +vat.slice(7, 10);\n      if ((temp < 1) || (temp > 201) && temp !== 999 && temp !== 888) {\n        return false;\n      }\n\n      // Extract the next digit and multiply by the appropriate\n      for (var i = 0; i < 10; i++) {\n        temp = +vat.charAt(i) * this.rules.multipliers[i];\n        if (temp > 9)\n          total += Math.floor(temp / 10) + temp % 10;\n        else\n          total += temp;\n      }\n\n      // Establish check digit.\n      total = 10 - total % 10;\n      if (total > 9) {\n        total = 0;\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(10, 11);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [\n        1,\n        2,\n        1,\n        2,\n        1,\n        2,\n        1,\n        2,\n        1,\n        2\n      ],\n      regex: /^(IT)(\\d{11})$/\n    }\n  };\n  COUNTRIES.latvia = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n\n      // Differentiate between legal entities and natural bodies. For the latter we simply check that\n      // the first six digits correspond to valid DDMMYY dates.\n      if ((/^[0-3]/).test(vat)) {\n        return !!(/^[0-3][0-9][0-1][0-9]/).test(vat);\n      } else {\n\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 10; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n\n        // Establish check digits by getting modulus 11.\n        if (total % 11 === 4 && vat[0] === 9) total = total - 45;\n        if (total % 11 === 4)\n          total = 4 - total % 11;\n        else if (total % 11 > 4)\n          total = 14 - total % 11;\n        else if (total % 11 < 4)\n          total = 3 - total % 11;\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(10, 11);\n        return total === expect;\n      }\n    },\n    rules: {\n      multipliers: [\n        9,\n        1,\n        4,\n        8,\n        3,\n        10,\n        2,\n        5,\n        7,\n        6\n      ],\n      regex: /^(LV)(\\d{11})$/\n    }\n  };\n  COUNTRIES.lithunia = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n\n      // 9 character VAT numbers are for legal persons\n      if (vat.length === 9) {\n\n        // 8th character must be one\n        if (!(/^\\d{7}1/).test(vat)) return false;\n\n        // Extract the next digit and multiply by the counter+1.\n        total = 0;\n        for (var i = 0; i < 8; i++) {\n          total += +vat.charAt(i) * (i + 1);\n        }\n\n        // Can have a double check digit calculation!\n        if (total % 11 === 10) {\n          total = 0;\n          for (var j = 0; j < 8; j++) {\n            total += +vat.charAt(j) * this.rules.multipliers.short[j];\n          }\n        }\n\n        // Establish check digit.\n        total = total % 11;\n        if (total === 10) {\n          total = 0;\n        }\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(8, 9);\n        return total === expect;\n      }\n\n      // 12 character VAT numbers are for temporarily registered taxpayers\n      else {\n\n        // 11th character must be one\n        if (!(/^\\d{10}1/).test(vat)) return false;\n\n        // Extract the next digit and multiply by the counter+1.\n        total = 0;\n        for (var k = 0; k < 11; k++) {\n          total += +vat.charAt(k) * this.rules.multipliers.med[k];\n        }\n\n        // Can have a double check digit calculation!\n        if (total % 11 === 10) {\n          total = 0;\n          for (var l = 0; l < 11; l++) {\n            total += +vat.charAt(l) * this.rules.multipliers.alt[l];\n          }\n        }\n\n        // Establish check digit.\n        total = total % 11;\n        if (total === 10) {\n          total = 0;\n        }\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(11, 12);\n        return total === expect;\n      }\n    },\n    rules: {\n      multipliers: {\n        \"short\": [\n          3,\n          4,\n          5,\n          6,\n          7,\n          8,\n          9,\n          1\n        ],\n        \"med\": [\n          1,\n          2,\n          3,\n          4,\n          5,\n          6,\n          7,\n          8,\n          9,\n          1,\n          2\n        ],\n        \"alt\": [\n          3,\n          4,\n          5,\n          6,\n          7,\n          8,\n          9,\n          1,\n          2,\n          3,\n          4\n        ]\n      },\n      regex: /^(LT)(\\d{9}|\\d{12})$/\n    }\n  };\n  COUNTRIES.luxembourg = {\n    calcs: function(vat) {\n      var expect = +vat.slice(6, 8);\n      var checkDigit = +vat.slice(0, 6) % 89;\n      // Checks the check digits of a Luxembourg VAT number.\n\n      return checkDigit === expect;\n    },\n    rules: {\n      regex: /^(LU)(\\d{8})$/\n    }\n  };\n  COUNTRIES.malta = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 6; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      }\n\n      // Establish check digits by getting modulus 37.\n      total = 37 - total % 37;\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(6, 8);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [\n        3,\n        4,\n        6,\n        7,\n        8,\n        9\n      ],\n      regex: /^(MT)([1-9]\\d{7})$/\n    }\n  };\n  COUNTRIES.netherlands = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      }\n\n      // Establish check digits by getting modulus 11.\n      total = total % 11;\n      if (total > 9) {\n        total = 0;\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [\n        9,\n        8,\n        7,\n        6,\n        5,\n        4,\n        3,\n        2\n      ],\n      regex: /^(NL)(\\d{9})B\\d{2}$/\n    }\n  };\n  COUNTRIES.norway = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n      // See http://www.brreg.no/english/coordination/number.html\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      }\n\n      // Establish check digits by getting modulus 11. Check digits > 9 are invalid\n      total = 11 - total % 11;\n      if (total === 11) {\n        total = 0;\n      }\n      if (total < 10) {\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(8, 9);\n        return total === expect;\n      }\n    },\n    rules: {\n      multipliers: [\n        3,\n        2,\n        7,\n        6,\n        5,\n        4,\n        3,\n        2\n      ],\n      regex: /^(NO)(\\d{9})$/\n    }\n  };\n  COUNTRIES.poland = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 9; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      }\n\n      // Establish check digits subtracting modulus 11 from 11.\n      total = total % 11;\n      if (total > 9) {\n        total = 0;\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(9, 10);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [\n        6,\n        5,\n        7,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7\n      ],\n      regex: /^(PL)(\\d{10})$/\n    }\n  };\n  COUNTRIES.portugal = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      }\n\n      // Establish check digits subtracting modulus 11 from 11.\n      total = 11 - total % 11;\n      if (total > 9) {\n        total = 0;\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [\n        9,\n        8,\n        7,\n        6,\n        5,\n        4,\n        3,\n        2\n      ],\n      regex: /^(PT)(\\d{9})$/\n    }\n  };\n  COUNTRIES.romania = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n\n      // Extract the next digit and multiply by the counter.\n      var vatLength = vat.length;\n      var multipliers = this.rules.multipliers.slice(10 - vatLength);\n\n      for (var i = 0; i < vat.length - 1; i++) {\n        total += +vat.charAt(i) * multipliers[i];\n      }\n\n      // Establish check digits by getting modulus 11.\n      total = (10 * total) % 11;\n      if (total === 10) total = 0;\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(vat.length - 1, vat.length);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [\n        7,\n        5,\n        3,\n        2,\n        1,\n        7,\n        5,\n        3,\n        2\n      ],\n      regex: /^(RO)([1-9]\\d{1,9})$/\n    }\n  };\n  COUNTRIES.russia = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n      var expect2;\n\n      // Checks the check digits of a Russian INN number\n      // See http://russianpartner.biz/test_inn.html for algorithm\n\n      // 10 digit INN numbers\n      if (vat.length === 10) {\n\n        for (var i = 0; i < 10; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers.m_1[i];\n        }\n\n        total = total % 11;\n        if (total > 9) {\n          total = total % 10;\n        }\n\n        // Compare it with the last character of the VAT number. If it is the same, then it's valid\n        expect = +vat.slice(9, 10);\n        return total === expect;\n\n        // 12 digit INN numbers\n      } else if (vat.length === 12) {\n        var total1 = 0;\n        var total2 = 0;\n\n        for (var j = 0; j < 11; j++) {\n          total1 += +vat.charAt(j) * this.rules.multipliers.m_2[j];\n        }\n\n        total1 = total1 % 11;\n        if (total1 > 9) {\n          total1 = total1 % 10;\n        }\n\n        for (var k = 0; k < 11; k++) {\n          total2 += +vat.charAt(k) * this.rules.multipliers.m_3[k];\n        }\n\n        total2 = total2 % 11;\n        if (total2 > 9) {\n          total2 = total2 % 10;\n        }\n\n        // Compare the first check with the 11th character and the second check with the 12th and last\n        // character of the VAT number. If they're both the same, then it's valid\n        //expect = +vat.slice(10, 11);\n        expect = (total1 === +vat.slice(10, 11));\n        //expect2 = +vat.slice(11, 12);\n        expect2 = (total2 === +vat.slice(11, 12));\n        return (expect) && (expect2);\n      }\n    },\n    rules: {\n      multipliers: {\n        \"m_1\": [\n          2,\n          4,\n          10,\n          3,\n          5,\n          9,\n          4,\n          6,\n          8,\n          0\n        ],\n        \"m_2\": [\n          7,\n          2,\n          4,\n          10,\n          3,\n          5,\n          9,\n          4,\n          6,\n          8,\n          0\n        ],\n        \"m_3\": [\n          3,\n          7,\n          2,\n          4,\n          10,\n          3,\n          5,\n          9,\n          4,\n          6,\n          8,\n          0\n        ]\n      },\n      regex: /^(RU)(\\d{10}|\\d{12})$/\n    }\n  };\n  COUNTRIES.serbia = {\n    calcs: function(vat) {\n      // Checks the check digits of a Serbian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n      var product = 10;\n      var sum = 0;\n      var checkDigit;\n\n      for (var i = 0; i < 8; i++) {\n\n        // Extract the next digit and implement the algorithm\n        sum = (+vat.charAt(i) + product) % 10;\n        if (sum === 0) {\n          sum = 10;\n        }\n        product = (2 * sum) % 11;\n      }\n\n      // Now check that we have the right check digit\n      var expect = 1;\n      checkDigit = (product + (+vat.slice(8, 9))) % 10;\n      return checkDigit === expect;\n    },\n    rules: {\n      regex: /^(RS)(\\d{9})$/\n    }\n  };\n  COUNTRIES.slovakia_republic = {\n    calcs: function(vat) {\n      var expect = 0;\n      var checkDigit = (vat % 11);\n      return checkDigit === expect;\n    },\n    rules: {\n      regex: /^(SK)([1-9]\\d[2346-9]\\d{7})$/\n    }\n  };\n  COUNTRIES.slovenia = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      }\n\n      // Establish check digits using modulus 11\n      total = 11 - total % 11;\n      if (total === 10) {\n        total = 0;\n      }\n\n      // Compare the number with the last character of the VAT number. If it is the\n      // same, then it's a valid check digit.\n      expect = +vat.slice(7, 8);\n      return !!(total !== 11 && total === expect);\n    },\n    rules: {\n      multipliers: [\n        8,\n        7,\n        6,\n        5,\n        4,\n        3,\n        2\n      ],\n      regex: /^(SI)([1-9]\\d{7})$/\n    }\n  };\n  COUNTRIES.spain = {\n    calcs: function(vat) {\n      var i = 0;\n      var total = 0;\n      var temp;\n      var expect;\n\n      // National juridical entities\n      if (this.rules.additional[0].test(vat)) {\n\n        // Extract the next digit and multiply by the counter.\n        for (i = 0; i < 7; i++) {\n          temp = vat.charAt(i + 1) * this.rules.multipliers[i];\n          if (temp > 9)\n            total += Math.floor(temp / 10) + temp % 10;\n          else\n            total += temp;\n        }\n        // Now calculate the check digit itself.\n        total = 10 - total % 10;\n        if (total === 10) {\n          total = 0;\n        }\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(8, 9);\n        return total === expect;\n      }\n\n      // Juridical entities other than national ones\n      else if (this.rules.additional[1].test(vat)) {\n\n        // Extract the next digit and multiply by the counter.\n        for (i = 0; i < 7; i++) {\n          temp = vat.charAt(i + 1) * this.rules.multipliers[i];\n          if (temp > 9)\n            total += Math.floor(temp / 10) + temp % 10;\n          else\n            total += temp;\n        }\n\n        // Now calculate the check digit itself.\n        total = 10 - total % 10;\n        total = String.fromCharCode(total + 64);\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = vat.slice(8, 9);\n        return total === expect;\n      }\n\n      // Personal number (NIF) (starting with numeric of Y or Z)\n      else if (this.rules.additional[2].test(vat)) {\n        var tempnumber = vat;\n        if (tempnumber.substring(0, 1) === 'Y') tempnumber = tempnumber.replace(/Y/, '1');\n        if (tempnumber.substring(0, 1) === 'Z') tempnumber = tempnumber.replace(/Z/, '2');\n        expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+tempnumber.substring(0, 8) % 23);\n        return tempnumber.charAt(8) === expect;\n      }\n\n      // Personal number (NIF) (starting with K, L, M, or X)\n      else if (this.rules.additional[3].test(vat)) {\n        expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+vat.substring(1, 8) % 23);\n        return vat.charAt(8) === expect;\n      } else return false;\n    },\n    rules: {\n      multipliers: [\n        2,\n        1,\n        2,\n        1,\n        2,\n        1,\n        2\n      ],\n      regex: [\n        /^(ES)([A-Z]\\d{8})$/,\n        /^(ES)([A-HN-SW]\\d{7}[A-J])$/,\n        /^(ES)([0-9YZ]\\d{7}[A-Z])$/,\n        /^(ES)([KLMX]\\d{7}[A-Z])$/\n      ],\n      additional: [\n        /^[A-H|J|U|V]\\d{8}$/,\n        /^[A-H|N-S|W]\\d{7}[A-J]$/,\n        /^[0-9|Y|Z]\\d{7}[A-Z]$/,\n        /^[K|L|M|X]\\d{7}[A-Z]$/\n      ]\n    }\n  };\n  COUNTRIES.sweden = {\n    calcs: function(vat) {\n      var expect;\n\n      // Calculate R where R = R1 + R3 + R5 + R7 + R9, and Ri = INT(Ci/5) + (Ci*2) modulo 10\n      var R = 0;\n      var digit;\n      for (var i = 0; i < 9; i = i + 2) {\n        digit = +vat.charAt(i);\n        R += Math.floor(digit / 5) + ((digit * 2) % 10);\n      }\n\n      // Calculate S where S = C2 + C4 + C6 + C8\n      var S = 0;\n      for (var j = 1; j < 9; j = j + 2) {\n        S += +vat.charAt(j);\n      }\n\n      var checkDigit = (10 - (R + S) % 10) % 10;\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(9, 10);\n\n      return checkDigit === expect;\n    },\n    rules: {\n      regex: /^(SE)(\\d{10}01)$/\n    }\n  };\n  COUNTRIES.switzerland = {\n    calcs: function(vat) {\n      var total = 0;\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      }\n\n      // Establish check digit.\n      total = 11 - total % 11;\n      if (total === 10) return false;\n      if (total === 11) total = 0;\n\n      // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n      expect = +vat.substr(8, 1);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [\n        5,\n        4,\n        3,\n        2,\n        7,\n        6,\n        5,\n        4\n      ],\n      regex: /^(CHE)(\\d{9})(MWST)?$/\n    }\n  };\n  COUNTRIES.united_kingdom = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n\n      // Government departments\n      if (vat.substr(0, 2) === 'GD') {\n        expect = 500;\n        return vat.substr(2, 3) < expect;\n      }\n\n      // Health authorities\n      if (vat.substr(0, 2) === 'HA') {\n        expect = 499;\n        return vat.substr(2, 3) > expect;\n      }\n\n      // Standard and commercial numbers\n\n\n      // 0 VAT numbers disallowed!\n      if (+vat.slice(0) === 0) return false;\n\n      // Check range is OK for modulus 97 calculation\n      var no = +vat.slice(0, 7);\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      }\n\n      // Old numbers use a simple 97 modulus, but new numbers use an adaptation of that (less 55). Our\n      // VAT number could use either system, so we check it against both.\n\n      // Establish check digits by subtracting 97 from total until negative.\n      var checkDigit = total;\n      while (checkDigit > 0) {\n        checkDigit = checkDigit - 97;\n      }\n\n      // Get the absolute value and compare it with the last two characters of the VAT number. If the\n      // same, then it is a valid traditional check digit. However, even then the number must fit within\n      // certain specified ranges.\n      checkDigit = Math.abs(checkDigit);\n      if (checkDigit === +vat.slice(7, 9) && no < 9990001 && (no < 100000 || no > 999999) && (no < 9490001 || no > 9700000)) return true;\n\n      // Now try the new method by subtracting 55 from the check digit if we can - else add 42\n      if (checkDigit >= 55)\n        checkDigit = checkDigit - 55;\n      else\n        checkDigit = checkDigit + 42;\n      expect = +vat.slice(7, 9);\n      return !!(checkDigit === expect && no > 1000000);\n    },\n    rules: {\n      multipliers: [\n        8,\n        7,\n        6,\n        5,\n        4,\n        3,\n        2\n      ],\n      regex: [\n        /^(GB)?(\\d{9})$/,\n        /^(GB)?(\\d{12})$/,\n        /^(GB)?(GD\\d{3})$/,\n        /^(GB)?(HA\\d{3})$/\n      ]\n    }\n  };\n\n  //Support of node.js\n\n  if (typeof module === 'object' && module.exports) module.exports = exports;\n\n  return exports;\n\n})();"],"sourceRoot":"/source/"}