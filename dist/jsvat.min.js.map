{"version":3,"sources":["jsvat.js"],"names":["jsvat","_validateRegex","vat","regex","test","_validateRules","countryName","parsedNum","exec","vatNum","COUNTRIES","calcs","_validate","result","getClearVAT","toString","toUpperCase","replace","_makeArr","Array","isArray","isCountryBlocked","config","Object","keys","length","country","undefined","exports","checkVAT","isDetailed","isValid","countries","hasOwnProperty","regexArr","rules","i","isValidForCurrCountry","push","austria","temp","expect","total","charAt","this","multipliers","Math","floor","slice","belgium","check","bulgaria","_checkNineLengthVat","j","_isPhysicalPerson","month","physical","substr","_isForeigner","foreigner","_miscellaneousVAT","miscellaneous","croatia","product","sum","cyprus","String","fromCharCode","czech_republic","_isLegalEntities","additional","_isIndividualType2","lookup","_isIndividualType3","denmark","estonia","europe","finland","france","substring","germany","checkDigit","greece","hungary","ireland","typeFormats","first","third","italy","latvia","lithunia","_extractDigit","multiplier","key","_doubleCheckCalculation","extractDigit","_check9DigitVat","extractDigit12","k","med","_doubleCheckCalculation12","l","alt","_check12DigitVat","short","luxembourg","malta","netherlands","norway","poland","portugal","romania","vatLength","russia","_check10DigitINN","m_1","_check12DigitINN","total1","total2","m_2","m_3","expect2","serbia","slovakia_republic","slovenia","spain","tempnumber","sweden","digit","R","S","switzerland","united_kingdom","no","abs","module"],"mappings":"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","file":"jsvat.min.js","sourcesContent":["var jsvat = (function() {\n\n  'use strict';\n\n  var COUNTRIES = {};\n\n  function _validateRegex(vat, regex) {\n    return regex.test(vat);\n  }\n\n  function _validateRules(vat, regex, countryName) {\n    var parsedNum = regex.exec(vat);\n    var vatNum = parsedNum[2];\n\n    return COUNTRIES[countryName].calcs(vatNum);\n  }\n\n  function _validate(vat, regex, countryName) {\n    var result = false;\n    if (_validateRegex(vat, regex)) {\n      result = _validateRules(vat, regex, countryName);\n    }\n    return result;\n  }\n\n  function getClearVAT(vat) {\n    return vat.toString().toUpperCase().replace(/(\\s|-|\\.)+/g, '');\n  }\n\n  function _makeArr(regex) {\n    //TODO (S.Panfilov) this is not cross-browser check\n    if (!Array.isArray(regex)) {\n      return [regex];\n    }\n\n    return regex;\n  }\n\n  function isCountryBlocked(config, countryName) {\n    if (!config || Object.keys(config).length === 0) return false; //TODO (S.Panfilov) Object.keys didn't supports by old browsers\n\n    var country = config[countryName];\n\n    return (country === null || country === undefined) ? true : !country;\n  }\n\n  var exports = {\n    config: {},\n    checkVAT: function(vat, isDetailed) {\n      if (!vat) return false;\n\n      vat = getClearVAT(vat);\n\n      var result = {\n        isValid: false,\n        countries: []\n      };\n\n      for (var countryName in COUNTRIES) {\n        if (COUNTRIES.hasOwnProperty(countryName)) {\n\n          //Make sure country check not skipped in config\n          if (!isCountryBlocked(exports.config, countryName)) {\n\n            var regexArr = _makeArr(COUNTRIES[countryName].rules.regex);\n            for (var i = 0; i < regexArr.length; i++) {\n\n              //If once become a true, shouldn't be a false any more\n              result.isValid = (_validate(vat, regexArr[i], countryName)) ? true : result.isValid;\n\n\n              if (!isDetailed && result.isValid) return result.isValid;\n\n              var isValidForCurrCountry = _validate(vat, regexArr[i], countryName);\n\n              if (isValidForCurrCountry) {\n                result.countries.push(countryName);\n              }\n            }\n\n          }\n        }\n      }\n\n      return isDetailed ? result : result.isValid;\n\n    }\n  };\n  COUNTRIES.austria = {\n    calcs: function(vat) {\n      var total = 0;\n      var temp;\n      var expect;\n\n      for (var i = 0; i < 7; i++) {\n        temp = vat.charAt(i) * this.rules.multipliers[i];\n        if (temp > 9)\n          total += Math.floor(temp / 10) + temp % 10;\n        else\n          total += temp;\n      }\n\n      total = 10 - (total + 4) % 10;\n      if (total === 10) total = 0;\n\n      expect = +vat.slice(7, 8);\n\n      return total === expect;\n    },\n    rules: {\n      multipliers: [\n        1,\n        2,\n        1,\n        2,\n        1,\n        2,\n        1\n      ],\n      regex: /^(AT)U(\\d{8})$/\n    }\n  };\n  COUNTRIES.belgium = {\n    calcs: function(vat) {\n      var expect;\n\n      if (vat.length === 9) {\n        vat = '0' + vat;\n      }\n\n      if (+vat.slice(1, 2) === 0) return false;\n\n      var check = (97 - +vat.slice(0, 8) % 97);\n      expect = +vat.slice(8, 10);\n      return check === expect;\n    },\n    rules: {\n      regex: /^(BE)(0?\\d{9})$/\n    }\n  };\n  COUNTRIES.bulgaria = (function() {\n\n    function _checkNineLengthVat(vat) {\n      var total;\n      var temp = 0;\n      var expect;\n\n      for (var i = 0; i < 8; i++) {\n        temp += +vat.charAt(i) * (i + 1);\n      }\n\n      total = temp % 11;\n      if (total !== 10) {\n        expect = +vat.slice(8);\n        return total === expect;\n      }\n\n      temp = 0;\n      for (var j = 0; j < 8; j++) {\n        temp += +vat.charAt(j) * (j + 3);\n      }\n\n      total = temp % 11;\n      if (total === 10) total = 0;\n      expect = +vat.slice(8);\n\n      return total === expect;\n    }\n\n    function _isPhysicalPerson(vat, rules) {\n      var total = 0;\n      // 10 digit VAT code - see if it relates to a standard physical person\n      if ((/^\\d\\d[0-5]\\d[0-3]\\d\\d{4}$/).test(vat)) {\n        // Check month\n        var month = +vat.slice(2, 4);\n        if ((month > 0 && month < 13) || (month > 20 && month < 33) || (month > 40 && month < 53)) {\n\n          total = 0;\n          for (var i = 0; i < 9; i++) {\n            total += +vat.charAt(i) * rules.multipliers.physical[i];\n          }\n          // Establish check digit.\n          total = total % 11;\n          if (total === 10) total = 0;\n\n          // Check to see if the check digit given is correct, If not, try next type of person\n          if (total === +vat.substr(9, 1)) return true;\n        }\n      }\n\n      return false;\n    }\n\n    function _isForeigner(vat, rules) {\n      var total = 0;\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 9; i++) {\n        total += +vat.charAt(i) * rules.multipliers.foreigner[i];\n      }\n\n      // Check to see if the check digit given is correct, If not, try next type of person\n      if (total % 10 === +vat.substr(9, 1)) {\n        return true;\n      }\n    }\n\n    function _miscellaneousVAT(vat, rules) {\n      var total = 0;\n      // Finally, if not yet identified, see if it conforms to a miscellaneous VAT number\n\n      for (var i = 0; i < 9; i++) {\n        total += +vat.charAt(i) * rules.multipliers.miscellaneous[i];\n      }\n\n      // Establish check digit.\n      total = 11 - total % 11;\n      if (total === 10) return false;\n      if (total === 11) total = 0;\n\n      // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n      var expect = +vat.substr(9, 1);\n      return total === expect;\n    }\n\n    return {\n      calcs: function(vat) {\n        if (vat.length === 9) {\n          return _checkNineLengthVat(vat);\n        } else {\n          return _isPhysicalPerson(vat, this.rules) || _isForeigner(vat, this.rules) || _miscellaneousVAT(vat, this.rules);\n        }\n\n      },\n      rules: {\n        multipliers: {\n          physical: [\n            2,\n            4,\n            8,\n            5,\n            10,\n            9,\n            7,\n            3,\n            6\n          ],\n          foreigner: [\n            21,\n            19,\n            17,\n            13,\n            11,\n            9,\n            7,\n            3,\n            1\n          ],\n          miscellaneous: [\n            4,\n            3,\n            2,\n            7,\n            6,\n            5,\n            4,\n            3,\n            2\n          ]\n        },\n        regex: /^(BG)(\\d{9,10})$/\n      }\n    };\n  })();\n  COUNTRIES.croatia = {\n    calcs: function(vat) {\n      var expect;\n\n      // Checks the check digits of a Croatian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n      var product = 10;\n      var sum = 0;\n\n      for (var i = 0; i < 10; i++) {\n\n        // Extract the next digit and implement the algorithm\n        sum = (+vat.charAt(i) + product) % 10;\n        if (sum === 0) {\n          sum = 10;\n        }\n\n        product = (2 * sum) % 11;\n      }\n\n      // Now check that we have the right check digit\n      expect = +vat.slice(10, 11);\n      return (product + expect) % 10 === 1;\n    },\n    rules: {\n      regex: /^(HR)(\\d{11})$/\n    }\n  };\n  COUNTRIES.cyprus = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n\n      // Not allowed to start with '12'\n      if (+vat.slice(0, 2) === 12) return false;\n\n      // Extract the next digit and multiply by the counter.\n\n      for (var i = 0; i < 8; i++) {\n        var temp = +vat.charAt(i);\n        if (i % 2 === 0) {\n          switch (temp) {\n            case 0:\n              temp = 1;\n              break;\n            case 1:\n              temp = 0;\n              break;\n            case 2:\n              temp = 5;\n              break;\n            case 3:\n              temp = 7;\n              break;\n            case 4:\n              temp = 9;\n              break;\n            default:\n              temp = temp * 2 + 3;\n          }\n        }\n        total += temp;\n      }\n\n      // Establish check digit using modulus 26, and translate to char. equivalent.\n      total = total % 26;\n      total = String.fromCharCode(total + 65);\n\n      // Check to see if the check digit given is correct\n      expect = vat.substr(8, 1);\n      return total === expect;\n    },\n    rules: {\n      regex: /^(CY)([0-59]\\d{7}[A-Z])$/\n    }\n  };\n  COUNTRIES.czech_republic = (function() {\n\n    function _isLegalEntities(vat, rules) {\n      var total = 0;\n\n      if (rules.additional[0].test(vat)) {\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 7; i++) {\n          total += +vat.charAt(i) * rules.multipliers[i];\n        }\n\n        // Establish check digit.\n        total = 11 - total % 11;\n        if (total === 10) total = 0;\n        if (total === 11) total = 1;\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        var expect = +vat.slice(7, 8);\n        return total === expect;\n      }\n\n      return false;\n    }\n\n    function _isIndividualType2(vat, rules) {\n      var total = 0;\n\n      if (rules.additional[2].test(vat)) {\n\n        // Extract the next digit and multiply by the counter.\n        for (var j = 0; j < 7; j++) {\n          total += +vat.charAt(j + 1) * rules.multipliers[j];\n        }\n\n        // Establish check digit.\n        total = 11 - total % 11;\n        if (total === 10) total = 0;\n        if (total === 11) total = 1;\n\n        // Convert calculated check digit according to a lookup table;\n        var expect = +vat.slice(8, 9);\n        return rules.lookup[total - 1] === expect;\n      }\n\n      return false;\n    }\n\n    function _isIndividualType3(vat, rules) {\n      if (rules.additional[3].test(vat)) {\n        var temp = +vat.slice(0, 2) + vat.slice(2, 4) + vat.slice(4, 6) + vat.slice(6, 8) + vat.slice(8);\n        var expect = +vat % 11 === 0;\n        return !!(temp % 11 === 0 && expect);\n      }\n\n      return false;\n    }\n\n    return {\n      calcs: function(vat) {\n\n        if (_isLegalEntities(vat, this.rules)) return true;\n        if (_isIndividualType2(vat, this.rules)) return true;\n        if (_isIndividualType3(vat, this.rules)) return true;\n\n        return false;\n      },\n      rules: {\n        multipliers: [\n          8,\n          7,\n          6,\n          5,\n          4,\n          3,\n          2\n        ],\n        \"lookup\": [\n          8,\n          7,\n          6,\n          5,\n          4,\n          3,\n          2,\n          1,\n          0,\n          9,\n          10\n        ],\n        regex: /^(CZ)(\\d{8,10})(\\d{3})?$/,\n        additional: [\n          /^\\d{8}$/,\n          /^[0-5][0-9][0|1|5|6]\\d[0-3]\\d\\d{3}$/,\n          /^6\\d{8}$/,\n          /^\\d{2}[0-3|5-8]\\d[0-3]\\d\\d{4}$/\n        ]\n      }\n    };\n  })();\n  COUNTRIES.denmark = {\n    calcs: function(vat) {\n      var total = 0;\n\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      }\n\n      return total % 11 === 0;\n    },\n    rules: {\n      multipliers: [\n        2,\n        7,\n        6,\n        5,\n        4,\n        3,\n        2,\n        1\n      ],\n      regex: /^(DK)(\\d{8})$/\n    }\n  };\n  COUNTRIES.estonia = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      }\n\n      // Establish check digits using modulus 10.\n      total = 10 - total % 10;\n      if (total === 10) total = 0;\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [\n        3,\n        7,\n        1,\n        3,\n        7,\n        1,\n        3,\n        7\n      ],\n      regex: /^(EE)(10\\d{7})$/\n    }\n  };\n  COUNTRIES.europe = {\n    calcs: function(vat) {\n      // We know little about EU numbers apart from the fact that the first 3 digits represent the\n      // country, and that there are nine digits in total.\n      return true;\n    },\n    rules: {\n      regex: /^(EU)(\\d{9})$/\n    }\n  };\n  COUNTRIES.finland = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) total += +vat.charAt(i) * this.rules.multipliers[i];\n\n      // Establish check digit.\n      total = 11 - total % 11;\n      if (total > 9) {\n        total = 0;\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(7, 8);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [\n        7,\n        9,\n        10,\n        5,\n        8,\n        4,\n        2\n      ],\n      regex: /^(FI)(\\d{8})$/\n    }\n  };\n  COUNTRIES.france = {\n    calcs: function(vat) {\n      var total;\n      var expect;\n\n      // Checks the check digits of a French VAT number.\n      if (!(/^\\d{11}$/).test(vat)) {\n        return true;\n      }\n\n      // Extract the last nine digits as an integer.\n      total = +vat.substring(2);\n\n      // Establish check digit.\n      total = (total * 100 + 12) % 97;\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(0, 2);\n      return total === expect;\n    },\n    rules: {\n      regex: [\n        /^(FR)(\\d{11})$/,\n        /^(FR)([A-HJ-NP-Z]\\d{10})$/,\n        /^(FR)(\\d[A-HJ-NP-Z]\\d{9})$/,\n        /^(FR)([A-HJ-NP-Z]{2}\\d{9})$/\n      ]\n    }\n  };\n  COUNTRIES.germany = {\n    calcs: function(vat) {\n      // Checks the check digits of a German VAT number.\n      var product = 10;\n      var sum = 0;\n      var checkDigit = 0;\n      var expect;\n\n      for (var i = 0; i < 8; i++) {\n\n        // Extract the next digit and implement peculiar algorithm!.\n        sum = (+vat.charAt(i) + product) % 10;\n        if (sum === 0) {\n          sum = 10;\n        }\n        product = (2 * sum) % 11;\n      }\n\n      // Establish check digit.\n      if (11 - product === 10) {\n        checkDigit = 0;\n      } else {\n        checkDigit = 11 - product;\n      }\n\n      // Compare it with the last two characters of the VAT number. If the same, then it is a valid\n      // check digit.\n      expect = +vat.slice(8, 9);\n      return checkDigit === expect;\n    },\n    rules: {\n      regex: /^(DE)([1-9]\\d{8})$/\n    }\n  };\n  COUNTRIES.greece = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n\n      //eight character numbers should be prefixed with an 0.\n      if (vat.length === 8) {\n        vat = '0' + vat;\n      }\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      }\n\n      // Establish check digit.\n      total = total % 11;\n      if (total > 9) {\n        total = 0;\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [\n        256,\n        128,\n        64,\n        32,\n        16,\n        8,\n        4,\n        2\n      ],\n      regex: /^(EL)(\\d{9})$/\n    }\n  };\n  COUNTRIES.hungary = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      }\n\n      // Establish check digit.\n      total = 10 - total % 10;\n      if (total === 10) total = 0;\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(7, 8);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [\n        9,\n        7,\n        3,\n        1,\n        9,\n        7,\n        3\n      ],\n      regex: /^(HU)(\\d{8})$/\n    }\n  };\n  COUNTRIES.ireland = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n\n      // If the code is type 1 format, we need to convert it to the new before performing the validation.\n      if (this.rules.typeFormats.first.test(vat)) {\n        vat = '0' + vat.substring(2, 7) + vat.substring(0, 1) + vat.substring(7, 8);\n      }\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      }\n\n      // If the number is type 3 then we need to include the trailing A or H in the calculation\n      if (this.rules.typeFormats.third.test(vat)) {\n        // Add in a multiplier for the character A (1*9=9) or H (8*9=72)\n        if (vat.charAt(8) === 'H') {\n          total += 72;\n        } else {\n          total += 9;\n        }\n      }\n\n      // Establish check digit using modulus 23, and translate to char. equivalent.\n      total = total % 23;\n      if (total === 0) {\n        total = 'W';\n      } else {\n        total = String.fromCharCode(total + 64);\n      }\n\n      // Compare it with the eighth character of the VAT number. If it's the same, then it's valid.\n      expect = vat.slice(7, 8);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [\n        8,\n        7,\n        6,\n        5,\n        4,\n        3,\n        2\n      ],\n      typeFormats: {\n        first: /^\\d[A-Z\\*\\+]/,\n        third: /^\\d{7}[A-Z][AH]$/\n      },\n      regex: [\n        /^(IE)(\\d{7}[A-W])$/,\n        /^(IE)([7-9][A-Z\\*\\+)]\\d{5}[A-W])$/,\n        /^(IE)(\\d{7}[A-W][AH])$/\n      ]\n    }\n  };\n  COUNTRIES.italy = {\n    calcs: function(vat) {\n      var total = 0;\n      var temp;\n      var expect;\n\n      // The last three digits are the issuing office, and cannot exceed more 201, unless 999 or 888\n      if (+vat.slice(0, 7) === 0) {\n        return false;\n      }\n\n      temp = +vat.slice(7, 10);\n      if ((temp < 1) || (temp > 201) && temp !== 999 && temp !== 888) {\n        return false;\n      }\n\n      // Extract the next digit and multiply by the appropriate\n      for (var i = 0; i < 10; i++) {\n        temp = +vat.charAt(i) * this.rules.multipliers[i];\n        if (temp > 9)\n          total += Math.floor(temp / 10) + temp % 10;\n        else\n          total += temp;\n      }\n\n      // Establish check digit.\n      total = 10 - total % 10;\n      if (total > 9) {\n        total = 0;\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(10, 11);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [\n        1,\n        2,\n        1,\n        2,\n        1,\n        2,\n        1,\n        2,\n        1,\n        2\n      ],\n      regex: /^(IT)(\\d{11})$/\n    }\n  };\n  COUNTRIES.latvia = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n\n      // Differentiate between legal entities and natural bodies. For the latter we simply check that\n      // the first six digits correspond to valid DDMMYY dates.\n      if ((/^[0-3]/).test(vat)) {\n        return !!(/^[0-3][0-9][0-1][0-9]/).test(vat);\n      } else {\n\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 10; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n\n        // Establish check digits by getting modulus 11.\n        if (total % 11 === 4 && vat[0] === 9) total = total - 45;\n\n        if (total % 11 === 4) {\n          total = 4 - total % 11;\n        } else if (total % 11 > 4) {\n          total = 14 - total % 11;\n        } else if (total % 11 < 4) {\n          total = 3 - total % 11;\n        }\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(10, 11);\n        return total === expect;\n      }\n    },\n    rules: {\n      multipliers: [\n        9,\n        1,\n        4,\n        8,\n        3,\n        10,\n        2,\n        5,\n        7,\n        6\n      ],\n      regex: /^(LV)(\\d{11})$/\n    }\n  };\n  COUNTRIES.lithunia = (function() {\n\n    function _extractDigit(vat, multiplier, key) {\n      return +vat.charAt(key) * multiplier[key];\n    }\n\n\n    function _doubleCheckCalculation(vat, total, rules) {\n      if (total % 11 === 10) {\n        total = 0;\n        for (var i = 0; i < 8; i++) {\n          total += _extractDigit(vat, rules.multipliers.short, i);\n        }\n      }\n\n      return total;\n    }\n\n    function extractDigit(vat, total) {\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * (i + 1);\n      }\n      return total;\n    }\n\n    function checkDigit(total) {\n      total = total % 11;\n      if (total === 10) {\n        total = 0;\n      }\n\n      return total;\n    }\n\n    function _check9DigitVat(vat, rules) {\n      // 9 character VAT numbers are for legal persons\n      var total = 0;\n      if (vat.length === 9) {\n\n        // 8th character must be one\n        if (!(/^\\d{7}1/).test(vat)) return false;\n\n        // Extract the next digit and multiply by the counter+1.\n        total = extractDigit(vat, total);\n\n        // Can have a double check digit calculation!\n        total = _doubleCheckCalculation(vat, total, rules);\n\n        // Establish check digit.\n        total = checkDigit(total);\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        var expect = +vat.slice(8, 9);\n        return total === expect;\n      }\n      return false;\n    }\n\n    function extractDigit12(vat, total, rules) {\n      for (var k = 0; k < 11; k++) {\n        total += _extractDigit(vat, rules.multipliers.med, k);\n      }\n      return total;\n    }\n\n    function _doubleCheckCalculation12(vat, total, rules) {\n      if (total % 11 === 10) {\n        total = 0;\n        for (var l = 0; l < 11; l++) {\n          total += _extractDigit(vat, rules.multipliers.alt, l);\n        }\n      }\n\n      return total;\n    }\n\n    function _check12DigitVat(vat, rules) {\n      var total = 0;\n\n      // 12 character VAT numbers are for temporarily registered taxpayers\n      if (vat.length === 12) {\n\n        // 11th character must be one\n        if (!(rules.check).test(vat)) return false;\n\n        // Extract the next digit and multiply by the counter+1.\n        total = extractDigit12(vat, total, rules);\n\n        // Can have a double check digit calculation!\n        total = _doubleCheckCalculation12(vat, total, rules);\n\n        // Establish check digit.\n        total = checkDigit(total);\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        var expect = +vat.slice(11, 12);\n        return total === expect;\n      }\n\n      return false;\n    }\n\n    return {\n      calcs: function(vat) {\n        return _check9DigitVat(vat, this.rules) || _check12DigitVat(vat, this.rules);\n      },\n      rules: {\n        multipliers: {\n          \"short\": [\n            3,\n            4,\n            5,\n            6,\n            7,\n            8,\n            9,\n            1\n          ],\n          \"med\": [\n            1,\n            2,\n            3,\n            4,\n            5,\n            6,\n            7,\n            8,\n            9,\n            1,\n            2\n          ],\n          \"alt\": [\n            3,\n            4,\n            5,\n            6,\n            7,\n            8,\n            9,\n            1,\n            2,\n            3,\n            4\n          ]\n        },\n        check: /^\\d{10}1/,\n        regex: /^(LT)(\\d{9}|\\d{12})$/\n      }\n    };\n  })();\n  COUNTRIES.luxembourg = {\n    calcs: function(vat) {\n      var expect = +vat.slice(6, 8);\n      var checkDigit = +vat.slice(0, 6) % 89;\n      // Checks the check digits of a Luxembourg VAT number.\n\n      return checkDigit === expect;\n    },\n    rules: {\n      regex: /^(LU)(\\d{8})$/\n    }\n  };\n  COUNTRIES.malta = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 6; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      }\n\n      // Establish check digits by getting modulus 37.\n      total = 37 - total % 37;\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(6, 8);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [\n        3,\n        4,\n        6,\n        7,\n        8,\n        9\n      ],\n      regex: /^(MT)([1-9]\\d{7})$/\n    }\n  };\n  COUNTRIES.netherlands = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      }\n\n      // Establish check digits by getting modulus 11.\n      total = total % 11;\n      if (total > 9) {\n        total = 0;\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [\n        9,\n        8,\n        7,\n        6,\n        5,\n        4,\n        3,\n        2\n      ],\n      regex: /^(NL)(\\d{9})B\\d{2}$/\n    }\n  };\n  COUNTRIES.norway = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n      // See http://www.brreg.no/english/coordination/number.html\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      }\n\n      // Establish check digits by getting modulus 11. Check digits > 9 are invalid\n      total = 11 - total % 11;\n\n      if (total === 11) {\n        total = 0;\n      }\n\n      if (total < 10) {\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(8, 9);\n        return total === expect;\n      }\n    },\n    rules: {\n      multipliers: [\n        3,\n        2,\n        7,\n        6,\n        5,\n        4,\n        3,\n        2\n      ],\n      regex: /^(NO)(\\d{9})$/\n    }\n  };\n  COUNTRIES.poland = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 9; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      }\n\n      // Establish check digits subtracting modulus 11 from 11.\n      total = total % 11;\n      if (total > 9) {\n        total = 0;\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(9, 10);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [\n        6,\n        5,\n        7,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7\n      ],\n      regex: /^(PL)(\\d{10})$/\n    }\n  };\n  COUNTRIES.portugal = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      }\n\n      // Establish check digits subtracting modulus 11 from 11.\n      total = 11 - total % 11;\n      if (total > 9) {\n        total = 0;\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [\n        9,\n        8,\n        7,\n        6,\n        5,\n        4,\n        3,\n        2\n      ],\n      regex: /^(PT)(\\d{9})$/\n    }\n  };\n  COUNTRIES.romania = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n\n      // Extract the next digit and multiply by the counter.\n      var vatLength = vat.length;\n      var multipliers = this.rules.multipliers.slice(10 - vatLength);\n\n      for (var i = 0; i < vat.length - 1; i++) {\n        total += +vat.charAt(i) * multipliers[i];\n      }\n\n      // Establish check digits by getting modulus 11.\n      total = (10 * total) % 11;\n      if (total === 10) total = 0;\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(vat.length - 1, vat.length);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [\n        7,\n        5,\n        3,\n        2,\n        1,\n        7,\n        5,\n        3,\n        2\n      ],\n      regex: /^(RO)([1-9]\\d{1,9})$/\n    }\n  };\n  COUNTRIES.russia = (function() {\n\n    function _check10DigitINN(vat, rules) {\n      var total = 0;\n\n      if (vat.length === 10) {\n\n        for (var i = 0; i < 10; i++) {\n          total += +vat.charAt(i) * rules.multipliers.m_1[i];\n        }\n\n        total = total % 11;\n        if (total > 9) {\n          total = total % 10;\n        }\n\n        // Compare it with the last character of the VAT number. If it is the same, then it's valid\n        var expect = +vat.slice(9, 10);\n        return total === expect;\n      }\n\n      return false;\n    }\n\n    function _check12DigitINN(vat, rules) {\n      var total1 = 0;\n      var total2 = 0;\n\n      if (vat.length === 12) {\n\n        for (var j = 0; j < 11; j++) {\n          total1 += +vat.charAt(j) * rules.multipliers.m_2[j];\n        }\n\n        total1 = total1 % 11;\n\n        if (total1 > 9) {\n          total1 = total1 % 10;\n        }\n\n        for (var k = 0; k < 11; k++) {\n          total2 += +vat.charAt(k) * rules.multipliers.m_3[k];\n        }\n\n        total2 = total2 % 11;\n        if (total2 > 9) {\n          total2 = total2 % 10;\n        }\n\n        // Compare the first check with the 11th character and the second check with the 12th and last\n        // character of the VAT number. If they're both the same, then it's valid\n        var expect = (total1 === +vat.slice(10, 11));\n        var expect2 = (total2 === +vat.slice(11, 12));\n        return (expect) && (expect2);\n      }\n\n      return false;\n    }\n\n\n    return {\n      calcs: function(vat) {\n        // See http://russianpartner.biz/test_inn.html for algorithm\n        return _check10DigitINN(vat, this.rules) || _check12DigitINN(vat, this.rules);\n      },\n      rules: {\n        multipliers: {\n          \"m_1\": [\n            2,\n            4,\n            10,\n            3,\n            5,\n            9,\n            4,\n            6,\n            8,\n            0\n          ],\n          \"m_2\": [\n            7,\n            2,\n            4,\n            10,\n            3,\n            5,\n            9,\n            4,\n            6,\n            8,\n            0\n          ],\n          \"m_3\": [\n            3,\n            7,\n            2,\n            4,\n            10,\n            3,\n            5,\n            9,\n            4,\n            6,\n            8,\n            0\n          ]\n        },\n        regex: /^(RU)(\\d{10}|\\d{12})$/\n      }\n    };\n  })();\n  COUNTRIES.serbia = {\n    calcs: function(vat) {\n      // Checks the check digits of a Serbian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n      var product = 10;\n      var sum = 0;\n      var checkDigit;\n\n      for (var i = 0; i < 8; i++) {\n\n        // Extract the next digit and implement the algorithm\n        sum = (+vat.charAt(i) + product) % 10;\n        if (sum === 0) {\n          sum = 10;\n        }\n        product = (2 * sum) % 11;\n      }\n\n      // Now check that we have the right check digit\n      var expect = 1;\n      checkDigit = (product + (+vat.slice(8, 9))) % 10;\n      return checkDigit === expect;\n    },\n    rules: {\n      regex: /^(RS)(\\d{9})$/\n    }\n  };\n  COUNTRIES.slovakia_republic = {\n    calcs: function(vat) {\n      var expect = 0;\n      var checkDigit = (vat % 11);\n      return checkDigit === expect;\n    },\n    rules: {\n      regex: /^(SK)([1-9]\\d[2346-9]\\d{7})$/\n    }\n  };\n  COUNTRIES.slovenia = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      }\n\n      // Establish check digits using modulus 11\n      total = 11 - total % 11;\n      if (total === 10) {\n        total = 0;\n      }\n\n      // Compare the number with the last character of the VAT number. If it is the\n      // same, then it's a valid check digit.\n      expect = +vat.slice(7, 8);\n      return !!(total !== 11 && total === expect);\n    },\n    rules: {\n      multipliers: [\n        8,\n        7,\n        6,\n        5,\n        4,\n        3,\n        2\n      ],\n      regex: /^(SI)([1-9]\\d{7})$/\n    }\n  };\n  COUNTRIES.spain = {\n    calcs: function(vat) {\n      var i = 0;\n      var total = 0;\n      var temp;\n      var expect;\n\n      // National juridical entities\n      if (this.rules.additional[0].test(vat)) {\n\n        // Extract the next digit and multiply by the counter.\n        for (i = 0; i < 7; i++) {\n          temp = vat.charAt(i + 1) * this.rules.multipliers[i];\n          if (temp > 9)\n            total += Math.floor(temp / 10) + temp % 10;\n          else\n            total += temp;\n        }\n        // Now calculate the check digit itself.\n        total = 10 - total % 10;\n        if (total === 10) {\n          total = 0;\n        }\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(8, 9);\n        return total === expect;\n      }\n\n      // Juridical entities other than national ones\n      else if (this.rules.additional[1].test(vat)) {\n\n        // Extract the next digit and multiply by the counter.\n        for (i = 0; i < 7; i++) {\n          temp = vat.charAt(i + 1) * this.rules.multipliers[i];\n          if (temp > 9)\n            total += Math.floor(temp / 10) + temp % 10;\n          else\n            total += temp;\n        }\n\n        // Now calculate the check digit itself.\n        total = 10 - total % 10;\n        total = String.fromCharCode(total + 64);\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = vat.slice(8, 9);\n        return total === expect;\n      }\n\n      // Personal number (NIF) (starting with numeric of Y or Z)\n      else if (this.rules.additional[2].test(vat)) {\n        var tempnumber = vat;\n        if (tempnumber.substring(0, 1) === 'Y') tempnumber = tempnumber.replace(/Y/, '1');\n        if (tempnumber.substring(0, 1) === 'Z') tempnumber = tempnumber.replace(/Z/, '2');\n        expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+tempnumber.substring(0, 8) % 23);\n        return tempnumber.charAt(8) === expect;\n      }\n\n      // Personal number (NIF) (starting with K, L, M, or X)\n      else if (this.rules.additional[3].test(vat)) {\n        expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+vat.substring(1, 8) % 23);\n        return vat.charAt(8) === expect;\n      } else return false;\n    },\n    rules: {\n      multipliers: [\n        2,\n        1,\n        2,\n        1,\n        2,\n        1,\n        2\n      ],\n      regex: [\n        /^(ES)([A-Z]\\d{8})$/,\n        /^(ES)([A-HN-SW]\\d{7}[A-J])$/,\n        /^(ES)([0-9YZ]\\d{7}[A-Z])$/,\n        /^(ES)([KLMX]\\d{7}[A-Z])$/\n      ],\n      additional: [\n        /^[A-H|J|U|V]\\d{8}$/,\n        /^[A-H|N-S|W]\\d{7}[A-J]$/,\n        /^[0-9|Y|Z]\\d{7}[A-Z]$/,\n        /^[K|L|M|X]\\d{7}[A-Z]$/\n      ]\n    }\n  };\n  COUNTRIES.sweden = {\n    calcs: function(vat) {\n      var expect;\n\n      // Calculate R where R = R1 + R3 + R5 + R7 + R9, and Ri = INT(Ci/5) + (Ci*2) modulo 10\n      var R = 0;\n      var digit;\n      for (var i = 0; i < 9; i = i + 2) {\n        digit = +vat.charAt(i);\n        R += Math.floor(digit / 5) + ((digit * 2) % 10);\n      }\n\n      // Calculate S where S = C2 + C4 + C6 + C8\n      var S = 0;\n      for (var j = 1; j < 9; j = j + 2) {\n        S += +vat.charAt(j);\n      }\n\n      var checkDigit = (10 - (R + S) % 10) % 10;\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(9, 10);\n\n      return checkDigit === expect;\n    },\n    rules: {\n      regex: /^(SE)(\\d{10}01)$/\n    }\n  };\n  COUNTRIES.switzerland = {\n    calcs: function(vat) {\n      var total = 0;\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      }\n\n      // Establish check digit.\n      total = 11 - total % 11;\n      if (total === 10) return false;\n      if (total === 11) total = 0;\n\n      // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n      var expect = +vat.substr(8, 1);\n      return total === expect;\n    },\n    rules: {\n      multipliers: [\n        5,\n        4,\n        3,\n        2,\n        7,\n        6,\n        5,\n        4\n      ],\n      regex: /^(CHE)(\\d{9})(MWST)?$/\n    }\n  };\n  COUNTRIES.united_kingdom = {\n    calcs: function(vat) {\n      var total = 0;\n      var expect;\n\n      // Government departments\n      if (vat.substr(0, 2) === 'GD') {\n        expect = 500;\n        return vat.substr(2, 3) < expect;\n      }\n\n      // Health authorities\n      if (vat.substr(0, 2) === 'HA') {\n        expect = 499;\n        return vat.substr(2, 3) > expect;\n      }\n\n      // Standard and commercial numbers\n\n\n      // 0 VAT numbers disallowed!\n      if (+vat.slice(0) === 0) return false;\n\n      // Check range is OK for modulus 97 calculation\n      var no = +vat.slice(0, 7);\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i];\n      }\n\n      // Old numbers use a simple 97 modulus, but new numbers use an adaptation of that (less 55). Our\n      // VAT number could use either system, so we check it against both.\n\n      // Establish check digits by subtracting 97 from total until negative.\n      var checkDigit = total;\n      while (checkDigit > 0) {\n        checkDigit = checkDigit - 97;\n      }\n\n      // Get the absolute value and compare it with the last two characters of the VAT number. If the\n      // same, then it is a valid traditional check digit. However, even then the number must fit within\n      // certain specified ranges.\n      checkDigit = Math.abs(checkDigit);\n      if (checkDigit === +vat.slice(7, 9) && no < 9990001 && (no < 100000 || no > 999999) && (no < 9490001 || no > 9700000)) return true;\n\n      // Now try the new method by subtracting 55 from the check digit if we can - else add 42\n      if (checkDigit >= 55)\n        checkDigit = checkDigit - 55;\n      else\n        checkDigit = checkDigit + 42;\n      expect = +vat.slice(7, 9);\n      return !!(checkDigit === expect && no > 1000000);\n    },\n    rules: {\n      multipliers: [\n        8,\n        7,\n        6,\n        5,\n        4,\n        3,\n        2\n      ],\n      regex: [\n        /^(GB)?(\\d{9})$/,\n        /^(GB)?(\\d{12})$/,\n        /^(GB)?(GD\\d{3})$/,\n        /^(GB)?(HA\\d{3})$/\n      ]\n    }\n  };\n\n  //Support of node.js\n\n  if (typeof module === 'object' && module.exports) module.exports = exports;\n\n  return exports;\n\n})();"],"sourceRoot":"/source/"}