{"version":3,"sources":["jsvat.js"],"names":["jsvat","_validateRegex","vat","regex","test","_validateRules","countryName","parsedNum","exec","vatNum","COUNTRIES","calcs","_validate","result","removeExtraChars","toString","toUpperCase","replace","_isCountryBlocked","config","length","indexOf","checkValidity","regexArr","rules","i","isValid","exports","checkVAT","cleanVAT","value","country","prefix","isoCountryCodes","ccArr","hasOwnProperty","austria","name","codes","temp","total","charAt","this","multipliers","Math","floor","slice","belgium","bulgaria","_increase","from","to","incr","_increase2","expect","month","physical","substr","foreigner","miscellaneous","croatia","product","sum","cyprus","String","fromCharCode","czech_republic","additional","j","lookup","denmark","estonia","europe","finland","france","substring","germany","checkDigit","greece","hungary","ireland","typeFormats","first","third","italy","latvia","lithuania","_extractDigit","multiplier","key","_doubleCheckCalculation","short","extractDigit","extractDigit12","k","med","_doubleCheckCalculation12","l","alt","check","luxembourg","malta","netherlands","norway","poland","portugal","romania","vatLength","russia","m_1","total1","total2","m_2","m_3","expect2","serbia","slovakia_republic","slovenia","spain","tempnumber","sweden","digit","R","S","switzerland","united_kingdom","no","abs","module"],"mappings":"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","file":"jsvat.min.js","sourcesContent":["var jsvat = (function() {\n\n  'use strict'\n\n  var COUNTRIES = {}\n\n  function _validateRegex(vat, regex) {\n    return regex.test(vat)\n  }\n\n  function _validateRules(vat, regex, countryName) {\n    var parsedNum = regex.exec(vat)\n    var vatNum = parsedNum[2]\n\n    return COUNTRIES[countryName].calcs(vatNum)\n  }\n\n  function _validate(vat, regex, countryName) {\n    var result = false\n    if (_validateRegex(vat, regex)) {\n      result = _validateRules(vat, regex, countryName)\n    }\n    return result\n  }\n\n  function removeExtraChars(vat) {\n    vat = vat || ''\n    return vat.toString().toUpperCase().replace(/(\\s|-|\\.)+/g, '')\n  }\n\n  function _isCountryBlocked(config, countryName) {\n    if (!config || config.length === 0) return false\n\n    return config.indexOf(countryName) === -1\n  }\n\n  function checkValidity(vat, countryName) {\n    var regexArr = COUNTRIES[countryName].rules.regex\n    for (var i = 0; i < regexArr.length; i++) {\n      var isValid = _validate(vat, regexArr[i], countryName)\n      if (isValid) return isValid && !_isCountryBlocked(exports.config, countryName)\n    }\n    return false\n  }\n\n  function Country(name, calcFn, rules) {\n    this.name = name\n    this.calcFn = calcFn\n    this.rules = rules\n  }\n\n  var exports = {\n    config: [],\n    checkVAT: function(vat) {\n      var cleanVAT = removeExtraChars(vat)\n      var result = {\n        value: cleanVAT,\n        isValid: false,\n        country: null,\n        prefix: null,\n        isoCountryCodes: null\n      }\n\n      if (!vat) return result\n\n      var ccArr = (/^([A-z])*/).exec(cleanVAT)\n      if (ccArr && ccArr.length > 0) result.prefix = ccArr[0].toUpperCase()\n\n      for (var countryName in COUNTRIES) {\n        if (COUNTRIES.hasOwnProperty(countryName)) {\n          result.isValid = checkValidity(result.value, countryName)\n\n          if (result.isValid) {\n            result.country = countryName\n            return result\n          }\n        }\n      }\n\n      return result\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.austria = {\n    name: 'Austria',\n    codes: ['AT', 'AUT', '040'],\n    calcs: function(vat) {\n      var total = 0\n      var temp\n\n      for (var i = 0; i < 7; i++) {\n        temp = vat.charAt(i) * this.rules.multipliers[i]\n\n        if (temp > 9) {\n          total += Math.floor(temp / 10) + temp % 10\n        } else {\n          total += temp\n        }\n      }\n\n      total = 10 - (total + 4) % 10\n      if (total === 10) total = 0\n\n      return total === +vat.slice(7, 8)\n    },\n    rules: {\n      multipliers: [1, 2, 1, 2, 1, 2, 1],\n      regex: [/^(AT)U(\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.belgium = {\n    name: 'Belgium',\n    codes: ['BE', 'BEL', '056'],\n    calcs: function(vat) {\n      if (vat.length === 9) {\n        vat = '0' + vat\n      }\n\n      if (+vat.slice(1, 2) === 0) return false\n\n      var check = (97 - +vat.slice(0, 8) % 97)\n      return check === +vat.slice(8, 10)\n    },\n    rules: {\n      regex: [/^(BE)(0?\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.bulgaria = {\n    name: 'Bulgaria',\n    codes: ['BG', 'BGR', '100'],\n    calcs: function(vat) {\n      function _increase(value, vat, from, to, incr) {\n        for (var i = from; i < to; i++) {\n          value += +vat.charAt(i) * (i + incr)\n        }\n        return value\n      }\n\n      function _increase2(value, vat, from, to, multipliers) {\n        for (var i = from; i < to; i++) {\n          value += +vat.charAt(i) * multipliers[i]\n        }\n        return value\n      }\n\n      function _checkNineLengthVat(vat) {\n        var total\n        var temp = 0\n        var expect = +vat.slice(8)\n\n        temp = _increase(temp, vat, 0, 8, 1)\n\n        total = temp % 11\n        if (total !== 10) {\n          return total === expect\n        }\n\n        temp = _increase(0, vat, 0, 8, 3)\n\n        total = temp % 11\n        if (total === 10) total = 0\n\n        return total === expect\n      }\n\n      function _isPhysicalPerson(vat, rules) {\n        // 10 digit VAT code - see if it relates to a standard physical person\n        if ((/^\\d\\d[0-5]\\d[0-3]\\d\\d{4}$/).test(vat)) {\n          // Check month\n          var month = +vat.slice(2, 4)\n          if ((month > 0 && month < 13) || (month > 20 && month < 33) || (month > 40 && month < 53)) {\n            var total = _increase2(0, vat, 0, 9, rules.multipliers.physical)\n            // Establish check digit.\n            total = total % 11\n            if (total === 10) total = 0\n            // Check to see if the check digit given is correct, If not, try next type of person\n            if (total === +vat.substr(9, 1)) return true\n          }\n        }\n\n        return false\n      }\n\n      function _isForeigner(vat, rules) {\n        // Extract the next digit and multiply by the counter.\n        var total = _increase2(0, vat, 0, 9, rules.multipliers.foreigner)\n\n        // Check to see if the check digit given is correct, If not, try next type of person\n        if (total % 10 === +vat.substr(9, 1)) {\n          return true\n        }\n      }\n\n      function _miscellaneousVAT(vat, rules) {\n        // Finally, if not yet identified, see if it conforms to a miscellaneous VAT number\n        var total = _increase2(0, vat, 0, 9, rules.multipliers.miscellaneous)\n\n        // Establish check digit.\n        total = 11 - total % 11\n        if (total === 10) return false\n        if (total === 11) total = 0\n\n        // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n        var expect = +vat.substr(9, 1)\n        return total === expect\n      }\n\n      if (vat.length === 9) {\n        return _checkNineLengthVat(vat)\n      } else {\n        return _isPhysicalPerson(vat, this.rules) || _isForeigner(vat, this.rules) || _miscellaneousVAT(vat, this.rules)\n      }\n    },\n    rules: {\n      multipliers: {\n        physical: [2, 4, 8, 5, 10, 9, 7, 3, 6],\n        foreigner: [21, 19, 17, 13, 11, 9, 7, 3, 1],\n        miscellaneous: [4, 3, 2, 7, 6, 5, 4, 3, 2]\n      },\n      regex: [/^(BG)(\\d{9,10})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.croatia = {\n    name: 'Croatia',\n    codes: ['HR', 'HRV', '191'],\n    calcs: function(vat) {\n      var expect\n\n      // Checks the check digits of a Croatian VAT number using ISO 7064, MOD 11-10 for check digit.\n      var product = 10\n      var sum = 0\n\n      for (var i = 0; i < 10; i++) {\n        // Extract the next digit and implement the algorithm\n        sum = (+vat.charAt(i) + product) % 10\n        if (sum === 0) {\n          sum = 10\n        }\n\n        product = (2 * sum) % 11\n      }\n\n      // Now check that we have the right check digit\n      expect = +vat.slice(10, 11)\n      return (product + expect) % 10 === 1\n    },\n    rules: {\n      regex: [/^(HR)(\\d{11})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.cyprus = {\n    name: 'Cyprus',\n    codes: ['CY', 'CYP', '196'],\n    calcs: function(vat) {\n      var total = 0\n      var expect\n\n      // Not allowed to start with '12'\n      if (+vat.slice(0, 2) === 12) return false\n\n      // Extract the next digit and multiply by the counter.\n\n      for (var i = 0; i < 8; i++) {\n        var temp = +vat.charAt(i)\n        if (i % 2 === 0) {\n          switch (temp) {\n            case 0:\n              temp = 1\n              break\n            case 1:\n              temp = 0\n              break\n            case 2:\n              temp = 5\n              break\n            case 3:\n              temp = 7\n              break\n            case 4:\n              temp = 9\n              break\n            default:\n              temp = temp * 2 + 3\n          }\n        }\n        total += temp\n      }\n\n      // Establish check digit using modulus 26, and translate to char. equivalent.\n      total = total % 26\n      total = String.fromCharCode(total + 65)\n\n      // Check to see if the check digit given is correct\n      expect = vat.substr(8, 1)\n      return total === expect\n    },\n    rules: {\n      regex: [/^(CY)([0-59]\\d{7}[A-Z])$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.czech_republic = {\n    name: 'Czech Republic',\n    codes: ['CZ', 'CZE', '203'],\n    calcs: function(vat) {\n      function _isLegalEntities(vat, rules) {\n        var total = 0\n\n        if (rules.additional[0].test(vat)) {\n          // Extract the next digit and multiply by the counter.\n          for (var i = 0; i < 7; i++) {\n            total += +vat.charAt(i) * rules.multipliers[i]\n          }\n\n          // Establish check digit.\n          total = 11 - total % 11\n          if (total === 10) total = 0\n          if (total === 11) total = 1\n\n          // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n          var expect = +vat.slice(7, 8)\n          return total === expect\n        }\n\n        return false\n      }\n\n      function _isIndividualType2(vat, rules) {\n        var total = 0\n\n        if (rules.additional[2].test(vat)) {\n          // Extract the next digit and multiply by the counter.\n          for (var j = 0; j < 7; j++) {\n            total += +vat.charAt(j + 1) * rules.multipliers[j]\n          }\n\n          // Establish check digit.\n          total = 11 - total % 11\n          if (total === 10) total = 0\n          if (total === 11) total = 1\n\n          // Convert calculated check digit according to a lookup table\n          var expect = +vat.slice(8, 9)\n          return rules.lookup[total - 1] === expect\n        }\n\n        return false\n      }\n\n      function _isIndividualType3(vat, rules) {\n        if (rules.additional[3].test(vat)) {\n          var temp = +vat.slice(0, 2) + vat.slice(2, 4) + vat.slice(4, 6) + vat.slice(6, 8) + vat.slice(8)\n          var expect = +vat % 11 === 0\n          return !!(temp % 11 === 0 && expect)\n        }\n\n        return false\n      }\n\n      if (_isLegalEntities(vat, this.rules)) return true\n      if (_isIndividualType2(vat, this.rules)) return true\n      if (_isIndividualType3(vat, this.rules)) return true\n\n      return false\n    },\n    rules: {\n      multipliers: [8, 7, 6, 5, 4, 3, 2],\n      lookup: [8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 10],\n      regex: [/^(CZ)(\\d{8,10})(\\d{3})?$/],\n      additional: [\n        /^\\d{8}$/,\n        /^[0-5][0-9][0|1|5|6]\\d[0-3]\\d\\d{3}$/,\n        /^6\\d{8}$/,\n        /^\\d{2}[0-3|5-8]\\d[0-3]\\d\\d{4}$/\n      ]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.denmark = {\n    name: 'Denmark',\n    codes: ['DK', 'DNK', '208'],\n    calcs: function(vat) {\n      var total = 0\n\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      return total % 11 === 0\n    },\n    rules: {\n      multipliers: [2, 7, 6, 5, 4, 3, 2, 1],\n      regex: [/^(DK)(\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.estonia = {\n    name: 'Estonia',\n    codes: ['EE', 'EST', '233'],\n    calcs: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits using modulus 10.\n      total = 10 - total % 10\n      if (total === 10) total = 0\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9)\n      return total === expect\n    },\n    rules: {\n      multipliers: [3, 7, 1, 3, 7, 1, 3, 7],\n      regex: [/^(EE)(10\\d{7})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.europe = {\n    name: 'Europe',\n    codes: [],\n    calcs: function() {\n      // We know little about EU numbers apart from the fact that the first 3 digits represent the\n      // country, and that there are nine digits in total.\n      return true\n    },\n    rules: {\n      regex: [/^(EU)(\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.finland = {\n    name: 'Finland',\n    codes: ['FI', 'FIN', '246'],\n    calcs: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) total += +vat.charAt(i) * this.rules.multipliers[i]\n\n      // Establish check digit.\n      total = 11 - total % 11\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(7, 8)\n      return total === expect\n    },\n    rules: {\n      multipliers: [7, 9, 10, 5, 8, 4, 2],\n      regex: [/^(FI)(\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.france = {\n    name: 'France',\n    codes: ['FR', 'FRA', '250'],\n    calcs: function(vat) {\n      var total\n      var expect\n\n      // Checks the check digits of a French VAT number.\n      if (!(/^\\d{11}$/).test(vat)) {\n        return true\n      }\n\n      // Extract the last nine digits as an integer.\n      total = +vat.substring(2)\n\n      // Establish check digit.\n      total = (total * 100 + 12) % 97\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(0, 2)\n      return total === expect\n    },\n    rules: {\n      regex: [\n        /^(FR)(\\d{11})$/,\n        /^(FR)([A-HJ-NP-Z]\\d{10})$/,\n        /^(FR)(\\d[A-HJ-NP-Z]\\d{9})$/,\n        /^(FR)([A-HJ-NP-Z]{2}\\d{9})$/\n      ]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.germany = {\n    name: 'Germany',\n    codes: ['DE', 'DEU', '276'],\n    calcs: function(vat) {\n      // Checks the check digits of a German VAT number.\n      var product = 10\n      var sum = 0\n      var checkDigit = 0\n      var expect\n\n      for (var i = 0; i < 8; i++) {\n        // Extract the next digit and implement peculiar algorithm!.\n        sum = (+vat.charAt(i) + product) % 10\n        if (sum === 0) {\n          sum = 10\n        }\n        product = (2 * sum) % 11\n      }\n\n      // Establish check digit.\n      if (11 - product === 10) {\n        checkDigit = 0\n      } else {\n        checkDigit = 11 - product\n      }\n\n      // Compare it with the last two characters of the VAT number. If the same, then it is a valid\n      // check digit.\n      expect = +vat.slice(8, 9)\n      return checkDigit === expect\n    },\n    rules: {\n      regex: [/^(DE)([1-9]\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.greece = {\n    name: 'Greece',\n    codes: ['GR', 'GRC', '300'],\n    calcs: function(vat) {\n      var total = 0\n      var expect\n\n      // eight character numbers should be prefixed with an 0.\n      if (vat.length === 8) {\n        vat = '0' + vat\n      }\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digit.\n      total = total % 11\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9)\n      return total === expect\n    },\n    rules: {\n      multipliers: [\n        256,\n        128,\n        64,\n        32,\n        16,\n        8,\n        4,\n        2\n      ],\n      regex: [/^(EL)(\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.hungary = {\n    name: 'Hungary',\n    codes: ['HU', 'HUN', '348'],\n    calcs: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digit.\n      total = 10 - total % 10\n      if (total === 10) total = 0\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(7, 8)\n      return total === expect\n    },\n    rules: {\n      multipliers: [\n        9,\n        7,\n        3,\n        1,\n        9,\n        7,\n        3\n      ],\n      regex: [/^(HU)(\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.ireland = {\n    name: 'Ireland',\n    codes: ['IE', 'IRL', '372'],\n    calcs: function(vat) {\n      var total = 0\n      var expect\n\n      // If the code is type 1 format, we need to convert it to the new before performing the validation.\n      if (this.rules.typeFormats.first.test(vat)) {\n        vat = '0' + vat.substring(2, 7) + vat.substring(0, 1) + vat.substring(7, 8)\n      }\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // If the number is type 3 then we need to include the trailing A or H in the calculation\n      if (this.rules.typeFormats.third.test(vat)) {\n        // Add in a multiplier for the character A (1*9=9) or H (8*9=72)\n        if (vat.charAt(8) === 'H') {\n          total += 72\n        } else {\n          total += 9\n        }\n      }\n\n      // Establish check digit using modulus 23, and translate to char. equivalent.\n      total = total % 23\n      if (total === 0) {\n        total = 'W'\n      } else {\n        total = String.fromCharCode(total + 64)\n      }\n\n      // Compare it with the eighth character of the VAT number. If it's the same, then it's valid.\n      expect = vat.slice(7, 8)\n      return total === expect\n    },\n    rules: {\n      multipliers: [8, 7, 6, 5, 4, 3, 2],\n      typeFormats: {\n        first: /^\\d[A-Z*+]/,\n        third: /^\\d{7}[A-Z][AH]$/\n      },\n      regex: [\n        /^(IE)(\\d{7}[A-W])$/,\n        /^(IE)([7-9][A-Z*+)]\\d{5}[A-W])$/,\n        /^(IE)(\\d{7}[A-W][AH])$/\n      ]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.italy = {\n    name: 'Italy',\n    codes: ['IT', 'ITA', '380'],\n    calcs: function(vat) {\n      var total = 0\n      var temp\n      var expect\n\n      // The last three digits are the issuing office, and cannot exceed more 201, unless 999 or 888\n      if (+vat.slice(0, 7) === 0) {\n        return false\n      }\n\n      temp = +vat.slice(7, 10)\n      if ((temp < 1) || (temp > 201) && temp !== 999 && temp !== 888) {\n        return false\n      }\n\n      // Extract the next digit and multiply by the appropriate\n      for (var i = 0; i < 10; i++) {\n        temp = +vat.charAt(i) * this.rules.multipliers[i]\n        if (temp > 9)\n          total += Math.floor(temp / 10) + temp % 10\n        else\n          total += temp\n      }\n\n      // Establish check digit.\n      total = 10 - total % 10\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(10, 11)\n      return total === expect\n    },\n    rules: {\n      multipliers: [1, 2, 1, 2, 1, 2, 1, 2, 1, 2],\n      regex: [/^(IT)(\\d{11})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.latvia = {\n    name: 'Latvia',\n    codes: ['LV', 'LVA', '428'],\n    calcs: function(vat) {\n      var total = 0\n      var expect\n\n      // Differentiate between legal entities and natural bodies. For the latter we simply check that\n      // the first six digits correspond to valid DDMMYY dates.\n      if ((/^[0-3]/).test(vat)) {\n        return !!(/^[0-3][0-9][0-1][0-9]/).test(vat)\n      } else {\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 10; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i]\n        }\n\n        // Establish check digits by getting modulus 11.\n        if (total % 11 === 4 && vat[0] === 9) total = total - 45\n\n        if (total % 11 === 4) {\n          total = 4 - total % 11\n        } else if (total % 11 > 4) {\n          total = 14 - total % 11\n        } else if (total % 11 < 4) {\n          total = 3 - total % 11\n        }\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(10, 11)\n        return total === expect\n      }\n    },\n    rules: {\n      multipliers: [9, 1, 4, 8, 3, 10, 2, 5, 7, 6],\n      regex: [/^(LV)(\\d{11})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.lithuania = {\n    name: 'Lithuania',\n    codes: ['LT', 'LTU', '440'],\n    calcs: function(vat) {\n      function _extractDigit(vat, multiplier, key) {\n        return +vat.charAt(key) * multiplier[key]\n      }\n\n      function _doubleCheckCalculation(vat, total, rules) {\n        if (total % 11 === 10) {\n          total = 0\n          for (var i = 0; i < 8; i++) {\n            total += _extractDigit(vat, rules.multipliers.short, i)\n          }\n        }\n\n        return total\n      }\n\n      function extractDigit(vat, total) {\n        for (var i = 0; i < 8; i++) {\n          total += +vat.charAt(i) * (i + 1)\n        }\n        return total\n      }\n\n      function checkDigit(total) {\n        total = total % 11\n        if (total === 10) {\n          total = 0\n        }\n\n        return total\n      }\n\n      function _check9DigitVat(vat, rules) {\n        // 9 character VAT numbers are for legal persons\n        var total = 0\n        if (vat.length === 9) {\n          // 8th character must be one\n          if (!(/^\\d{7}1/).test(vat)) return false\n\n          // Extract the next digit and multiply by the counter+1.\n          total = extractDigit(vat, total)\n\n          // Can have a double check digit calculation!\n          total = _doubleCheckCalculation(vat, total, rules)\n\n          // Establish check digit.\n          total = checkDigit(total)\n\n          // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n          var expect = +vat.slice(8, 9)\n          return total === expect\n        }\n        return false\n      }\n\n      function extractDigit12(vat, total, rules) {\n        for (var k = 0; k < 11; k++) {\n          total += _extractDigit(vat, rules.multipliers.med, k)\n        }\n        return total\n      }\n\n      function _doubleCheckCalculation12(vat, total, rules) {\n        if (total % 11 === 10) {\n          total = 0\n          for (var l = 0; l < 11; l++) {\n            total += _extractDigit(vat, rules.multipliers.alt, l)\n          }\n        }\n\n        return total\n      }\n\n      function _check12DigitVat(vat, rules) {\n        var total = 0\n\n        // 12 character VAT numbers are for temporarily registered taxpayers\n        if (vat.length === 12) {\n          // 11th character must be one\n          if (!(rules.check).test(vat)) return false\n\n          // Extract the next digit and multiply by the counter+1.\n          total = extractDigit12(vat, total, rules)\n\n          // Can have a double check digit calculation!\n          total = _doubleCheckCalculation12(vat, total, rules)\n\n          // Establish check digit.\n          total = checkDigit(total)\n\n          // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n          var expect = +vat.slice(11, 12)\n          return total === expect\n        }\n\n        return false\n      }\n\n      return _check9DigitVat(vat, this.rules) || _check12DigitVat(vat, this.rules)\n    },\n    rules: {\n      multipliers: {\n        short: [3, 4, 5, 6, 7, 8, 9, 1],\n        med: [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2],\n        alt: [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4]\n      },\n      check: /^\\d{10}1/,\n      regex: [/^(LT)(\\d{9}|\\d{12})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.luxembourg = {\n    name: 'Luxembourg',\n    codes: ['LU', 'LUX', '442'],\n    calcs: function(vat) {\n      var expect = +vat.slice(6, 8)\n      var checkDigit = +vat.slice(0, 6) % 89\n      // Checks the check digits of a Luxembourg VAT number.\n\n      return checkDigit === expect\n    },\n    rules: {\n      regex: [/^(LU)(\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.malta = {\n    name: 'Malta',\n    codes: ['MT', 'MLT', '470'],\n    calcs: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 6; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits by getting modulus 37.\n      total = 37 - total % 37\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(6, 8)\n      return total === expect\n    },\n    rules: {\n      multipliers: [3, 4, 6, 7, 8, 9],\n      regex: [/^(MT)([1-9]\\d{7})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.netherlands = {\n    name: 'Netherlands',\n    codes: ['NL', 'NLD', '528'],\n    calcs: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits by getting modulus 11.\n      total = total % 11\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9)\n      return total === expect\n    },\n    rules: {\n      multipliers: [9, 8, 7, 6, 5, 4, 3, 2],\n      regex: [/^(NL)(\\d{9})B\\d{2}$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.norway = {\n    name: 'Norway',\n    codes: ['NO', 'NOR', '578'],\n    calcs: function(vat) {\n      var total = 0\n      var expect\n      // See http://www.brreg.no/english/coordination/number.html\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits by getting modulus 11. Check digits > 9 are invalid\n      total = 11 - total % 11\n\n      if (total === 11) {\n        total = 0\n      }\n\n      if (total < 10) {\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(8, 9)\n        return total === expect\n      }\n    },\n    rules: {\n      multipliers: [3, 2, 7, 6, 5, 4, 3, 2],\n      regex: [/^(NO)(\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.poland = {\n    name: 'Poland',\n    codes: ['PL', 'POL', '616'],\n    calcs: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 9; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits subtracting modulus 11 from 11.\n      total = total % 11\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(9, 10)\n      return total === expect\n    },\n    rules: {\n      multipliers: [6, 5, 7, 2, 3, 4, 5, 6, 7],\n      regex: [/^(PL)(\\d{10})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.portugal = {\n    name: 'Portugal',\n    codes: ['PT', 'PRT', '620'],\n    calcs: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits subtracting modulus 11 from 11.\n      total = 11 - total % 11\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9)\n      return total === expect\n    },\n    rules: {\n      multipliers: [9, 8, 7, 6, 5, 4, 3, 2],\n      regex: [/^(PT)(\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.romania = {\n    name: 'Romania',\n    codes: ['RO', 'ROU', '642'],\n    calcs: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      var vatLength = vat.length\n      var multipliers = this.rules.multipliers.slice(10 - vatLength)\n\n      for (var i = 0; i < vat.length - 1; i++) {\n        total += +vat.charAt(i) * multipliers[i]\n      }\n\n      // Establish check digits by getting modulus 11.\n      total = (10 * total) % 11\n      if (total === 10) total = 0\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(vat.length - 1, vat.length)\n      return total === expect\n    },\n    rules: {\n      multipliers: [7, 5, 3, 2, 1, 7, 5, 3, 2],\n      regex: [/^(RO)([1-9]\\d{1,9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.russia = {\n    name: 'Russian Federation',\n    codes: ['RU', 'RUS', '643'],\n    calcs: function(vat) {\n      function _check10DigitINN(vat, rules) {\n        var total = 0\n\n        if (vat.length === 10) {\n          for (var i = 0; i < 10; i++) {\n            total += +vat.charAt(i) * rules.multipliers.m_1[i]\n          }\n\n          total = total % 11\n          if (total > 9) {\n            total = total % 10\n          }\n\n          // Compare it with the last character of the VAT number. If it is the same, then it's valid\n          var expect = +vat.slice(9, 10)\n          return total === expect\n        }\n\n        return false\n      }\n\n      function _check12DigitINN(vat, rules) {\n        var total1 = 0\n        var total2 = 0\n\n        if (vat.length === 12) {\n          for (var j = 0; j < 11; j++) {\n            total1 += +vat.charAt(j) * rules.multipliers.m_2[j]\n          }\n\n          total1 = total1 % 11\n\n          if (total1 > 9) {\n            total1 = total1 % 10\n          }\n\n          for (var k = 0; k < 11; k++) {\n            total2 += +vat.charAt(k) * rules.multipliers.m_3[k]\n          }\n\n          total2 = total2 % 11\n          if (total2 > 9) {\n            total2 = total2 % 10\n          }\n\n          // Compare the first check with the 11th character and the second check with the 12th and last\n          // character of the VAT number. If they're both the same, then it's valid\n          var expect = (total1 === +vat.slice(10, 11))\n          var expect2 = (total2 === +vat.slice(11, 12))\n          return (expect) && (expect2)\n        }\n\n        return false\n      }\n\n      // See http://russianpartner.biz/test_inn.html for algorithm\n      return _check10DigitINN(vat, this.rules) || _check12DigitINN(vat, this.rules)\n    },\n    rules: {\n      multipliers: {\n        m_1: [2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\n        m_2: [7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\n        m_3: [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0]\n      },\n      regex: [/^(RU)(\\d{10}|\\d{12})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.serbia = {\n    name: 'Serbia',\n    codes: ['RS', 'SRB', '688'],\n    calcs: function(vat) {\n      // Checks the check digits of a Serbian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n      var product = 10\n      var sum = 0\n      var checkDigit\n\n      for (var i = 0; i < 8; i++) {\n        // Extract the next digit and implement the algorithm\n        sum = (+vat.charAt(i) + product) % 10\n        if (sum === 0) {\n          sum = 10\n        }\n        product = (2 * sum) % 11\n      }\n\n      // Now check that we have the right check digit\n      var expect = 1\n      checkDigit = (product + (+vat.slice(8, 9))) % 10\n      return checkDigit === expect\n    },\n    rules: {\n      regex: [/^(RS)(\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.slovakia_republic = {\n    name: 'Slovakia_',\n    codes: ['SK', 'SVK', '703'],\n    calcs: function(vat) {\n      var expect = 0\n      var checkDigit = (vat % 11)\n      return checkDigit === expect\n    },\n    rules: {\n      regex: [/^(SK)([1-9]\\d[2346-9]\\d{7})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.slovenia = {\n    name: 'Slovenia',\n    codes: ['SI', 'SVN', '705'],\n    calcs: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits using modulus 11\n      total = 11 - total % 11\n      if (total === 10) {\n        total = 0\n      }\n\n      // Compare the number with the last character of the VAT number. If it is the\n      // same, then it's a valid check digit.\n      expect = +vat.slice(7, 8)\n      return !!(total !== 11 && total === expect)\n    },\n    rules: {\n      multipliers: [8, 7, 6, 5, 4, 3, 2],\n      regex: [/^(SI)([1-9]\\d{7})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.spain = {\n    name: 'Spain',\n    codes: ['ES', 'ESP', '724'],\n    calcs: function(vat) {\n      var i = 0\n      var total = 0\n      var temp\n      var expect\n\n      // National juridical entities\n      if (this.rules.additional[0].test(vat)) {\n        // Extract the next digit and multiply by the counter.\n        for (i = 0; i < 7; i++) {\n          temp = vat.charAt(i + 1) * this.rules.multipliers[i]\n          if (temp > 9)\n            total += Math.floor(temp / 10) + temp % 10\n          else\n            total += temp\n        }\n        // Now calculate the check digit itself.\n        total = 10 - total % 10\n        if (total === 10) {\n          total = 0\n        }\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(8, 9)\n        return total === expect\n      }\n\n      // Juridical entities other than national ones\n      else if (this.rules.additional[1].test(vat)) {\n        // Extract the next digit and multiply by the counter.\n        for (i = 0; i < 7; i++) {\n          temp = vat.charAt(i + 1) * this.rules.multipliers[i]\n          if (temp > 9)\n            total += Math.floor(temp / 10) + temp % 10\n          else\n            total += temp\n        }\n\n        // Now calculate the check digit itself.\n        total = 10 - total % 10\n        total = String.fromCharCode(total + 64)\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = vat.slice(8, 9)\n        return total === expect\n      }\n\n      // Personal number (NIF) (starting with numeric of Y or Z)\n      else if (this.rules.additional[2].test(vat)) {\n        var tempnumber = vat\n        if (tempnumber.substring(0, 1) === 'Y') tempnumber = tempnumber.replace(/Y/, '1')\n        if (tempnumber.substring(0, 1) === 'Z') tempnumber = tempnumber.replace(/Z/, '2')\n        expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+tempnumber.substring(0, 8) % 23)\n        return tempnumber.charAt(8) === expect\n      }\n\n      // Personal number (NIF) (starting with K, L, M, or X)\n      else if (this.rules.additional[3].test(vat)) {\n        expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+vat.substring(1, 8) % 23)\n        return vat.charAt(8) === expect\n      } else return false\n    },\n    rules: {\n      multipliers: [2, 1, 2, 1, 2, 1, 2],\n      regex: [\n        /^(ES)([A-Z]\\d{8})$/,\n        /^(ES)([A-HN-SW]\\d{7}[A-J])$/,\n        /^(ES)([0-9YZ]\\d{7}[A-Z])$/,\n        /^(ES)([KLMX]\\d{7}[A-Z])$/\n      ],\n      additional: [\n        /^[A-H|J|U|V]\\d{8}$/,\n        /^[A-H|N-S|W]\\d{7}[A-J]$/,\n        /^[0-9|Y|Z]\\d{7}[A-Z]$/,\n        /^[K|L|M|X]\\d{7}[A-Z]$/\n      ]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.sweden = {\n    name: 'Sweden',\n    codes: ['SE', 'SWE', '752'],\n    calcs: function(vat) {\n      var expect\n\n      // Calculate R where R = R1 + R3 + R5 + R7 + R9, and Ri = INT(Ci/5) + (Ci*2) modulo 10\n      var R = 0\n      var digit\n      for (var i = 0; i < 9; i = i + 2) {\n        digit = +vat.charAt(i)\n        R += Math.floor(digit / 5) + ((digit * 2) % 10)\n      }\n\n      // Calculate S where S = C2 + C4 + C6 + C8\n      var S = 0\n      for (var j = 1; j < 9; j = j + 2) {\n        S += +vat.charAt(j)\n      }\n\n      var checkDigit = (10 - (R + S) % 10) % 10\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(9, 10)\n\n      return checkDigit === expect\n    },\n    rules: {\n      regex: [/^(SE)(\\d{10}01)$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.switzerland = {\n    name: 'Switzerland',\n    codes: ['CH', 'CHE', '756'],\n    calcs: function(vat) {\n      var total = 0\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digit.\n      total = 11 - total % 11\n      if (total === 10) return false\n      if (total === 11) total = 0\n\n      // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n      var expect = +vat.substr(8, 1)\n      return total === expect\n    },\n    rules: {\n      multipliers: [5, 4, 3, 2, 7, 6, 5, 4],\n      regex: [/^(CHE)(\\d{9})(MWST)?$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  COUNTRIES.united_kingdom = {\n    name: 'United Kingdom',\n    codes: ['GB', 'GBR', '826'],\n    calcs: function(vat) {\n      var total = 0\n      var expect\n\n      // Government departments\n      if (vat.substr(0, 2) === 'GD') {\n        expect = 500\n        return vat.substr(2, 3) < expect\n      }\n\n      // Health authorities\n      if (vat.substr(0, 2) === 'HA') {\n        expect = 499\n        return vat.substr(2, 3) > expect\n      }\n\n      // Standard and commercial numbers\n\n      // 0 VAT numbers disallowed!\n      if (+vat.slice(0) === 0) return false\n\n      // Check range is OK for modulus 97 calculation\n      var no = +vat.slice(0, 7)\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Old numbers use a simple 97 modulus, but new numbers use an adaptation of that (less 55). Our\n      // VAT number could use either system, so we check it against both.\n\n      // Establish check digits by subtracting 97 from total until negative.\n      var checkDigit = total\n      while (checkDigit > 0) {\n        checkDigit = checkDigit - 97\n      }\n\n      // Get the absolute value and compare it with the last two characters of the VAT number. If the\n      // same, then it is a valid traditional check digit. However, even then the number must fit within\n      // certain specified ranges.\n      checkDigit = Math.abs(checkDigit)\n      if (checkDigit === +vat.slice(7, 9) && no < 9990001 && (no < 100000 || no > 999999) && (no < 9490001 || no > 9700000)) return true\n\n      // Now try the new method by subtracting 55 from the check digit if we can - else add 42\n      if (checkDigit >= 55)\n        checkDigit = checkDigit - 55\n      else\n        checkDigit = checkDigit + 42\n      expect = +vat.slice(7, 9)\n      return !!(checkDigit === expect && no > 1000000)\n    },\n    rules: {\n      multipliers: [8, 7, 6, 5, 4, 3, 2],\n      regex: [\n        /^(GB)?(\\d{9})$/,\n        /^(GB)?(\\d{12})$/,\n        /^(GB)?(GD\\d{3})$/,\n        /^(GB)?(HA\\d{3})$/\n      ]\n    }\n  }\n\n\n  //Support of node.js\n\n  if (typeof module === 'object' && module.exports) module.exports = exports\n\n  return exports\n\n})()"]}