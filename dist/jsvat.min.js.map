{"version":3,"sources":["jsvat.js"],"names":["jsvat","Result","vat","isValid","country","this","value","name","isoCode","short","codes","long","numeric","removeExtraChars","toString","toUpperCase","replace","isValEqToCode","val","isInList","list","i","length","isBlocked","blocked","allowed","isAllowed","getCountry","countries","prefix","match","k","hasOwnProperty","isVatValid","calcFn","exports","checkVAT","Error","cleanVAT","result","austria","temp","total","charAt","rules","multipliers","Math","floor","slice","regex","belgium","bulgaria","_increase","from","to","incr","_increase2","expect","test","month","physical","substr","foreigner","miscellaneous","croatia","product","sum","cyprus","String","fromCharCode","czech_republic","additional","j","lookup","denmark","estonia","europe","finland","france","substring","germany","checkDigit","greece","hungary","ireland","typeFormats","first","third","italy","latvia","lithuania","_extractDigit","multiplier","key","_doubleCheckCalculation","extractDigit","extractDigit12","med","_doubleCheckCalculation12","l","alt","check","luxembourg","malta","netherlands","norway","poland","portugal","romania","vatLength","russia","m_1","total1","total2","m_2","m_3","expect2","serbia","slovakia_republic","slovenia","spain","tempnumber","sweden","digit","R","S","switzerland","united_kingdom","no","abs","module"],"mappings":"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","file":"jsvat.min.js","sourcesContent":["var jsvat = (function() {\n\n  'use strict'\n\n  function Result(vat, isValid, country) {\n    this.value = vat || null\n    this.isValid = !!isValid\n\n    if (country) {\n      this.country = {\n        name: country.name,\n        isoCode: {\n          short: country.codes[0],\n          long: country.codes[1],\n          numeric: country.codes[2]\n        }\n      }\n    }\n  }\n\n  function removeExtraChars(vat) {\n    vat = vat || ''\n    return vat.toString().toUpperCase().replace(/(\\s|-|\\.)+/g, '')\n  }\n\n  function isValEqToCode(val, codes) {\n    return (val === codes[0] || val === codes[1] || val === codes[2])\n  }\n\n  function isInList(list, country) {\n    for (var i = 0; i < list.length; i++) {\n      var val = list[i]\n      if (val === country.name) return true\n      if (isValEqToCode(val, country.codes)) return true\n    }\n\n    return false\n  }\n\n  function isBlocked(country, blocked, allowed) {\n    var isBlocked = isInList(blocked, country)\n    if (isBlocked) return true\n    var isAllowed = isInList(allowed, country)\n    return allowed.length > 0 && !isAllowed\n  }\n\n  function getCountry(vat, countries) {\n    var prefix = vat.match(/^[A-z]{2}/)[0]\n\n    for (var k in countries) {\n      if (countries.hasOwnProperty(k)) {\n        if (isValEqToCode(prefix, countries[k].codes)) return countries[k]\n      }\n    }\n\n    return null\n  }\n\n  function isVatValid(vat, country) {\n    return country.calcFn(vat)\n  }\n\n  var exports = {\n    blocked: [],\n    allowed: [],\n    countries: {},\n    checkVAT: function(vat) {\n      if (!vat) throw new Error('VAT should be specified')\n      var cleanVAT = removeExtraChars(vat)\n      var result = new Result(cleanVAT)\n\n      var country = getCountry(cleanVAT, this.countries)\n      if (isBlocked(country, this.blocked, this.allowed)) return result\n\n      var isValid = isVatValid(cleanVAT, country)\n      if (isValid) return new Result(cleanVAT, isValid, country)\n\n      return result\n    }\n  }\n\n\n  // eslint-disable-next-line no-undef\n  exports.countries.austria = {\n    name: 'Austria',\n    codes: ['AT', 'AUT', '040'],\n    calcFn: function(vat) {\n      var total = 0\n      var temp\n\n      for (var i = 0; i < 7; i++) {\n        temp = vat.charAt(i) * this.rules.multipliers[i]\n\n        if (temp > 9) {\n          total += Math.floor(temp / 10) + temp % 10\n        } else {\n          total += temp\n        }\n      }\n\n      total = 10 - (total + 4) % 10\n      if (total === 10) total = 0\n\n      return total === +vat.slice(7, 8)\n    },\n    rules: {\n      multipliers: [1, 2, 1, 2, 1, 2, 1],\n      regex: [/^(AT)U(\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.belgium = {\n    name: 'Belgium',\n    codes: ['BE', 'BEL', '056'],\n    calcFn: function(vat) {\n      if (vat.length === 9) {\n        vat = '0' + vat\n      }\n\n      if (+vat.slice(1, 2) === 0) return false\n\n      var check = (97 - +vat.slice(0, 8) % 97)\n      return check === +vat.slice(8, 10)\n    },\n    rules: {\n      regex: [/^(BE)(0?\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.bulgaria = {\n    name: 'Bulgaria',\n    codes: ['BG', 'BGR', '100'],\n    calcFn: function(vat) {\n      function _increase(value, vat, from, to, incr) {\n        for (var i = from; i < to; i++) {\n          value += +vat.charAt(i) * (i + incr)\n        }\n        return value\n      }\n\n      function _increase2(value, vat, from, to, multipliers) {\n        for (var i = from; i < to; i++) {\n          value += +vat.charAt(i) * multipliers[i]\n        }\n        return value\n      }\n\n      function _checkNineLengthVat(vat) {\n        var total\n        var temp = 0\n        var expect = +vat.slice(8)\n\n        temp = _increase(temp, vat, 0, 8, 1)\n\n        total = temp % 11\n        if (total !== 10) {\n          return total === expect\n        }\n\n        temp = _increase(0, vat, 0, 8, 3)\n\n        total = temp % 11\n        if (total === 10) total = 0\n\n        return total === expect\n      }\n\n      function _isPhysicalPerson(vat, rules) {\n        // 10 digit VAT code - see if it relates to a standard physical person\n        if ((/^\\d\\d[0-5]\\d[0-3]\\d\\d{4}$/).test(vat)) {\n          // Check month\n          var month = +vat.slice(2, 4)\n          if ((month > 0 && month < 13) || (month > 20 && month < 33) || (month > 40 && month < 53)) {\n            var total = _increase2(0, vat, 0, 9, rules.multipliers.physical)\n            // Establish check digit.\n            total = total % 11\n            if (total === 10) total = 0\n            // Check to see if the check digit given is correct, If not, try next type of person\n            if (total === +vat.substr(9, 1)) return true\n          }\n        }\n\n        return false\n      }\n\n      function _isForeigner(vat, rules) {\n        // Extract the next digit and multiply by the counter.\n        var total = _increase2(0, vat, 0, 9, rules.multipliers.foreigner)\n\n        // Check to see if the check digit given is correct, If not, try next type of person\n        if (total % 10 === +vat.substr(9, 1)) {\n          return true\n        }\n      }\n\n      function _miscellaneousVAT(vat, rules) {\n        // Finally, if not yet identified, see if it conforms to a miscellaneous VAT number\n        var total = _increase2(0, vat, 0, 9, rules.multipliers.miscellaneous)\n\n        // Establish check digit.\n        total = 11 - total % 11\n        if (total === 10) return false\n        if (total === 11) total = 0\n\n        // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n        var expect = +vat.substr(9, 1)\n        return total === expect\n      }\n\n      if (vat.length === 9) {\n        return _checkNineLengthVat(vat)\n      } else {\n        return _isPhysicalPerson(vat, this.rules) || _isForeigner(vat, this.rules) || _miscellaneousVAT(vat, this.rules)\n      }\n    },\n    rules: {\n      multipliers: {\n        physical: [2, 4, 8, 5, 10, 9, 7, 3, 6],\n        foreigner: [21, 19, 17, 13, 11, 9, 7, 3, 1],\n        miscellaneous: [4, 3, 2, 7, 6, 5, 4, 3, 2]\n      },\n      regex: [/^(BG)(\\d{9,10})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.croatia = {\n    name: 'Croatia',\n    codes: ['HR', 'HRV', '191'],\n    calcFn: function(vat) {\n      var expect\n\n      // Checks the check digits of a Croatian VAT number using ISO 7064, MOD 11-10 for check digit.\n      var product = 10\n      var sum = 0\n\n      for (var i = 0; i < 10; i++) {\n        // Extract the next digit and implement the algorithm\n        sum = (+vat.charAt(i) + product) % 10\n        if (sum === 0) {\n          sum = 10\n        }\n\n        product = (2 * sum) % 11\n      }\n\n      // Now check that we have the right check digit\n      expect = +vat.slice(10, 11)\n      return (product + expect) % 10 === 1\n    },\n    rules: {\n      regex: [/^(HR)(\\d{11})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.cyprus = {\n    name: 'Cyprus',\n    codes: ['CY', 'CYP', '196'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Not allowed to start with '12'\n      if (+vat.slice(0, 2) === 12) return false\n\n      // Extract the next digit and multiply by the counter.\n\n      for (var i = 0; i < 8; i++) {\n        var temp = +vat.charAt(i)\n        if (i % 2 === 0) {\n          switch (temp) {\n            case 0:\n              temp = 1\n              break\n            case 1:\n              temp = 0\n              break\n            case 2:\n              temp = 5\n              break\n            case 3:\n              temp = 7\n              break\n            case 4:\n              temp = 9\n              break\n            default:\n              temp = temp * 2 + 3\n          }\n        }\n        total += temp\n      }\n\n      // Establish check digit using modulus 26, and translate to char. equivalent.\n      total = total % 26\n      total = String.fromCharCode(total + 65)\n\n      // Check to see if the check digit given is correct\n      expect = vat.substr(8, 1)\n      return total === expect\n    },\n    rules: {\n      regex: [/^(CY)([0-59]\\d{7}[A-Z])$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.czech_republic = {\n    name: 'Czech Republic',\n    codes: ['CZ', 'CZE', '203'],\n    calcFn: function(vat) {\n      function _isLegalEntities(vat, rules) {\n        var total = 0\n\n        if (rules.additional[0].test(vat)) {\n          // Extract the next digit and multiply by the counter.\n          for (var i = 0; i < 7; i++) {\n            total += +vat.charAt(i) * rules.multipliers[i]\n          }\n\n          // Establish check digit.\n          total = 11 - total % 11\n          if (total === 10) total = 0\n          if (total === 11) total = 1\n\n          // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n          var expect = +vat.slice(7, 8)\n          return total === expect\n        }\n\n        return false\n      }\n\n      function _isIndividualType2(vat, rules) {\n        var total = 0\n\n        if (rules.additional[2].test(vat)) {\n          // Extract the next digit and multiply by the counter.\n          for (var j = 0; j < 7; j++) {\n            total += +vat.charAt(j + 1) * rules.multipliers[j]\n          }\n\n          // Establish check digit.\n          total = 11 - total % 11\n          if (total === 10) total = 0\n          if (total === 11) total = 1\n\n          // Convert calculated check digit according to a lookup table\n          var expect = +vat.slice(8, 9)\n          return rules.lookup[total - 1] === expect\n        }\n\n        return false\n      }\n\n      function _isIndividualType3(vat, rules) {\n        if (rules.additional[3].test(vat)) {\n          var temp = +vat.slice(0, 2) + vat.slice(2, 4) + vat.slice(4, 6) + vat.slice(6, 8) + vat.slice(8)\n          var expect = +vat % 11 === 0\n          return !!(temp % 11 === 0 && expect)\n        }\n\n        return false\n      }\n\n      if (_isLegalEntities(vat, this.rules)) return true\n      if (_isIndividualType2(vat, this.rules)) return true\n      if (_isIndividualType3(vat, this.rules)) return true\n\n      return false\n    },\n    rules: {\n      multipliers: [8, 7, 6, 5, 4, 3, 2],\n      lookup: [8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 10],\n      regex: [/^(CZ)(\\d{8,10})(\\d{3})?$/],\n      additional: [\n        /^\\d{8}$/,\n        /^[0-5][0-9][0|1|5|6]\\d[0-3]\\d\\d{3}$/,\n        /^6\\d{8}$/,\n        /^\\d{2}[0-3|5-8]\\d[0-3]\\d\\d{4}$/\n      ]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.denmark = {\n    name: 'Denmark',\n    codes: ['DK', 'DNK', '208'],\n    calcFn: function(vat) {\n      var total = 0\n\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      return total % 11 === 0\n    },\n    rules: {\n      multipliers: [2, 7, 6, 5, 4, 3, 2, 1],\n      regex: [/^(DK)(\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.estonia = {\n    name: 'Estonia',\n    codes: ['EE', 'EST', '233'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits using modulus 10.\n      total = 10 - total % 10\n      if (total === 10) total = 0\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9)\n      return total === expect\n    },\n    rules: {\n      multipliers: [3, 7, 1, 3, 7, 1, 3, 7],\n      regex: [/^(EE)(10\\d{7})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.europe = {\n    name: 'Europe',\n    codes: ['EU'],\n    calcFn: function() {\n      // We know little about EU numbers apart from the fact that the first 3 digits represent the\n      // country, and that there are nine digits in total.\n      return true\n    },\n    rules: {\n      regex: [/^(EU)(\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.finland = {\n    name: 'Finland',\n    codes: ['FI', 'FIN', '246'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) total += +vat.charAt(i) * this.rules.multipliers[i]\n\n      // Establish check digit.\n      total = 11 - total % 11\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(7, 8)\n      return total === expect\n    },\n    rules: {\n      multipliers: [7, 9, 10, 5, 8, 4, 2],\n      regex: [/^(FI)(\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.france = {\n    name: 'France',\n    codes: ['FR', 'FRA', '250'],\n    calcFn: function(vat) {\n      var total\n      var expect\n\n      // Checks the check digits of a French VAT number.\n      if (!(/^\\d{11}$/).test(vat)) {\n        return true\n      }\n\n      // Extract the last nine digits as an integer.\n      total = +vat.substring(2)\n\n      // Establish check digit.\n      total = (total * 100 + 12) % 97\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(0, 2)\n      return total === expect\n    },\n    rules: {\n      regex: [\n        /^(FR)(\\d{11})$/,\n        /^(FR)([A-HJ-NP-Z]\\d{10})$/,\n        /^(FR)(\\d[A-HJ-NP-Z]\\d{9})$/,\n        /^(FR)([A-HJ-NP-Z]{2}\\d{9})$/\n      ]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.germany = {\n    name: 'Germany',\n    codes: ['DE', 'DEU', '276'],\n    calcFn: function(vat) {\n      // Checks the check digits of a German VAT number.\n      var product = 10\n      var sum = 0\n      var checkDigit = 0\n      var expect\n\n      for (var i = 0; i < 8; i++) {\n        // Extract the next digit and implement peculiar algorithm!.\n        sum = (+vat.charAt(i) + product) % 10\n        if (sum === 0) {\n          sum = 10\n        }\n        product = (2 * sum) % 11\n      }\n\n      // Establish check digit.\n      if (11 - product === 10) {\n        checkDigit = 0\n      } else {\n        checkDigit = 11 - product\n      }\n\n      // Compare it with the last two characters of the VAT number. If the same, then it is a valid\n      // check digit.\n      expect = +vat.slice(8, 9)\n      return checkDigit === expect\n    },\n    rules: {\n      regex: [/^(DE)([1-9]\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.greece = {\n    name: 'Greece',\n    codes: ['GR', 'GRC', '300'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // eight character numbers should be prefixed with an 0.\n      if (vat.length === 8) {\n        vat = '0' + vat\n      }\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digit.\n      total = total % 11\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9)\n      return total === expect\n    },\n    rules: {\n      multipliers: [\n        256,\n        128,\n        64,\n        32,\n        16,\n        8,\n        4,\n        2\n      ],\n      regex: [/^(EL)(\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.hungary = {\n    name: 'Hungary',\n    codes: ['HU', 'HUN', '348'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digit.\n      total = 10 - total % 10\n      if (total === 10) total = 0\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(7, 8)\n      return total === expect\n    },\n    rules: {\n      multipliers: [\n        9,\n        7,\n        3,\n        1,\n        9,\n        7,\n        3\n      ],\n      regex: [/^(HU)(\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.ireland = {\n    name: 'Ireland',\n    codes: ['IE', 'IRL', '372'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // If the code is type 1 format, we need to convert it to the new before performing the validation.\n      if (this.rules.typeFormats.first.test(vat)) {\n        vat = '0' + vat.substring(2, 7) + vat.substring(0, 1) + vat.substring(7, 8)\n      }\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // If the number is type 3 then we need to include the trailing A or H in the calculation\n      if (this.rules.typeFormats.third.test(vat)) {\n        // Add in a multiplier for the character A (1*9=9) or H (8*9=72)\n        if (vat.charAt(8) === 'H') {\n          total += 72\n        } else {\n          total += 9\n        }\n      }\n\n      // Establish check digit using modulus 23, and translate to char. equivalent.\n      total = total % 23\n      if (total === 0) {\n        total = 'W'\n      } else {\n        total = String.fromCharCode(total + 64)\n      }\n\n      // Compare it with the eighth character of the VAT number. If it's the same, then it's valid.\n      expect = vat.slice(7, 8)\n      return total === expect\n    },\n    rules: {\n      multipliers: [8, 7, 6, 5, 4, 3, 2],\n      typeFormats: {\n        first: /^\\d[A-Z*+]/,\n        third: /^\\d{7}[A-Z][AH]$/\n      },\n      regex: [\n        /^(IE)(\\d{7}[A-W])$/,\n        /^(IE)([7-9][A-Z*+)]\\d{5}[A-W])$/,\n        /^(IE)(\\d{7}[A-W][AH])$/\n      ]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.italy = {\n    name: 'Italy',\n    codes: ['IT', 'ITA', '380'],\n    calcFn: function(vat) {\n      var total = 0\n      var temp\n      var expect\n\n      // The last three digits are the issuing office, and cannot exceed more 201, unless 999 or 888\n      if (+vat.slice(0, 7) === 0) {\n        return false\n      }\n\n      temp = +vat.slice(7, 10)\n      if ((temp < 1) || (temp > 201) && temp !== 999 && temp !== 888) {\n        return false\n      }\n\n      // Extract the next digit and multiply by the appropriate\n      for (var i = 0; i < 10; i++) {\n        temp = +vat.charAt(i) * this.rules.multipliers[i]\n        if (temp > 9)\n          total += Math.floor(temp / 10) + temp % 10\n        else\n          total += temp\n      }\n\n      // Establish check digit.\n      total = 10 - total % 10\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(10, 11)\n      return total === expect\n    },\n    rules: {\n      multipliers: [1, 2, 1, 2, 1, 2, 1, 2, 1, 2],\n      regex: [/^(IT)(\\d{11})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.latvia = {\n    name: 'Latvia',\n    codes: ['LV', 'LVA', '428'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Differentiate between legal entities and natural bodies. For the latter we simply check that\n      // the first six digits correspond to valid DDMMYY dates.\n      if ((/^[0-3]/).test(vat)) {\n        return !!(/^[0-3][0-9][0-1][0-9]/).test(vat)\n      } else {\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 10; i++) {\n          total += +vat.charAt(i) * this.rules.multipliers[i]\n        }\n\n        // Establish check digits by getting modulus 11.\n        if (total % 11 === 4 && vat[0] === 9) total = total - 45\n\n        if (total % 11 === 4) {\n          total = 4 - total % 11\n        } else if (total % 11 > 4) {\n          total = 14 - total % 11\n        } else if (total % 11 < 4) {\n          total = 3 - total % 11\n        }\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(10, 11)\n        return total === expect\n      }\n    },\n    rules: {\n      multipliers: [9, 1, 4, 8, 3, 10, 2, 5, 7, 6],\n      regex: [/^(LV)(\\d{11})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.lithuania = {\n    name: 'Lithuania',\n    codes: ['LT', 'LTU', '440'],\n    calcFn: function(vat) {\n      function _extractDigit(vat, multiplier, key) {\n        return +vat.charAt(key) * multiplier[key]\n      }\n\n      function _doubleCheckCalculation(vat, total, rules) {\n        if (total % 11 === 10) {\n          total = 0\n          for (var i = 0; i < 8; i++) {\n            total += _extractDigit(vat, rules.multipliers.short, i)\n          }\n        }\n\n        return total\n      }\n\n      function extractDigit(vat, total) {\n        for (var i = 0; i < 8; i++) {\n          total += +vat.charAt(i) * (i + 1)\n        }\n        return total\n      }\n\n      function checkDigit(total) {\n        total = total % 11\n        if (total === 10) {\n          total = 0\n        }\n\n        return total\n      }\n\n      function _check9DigitVat(vat, rules) {\n        // 9 character VAT numbers are for legal persons\n        var total = 0\n        if (vat.length === 9) {\n          // 8th character must be one\n          if (!(/^\\d{7}1/).test(vat)) return false\n\n          // Extract the next digit and multiply by the counter+1.\n          total = extractDigit(vat, total)\n\n          // Can have a double check digit calculation!\n          total = _doubleCheckCalculation(vat, total, rules)\n\n          // Establish check digit.\n          total = checkDigit(total)\n\n          // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n          var expect = +vat.slice(8, 9)\n          return total === expect\n        }\n        return false\n      }\n\n      function extractDigit12(vat, total, rules) {\n        for (var k = 0; k < 11; k++) {\n          total += _extractDigit(vat, rules.multipliers.med, k)\n        }\n        return total\n      }\n\n      function _doubleCheckCalculation12(vat, total, rules) {\n        if (total % 11 === 10) {\n          total = 0\n          for (var l = 0; l < 11; l++) {\n            total += _extractDigit(vat, rules.multipliers.alt, l)\n          }\n        }\n\n        return total\n      }\n\n      function _check12DigitVat(vat, rules) {\n        var total = 0\n\n        // 12 character VAT numbers are for temporarily registered taxpayers\n        if (vat.length === 12) {\n          // 11th character must be one\n          if (!(rules.check).test(vat)) return false\n\n          // Extract the next digit and multiply by the counter+1.\n          total = extractDigit12(vat, total, rules)\n\n          // Can have a double check digit calculation!\n          total = _doubleCheckCalculation12(vat, total, rules)\n\n          // Establish check digit.\n          total = checkDigit(total)\n\n          // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n          var expect = +vat.slice(11, 12)\n          return total === expect\n        }\n\n        return false\n      }\n\n      return _check9DigitVat(vat, this.rules) || _check12DigitVat(vat, this.rules)\n    },\n    rules: {\n      multipliers: {\n        short: [3, 4, 5, 6, 7, 8, 9, 1],\n        med: [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2],\n        alt: [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4]\n      },\n      check: /^\\d{10}1/,\n      regex: [/^(LT)(\\d{9}|\\d{12})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.luxembourg = {\n    name: 'Luxembourg',\n    codes: ['LU', 'LUX', '442'],\n    calcFn: function(vat) {\n      var expect = +vat.slice(6, 8)\n      var checkDigit = +vat.slice(0, 6) % 89\n      // Checks the check digits of a Luxembourg VAT number.\n\n      return checkDigit === expect\n    },\n    rules: {\n      regex: [/^(LU)(\\d{8})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.malta = {\n    name: 'Malta',\n    codes: ['MT', 'MLT', '470'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 6; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits by getting modulus 37.\n      total = 37 - total % 37\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(6, 8)\n      return total === expect\n    },\n    rules: {\n      multipliers: [3, 4, 6, 7, 8, 9],\n      regex: [/^(MT)([1-9]\\d{7})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.netherlands = {\n    name: 'Netherlands',\n    codes: ['NL', 'NLD', '528'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits by getting modulus 11.\n      total = total % 11\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9)\n      return total === expect\n    },\n    rules: {\n      multipliers: [9, 8, 7, 6, 5, 4, 3, 2],\n      regex: [/^(NL)(\\d{9})B\\d{2}$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.norway = {\n    name: 'Norway',\n    codes: ['NO', 'NOR', '578'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n      // See http://www.brreg.no/english/coordination/number.html\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits by getting modulus 11. Check digits > 9 are invalid\n      total = 11 - total % 11\n\n      if (total === 11) {\n        total = 0\n      }\n\n      if (total < 10) {\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(8, 9)\n        return total === expect\n      }\n    },\n    rules: {\n      multipliers: [3, 2, 7, 6, 5, 4, 3, 2],\n      regex: [/^(NO)(\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.poland = {\n    name: 'Poland',\n    codes: ['PL', 'POL', '616'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 9; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits subtracting modulus 11 from 11.\n      total = total % 11\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(9, 10)\n      return total === expect\n    },\n    rules: {\n      multipliers: [6, 5, 7, 2, 3, 4, 5, 6, 7],\n      regex: [/^(PL)(\\d{10})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.portugal = {\n    name: 'Portugal',\n    codes: ['PT', 'PRT', '620'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits subtracting modulus 11 from 11.\n      total = 11 - total % 11\n      if (total > 9) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9)\n      return total === expect\n    },\n    rules: {\n      multipliers: [9, 8, 7, 6, 5, 4, 3, 2],\n      regex: [/^(PT)(\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.romania = {\n    name: 'Romania',\n    codes: ['RO', 'ROU', '642'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      var vatLength = vat.length\n      var multipliers = this.rules.multipliers.slice(10 - vatLength)\n\n      for (var i = 0; i < vat.length - 1; i++) {\n        total += +vat.charAt(i) * multipliers[i]\n      }\n\n      // Establish check digits by getting modulus 11.\n      total = (10 * total) % 11\n      if (total === 10) total = 0\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(vat.length - 1, vat.length)\n      return total === expect\n    },\n    rules: {\n      multipliers: [7, 5, 3, 2, 1, 7, 5, 3, 2],\n      regex: [/^(RO)([1-9]\\d{1,9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.russia = {\n    name: 'Russian Federation',\n    codes: ['RU', 'RUS', '643'],\n    calcFn: function(vat) {\n      function _check10DigitINN(vat, rules) {\n        var total = 0\n\n        if (vat.length === 10) {\n          for (var i = 0; i < 10; i++) {\n            total += +vat.charAt(i) * rules.multipliers.m_1[i]\n          }\n\n          total = total % 11\n          if (total > 9) {\n            total = total % 10\n          }\n\n          // Compare it with the last character of the VAT number. If it is the same, then it's valid\n          var expect = +vat.slice(9, 10)\n          return total === expect\n        }\n\n        return false\n      }\n\n      function _check12DigitINN(vat, rules) {\n        var total1 = 0\n        var total2 = 0\n\n        if (vat.length === 12) {\n          for (var j = 0; j < 11; j++) {\n            total1 += +vat.charAt(j) * rules.multipliers.m_2[j]\n          }\n\n          total1 = total1 % 11\n\n          if (total1 > 9) {\n            total1 = total1 % 10\n          }\n\n          for (var k = 0; k < 11; k++) {\n            total2 += +vat.charAt(k) * rules.multipliers.m_3[k]\n          }\n\n          total2 = total2 % 11\n          if (total2 > 9) {\n            total2 = total2 % 10\n          }\n\n          // Compare the first check with the 11th character and the second check with the 12th and last\n          // character of the VAT number. If they're both the same, then it's valid\n          var expect = (total1 === +vat.slice(10, 11))\n          var expect2 = (total2 === +vat.slice(11, 12))\n          return (expect) && (expect2)\n        }\n\n        return false\n      }\n\n      // See http://russianpartner.biz/test_inn.html for algorithm\n      return _check10DigitINN(vat, this.rules) || _check12DigitINN(vat, this.rules)\n    },\n    rules: {\n      multipliers: {\n        m_1: [2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\n        m_2: [7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\n        m_3: [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0]\n      },\n      regex: [/^(RU)(\\d{10}|\\d{12})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.serbia = {\n    name: 'Serbia',\n    codes: ['RS', 'SRB', '688'],\n    calcFn: function(vat) {\n      // Checks the check digits of a Serbian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n      var product = 10\n      var sum = 0\n      var checkDigit\n\n      for (var i = 0; i < 8; i++) {\n        // Extract the next digit and implement the algorithm\n        sum = (+vat.charAt(i) + product) % 10\n        if (sum === 0) {\n          sum = 10\n        }\n        product = (2 * sum) % 11\n      }\n\n      // Now check that we have the right check digit\n      var expect = 1\n      checkDigit = (product + (+vat.slice(8, 9))) % 10\n      return checkDigit === expect\n    },\n    rules: {\n      regex: [/^(RS)(\\d{9})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.slovakia_republic = {\n    name: 'Slovakia_',\n    codes: ['SK', 'SVK', '703'],\n    calcFn: function(vat) {\n      var expect = 0\n      var checkDigit = (vat % 11)\n      return checkDigit === expect\n    },\n    rules: {\n      regex: [/^(SK)([1-9]\\d[2346-9]\\d{7})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.slovenia = {\n    name: 'Slovenia',\n    codes: ['SI', 'SVN', '705'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits using modulus 11\n      total = 11 - total % 11\n      if (total === 10) {\n        total = 0\n      }\n\n      // Compare the number with the last character of the VAT number. If it is the\n      // same, then it's a valid check digit.\n      expect = +vat.slice(7, 8)\n      return !!(total !== 11 && total === expect)\n    },\n    rules: {\n      multipliers: [8, 7, 6, 5, 4, 3, 2],\n      regex: [/^(SI)([1-9]\\d{7})$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.spain = {\n    name: 'Spain',\n    codes: ['ES', 'ESP', '724'],\n    calcFn: function(vat) {\n      var i = 0\n      var total = 0\n      var temp\n      var expect\n\n      // National juridical entities\n      if (this.rules.additional[0].test(vat)) {\n        // Extract the next digit and multiply by the counter.\n        for (i = 0; i < 7; i++) {\n          temp = vat.charAt(i + 1) * this.rules.multipliers[i]\n          if (temp > 9)\n            total += Math.floor(temp / 10) + temp % 10\n          else\n            total += temp\n        }\n        // Now calculate the check digit itself.\n        total = 10 - total % 10\n        if (total === 10) {\n          total = 0\n        }\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(8, 9)\n        return total === expect\n      }\n\n      // Juridical entities other than national ones\n      else if (this.rules.additional[1].test(vat)) {\n        // Extract the next digit and multiply by the counter.\n        for (i = 0; i < 7; i++) {\n          temp = vat.charAt(i + 1) * this.rules.multipliers[i]\n          if (temp > 9)\n            total += Math.floor(temp / 10) + temp % 10\n          else\n            total += temp\n        }\n\n        // Now calculate the check digit itself.\n        total = 10 - total % 10\n        total = String.fromCharCode(total + 64)\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = vat.slice(8, 9)\n        return total === expect\n      }\n\n      // Personal number (NIF) (starting with numeric of Y or Z)\n      else if (this.rules.additional[2].test(vat)) {\n        var tempnumber = vat\n        if (tempnumber.substring(0, 1) === 'Y') tempnumber = tempnumber.replace(/Y/, '1')\n        if (tempnumber.substring(0, 1) === 'Z') tempnumber = tempnumber.replace(/Z/, '2')\n        expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+tempnumber.substring(0, 8) % 23)\n        return tempnumber.charAt(8) === expect\n      }\n\n      // Personal number (NIF) (starting with K, L, M, or X)\n      else if (this.rules.additional[3].test(vat)) {\n        expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+vat.substring(1, 8) % 23)\n        return vat.charAt(8) === expect\n      } else return false\n    },\n    rules: {\n      multipliers: [2, 1, 2, 1, 2, 1, 2],\n      regex: [\n        /^(ES)([A-Z]\\d{8})$/,\n        /^(ES)([A-HN-SW]\\d{7}[A-J])$/,\n        /^(ES)([0-9YZ]\\d{7}[A-Z])$/,\n        /^(ES)([KLMX]\\d{7}[A-Z])$/\n      ],\n      additional: [\n        /^[A-H|J|U|V]\\d{8}$/,\n        /^[A-H|N-S|W]\\d{7}[A-J]$/,\n        /^[0-9|Y|Z]\\d{7}[A-Z]$/,\n        /^[K|L|M|X]\\d{7}[A-Z]$/\n      ]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.sweden = {\n    name: 'Sweden',\n    codes: ['SE', 'SWE', '752'],\n    calcFn: function(vat) {\n      var expect\n\n      // Calculate R where R = R1 + R3 + R5 + R7 + R9, and Ri = INT(Ci/5) + (Ci*2) modulo 10\n      var R = 0\n      var digit\n      for (var i = 0; i < 9; i = i + 2) {\n        digit = +vat.charAt(i)\n        R += Math.floor(digit / 5) + ((digit * 2) % 10)\n      }\n\n      // Calculate S where S = C2 + C4 + C6 + C8\n      var S = 0\n      for (var j = 1; j < 9; j = j + 2) {\n        S += +vat.charAt(j)\n      }\n\n      var checkDigit = (10 - (R + S) % 10) % 10\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(9, 10)\n\n      return checkDigit === expect\n    },\n    rules: {\n      regex: [/^(SE)(\\d{10}01)$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.switzerland = {\n    name: 'Switzerland',\n    codes: ['CH', 'CHE', '756'],\n    calcFn: function(vat) {\n      var total = 0\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digit.\n      total = 11 - total % 11\n      if (total === 10) return false\n      if (total === 11) total = 0\n\n      // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n      var expect = +vat.substr(8, 1)\n      return total === expect\n    },\n    rules: {\n      multipliers: [5, 4, 3, 2, 7, 6, 5, 4],\n      regex: [/^(CHE)(\\d{9})(MWST)?$/]\n    }\n  }\n\n  // eslint-disable-next-line no-undef\n  exports.countries.united_kingdom = {\n    name: 'United Kingdom',\n    codes: ['GB', 'GBR', '826'],\n    calcFn: function(vat) {\n      var total = 0\n      var expect\n\n      // Government departments\n      if (vat.substr(0, 2) === 'GD') {\n        expect = 500\n        return vat.substr(2, 3) < expect\n      }\n\n      // Health authorities\n      if (vat.substr(0, 2) === 'HA') {\n        expect = 499\n        return vat.substr(2, 3) > expect\n      }\n\n      // Standard and commercial numbers\n\n      // 0 VAT numbers disallowed!\n      if (+vat.slice(0) === 0) return false\n\n      // Check range is OK for modulus 97 calculation\n      var no = +vat.slice(0, 7)\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Old numbers use a simple 97 modulus, but new numbers use an adaptation of that (less 55). Our\n      // VAT number could use either system, so we check it against both.\n\n      // Establish check digits by subtracting 97 from total until negative.\n      var checkDigit = total\n      while (checkDigit > 0) {\n        checkDigit = checkDigit - 97\n      }\n\n      // Get the absolute value and compare it with the last two characters of the VAT number. If the\n      // same, then it is a valid traditional check digit. However, even then the number must fit within\n      // certain specified ranges.\n      checkDigit = Math.abs(checkDigit)\n      if (checkDigit === +vat.slice(7, 9) && no < 9990001 && (no < 100000 || no > 999999) && (no < 9490001 || no > 9700000)) return true\n\n      // Now try the new method by subtracting 55 from the check digit if we can - else add 42\n      if (checkDigit >= 55)\n        checkDigit = checkDigit - 55\n      else\n        checkDigit = checkDigit + 42\n      expect = +vat.slice(7, 9)\n      return !!(checkDigit === expect && no > 1000000)\n    },\n    rules: {\n      multipliers: [8, 7, 6, 5, 4, 3, 2],\n      regex: [\n        /^(GB)?(\\d{9})$/,\n        /^(GB)?(\\d{12})$/,\n        /^(GB)?(GD\\d{3})$/,\n        /^(GB)?(HA\\d{3})$/\n      ]\n    }\n  }\n\n\n  //Support of node.js\n\n  if (typeof module === 'object' && module.exports) module.exports = exports\n\n  return exports\n\n})()"]}